Search.setIndex({"alltitles": {"AG codes": [[2, null]], "AbstractLinearCode": [[33, "abstractlinearcode"]], "AbstractLinearRankMetricCode": [[35, "abstractlinearrankmetriccode"]], "Access functions to online databases for coding theory": [[15, null]], "Automorphism Groups of Linear Codes": [[0, "automorphism-groups-of-linear-codes"]], "BCH code": [[4, null]], "Bounds for Parameters of Linear Codes": [[0, "bounds-for-parameters-of-linear-codes"]], "Bounds for parameters of codes": [[9, null]], "Canonical forms and automorphism group computation for linear codes over finite fields": [[12, null]], "Canonical forms and automorphisms for linear codes over finite fields": [[11, null]], "Channels": [[7, null]], "Classes and functions": [[40, "classes-and-functions"]], "Codes": [[1, null]], "Coding Theory": [[0, null]], "Constructions of generator matrices using the GUAVA package for GAP": [[26, null]], "Cyclic code": [[14, null]], "Database of two-weight codes": [[42, null]], "Databases for Coding Theory": [[0, "databases-for-coding-theory"]], "Decoders": [[16, null]], "Decoders for AG codes": [[3, null]], "Decoding": [[0, "decoding"]], "Delsarte (or linear programming) bounds": [[18, null]], "Derived Code Constructions": [[0, "derived-code-constructions"]], "Derived Codes": [[13, "derived-codes"]], "Encoders": [[19, null]], "Enumerating binary self-dual codes": [[39, null]], "Extended code": [[21, null]], "Families of Codes (Generator matrix representation)": [[13, "families-of-codes-generator-matrix-representation"]], "Families of Codes (Rich representation)": [[13, "families-of-codes-rich-representation"]], "Families of Linear Codes": [[0, "families-of-linear-codes"]], "Families or Generic codes": [[33, "families-or-generic-codes"]], "Further references": [[33, "further-references"], [35, "further-references"]], "Gabidulin Code": [[22, null]], "Generic structures for linear codes of any metric": [[34, null]], "Generic structures for linear codes over the Hamming metric": [[33, null]], "Generic structures for linear codes over the rank metric": [[35, null]], "Golay code": [[23, null]], "Goppa code": [[24, null]], "Guruswami-Sudan decoder for (Generalized) Reed-Solomon codes": [[27, null]], "Guruswami-Sudan utility methods": [[29, null]], "Hamming codes": [[30, null]], "Huffman encoding": [[40, null]], "Index of bounds on the parameters of codes": [[6, null]], "Index of channels": [[8, null]], "Index of code constructions": [[13, null]], "Index of decoders": [[17, null]], "Index of encoders": [[20, null]], "Indices and Tables": [[0, "indices-and-tables"]], "Information-set decoding for linear codes": [[31, null]], "Interpolation algorithms for the Guruswami-Sudan decoder": [[28, null]], "Kasami code": [[32, null]], "Linear Codes": [[0, "linear-codes"], [33, "linear-codes"]], "Linear Rank Metric Code and Gabidulin Codes": [[35, "linear-rank-metric-code-and-gabidulin-codes"]], "Linear code constructors that do not preserve the structural information": [[10, null]], "LinearCode": [[33, "linearcode"]], "LinearRankMetricCode": [[35, "linearrankmetriccode"]], "Miscellaneous Modules": [[0, "miscellaneous-modules"]], "Optimized low-level binary code representation": [[5, null]], "Parity-check code": [[36, null]], "Punctured code": [[37, null]], "Rank Metric": [[35, "rank-metric"]], "Reed-Muller code": [[38, null]], "Reed-Solomon codes and Generalized Reed-Solomon codes": [[25, null]], "Subfield subcode": [[41, null]], "Todo": [[9, "id3"]]}, "docnames": ["index", "sage/coding/abstract_code", "sage/coding/ag_code", "sage/coding/ag_code_decoders", "sage/coding/bch_code", "sage/coding/binary_code", "sage/coding/bounds_catalog", "sage/coding/channel", "sage/coding/channels_catalog", "sage/coding/code_bounds", "sage/coding/code_constructions", "sage/coding/codecan/autgroup_can_label", "sage/coding/codecan/codecan", "sage/coding/codes_catalog", "sage/coding/cyclic_code", "sage/coding/databases", "sage/coding/decoder", "sage/coding/decoders_catalog", "sage/coding/delsarte_bounds", "sage/coding/encoder", "sage/coding/encoders_catalog", "sage/coding/extended_code", "sage/coding/gabidulin_code", "sage/coding/golay_code", "sage/coding/goppa_code", "sage/coding/grs_code", "sage/coding/guava", "sage/coding/guruswami_sudan/gs_decoder", "sage/coding/guruswami_sudan/interpolation", "sage/coding/guruswami_sudan/utils", "sage/coding/hamming_code", "sage/coding/information_set_decoder", "sage/coding/kasami_codes", "sage/coding/linear_code", "sage/coding/linear_code_no_metric", "sage/coding/linear_rank_metric", "sage/coding/parity_check_code", "sage/coding/punctured_code", "sage/coding/reed_muller_code", "sage/coding/self_dual_codes", "sage/coding/source_coding/huffman", "sage/coding/subfield_subcode", "sage/coding/two_weight_db"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2}, "filenames": ["index.rst", "sage/coding/abstract_code.rst", "sage/coding/ag_code.rst", "sage/coding/ag_code_decoders.rst", "sage/coding/bch_code.rst", "sage/coding/binary_code.rst", "sage/coding/bounds_catalog.rst", "sage/coding/channel.rst", "sage/coding/channels_catalog.rst", "sage/coding/code_bounds.rst", "sage/coding/code_constructions.rst", "sage/coding/codecan/autgroup_can_label.rst", "sage/coding/codecan/codecan.rst", "sage/coding/codes_catalog.rst", "sage/coding/cyclic_code.rst", "sage/coding/databases.rst", "sage/coding/decoder.rst", "sage/coding/decoders_catalog.rst", "sage/coding/delsarte_bounds.rst", "sage/coding/encoder.rst", "sage/coding/encoders_catalog.rst", "sage/coding/extended_code.rst", "sage/coding/gabidulin_code.rst", "sage/coding/golay_code.rst", "sage/coding/goppa_code.rst", "sage/coding/grs_code.rst", "sage/coding/guava.rst", "sage/coding/guruswami_sudan/gs_decoder.rst", "sage/coding/guruswami_sudan/interpolation.rst", "sage/coding/guruswami_sudan/utils.rst", "sage/coding/hamming_code.rst", "sage/coding/information_set_decoder.rst", "sage/coding/kasami_codes.rst", "sage/coding/linear_code.rst", "sage/coding/linear_code_no_metric.rst", "sage/coding/linear_rank_metric.rst", "sage/coding/parity_check_code.rst", "sage/coding/punctured_code.rst", "sage/coding/reed_muller_code.rst", "sage/coding/self_dual_codes.rst", "sage/coding/source_coding/huffman.rst", "sage/coding/subfield_subcode.rst", "sage/coding/two_weight_db.rst"], "indexentries": {"abstractcode (class in sage.coding.abstract_code)": [[1, "sage.coding.abstract_code.AbstractCode", false]], "abstractlinearcode (class in sage.coding.linear_code)": [[33, "sage.coding.linear_code.AbstractLinearCode", false]], "abstractlinearcodenometric (class in sage.coding.linear_code_no_metric)": [[34, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric", false]], "abstractlinearrankmetriccode (class in sage.coding.linear_rank_metric)": [[35, "sage.coding.linear_rank_metric.AbstractLinearRankMetricCode", false]], "add_decoder() (sage.coding.abstract_code.abstractcode method)": [[1, "sage.coding.abstract_code.AbstractCode.add_decoder", false]], "add_encoder() (sage.coding.abstract_code.abstractcode method)": [[1, "sage.coding.abstract_code.AbstractCode.add_encoder", false]], "agcode (class in sage.coding.ag_code)": [[2, "sage.coding.ag_code.AGCode", false]], "alekhnovich_root_finder() (in module sage.coding.guruswami_sudan.gs_decoder)": [[27, "sage.coding.guruswami_sudan.gs_decoder.alekhnovich_root_finder", false]], "algorithm() (sage.coding.information_set_decoder.linearcodeinformationsetdecoder method)": [[31, "sage.coding.information_set_decoder.LinearCodeInformationSetDecoder.algorithm", false]], "ambient_space() (sage.coding.abstract_code.abstractcode method)": [[1, "sage.coding.abstract_code.AbstractCode.ambient_space", false]], "ambient_space() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[34, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.ambient_space", false]], "apply_permutation() (sage.coding.binary_code.binarycode method)": [[5, "sage.coding.binary_code.BinaryCode.apply_permutation", false]], "assmus_mattson_designs() (sage.coding.linear_code.abstractlinearcode method)": [[33, "sage.coding.linear_code.AbstractLinearCode.assmus_mattson_designs", false]], "automorphism_group_gens() (sage.coding.linear_code.abstractlinearcode method)": [[33, "sage.coding.linear_code.AbstractLinearCode.automorphism_group_gens", false]], "base_field() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[34, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.base_field", false]], "base_function_field() (sage.coding.ag_code.agcode method)": [[2, "sage.coding.ag_code.AGCode.base_function_field", false]], "basis() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[34, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.basis", false]], "basis_differentials() (sage.coding.ag_code.differentialagcode method)": [[2, "sage.coding.ag_code.DifferentialAGCode.basis_differentials", false]], "basis_functions() (sage.coding.ag_code.evaluationagcode method)": [[2, "sage.coding.ag_code.EvaluationAGCode.basis_functions", false]], "bch_bound() (in module sage.coding.cyclic_code)": [[14, "sage.coding.cyclic_code.bch_bound", false]], "bch_bound() (sage.coding.cyclic_code.cycliccode method)": [[14, "sage.coding.cyclic_code.CyclicCode.bch_bound", false]], "bch_code() (sage.coding.cyclic_code.cycliccodesurroundingbchdecoder method)": [[14, "sage.coding.cyclic_code.CyclicCodeSurroundingBCHDecoder.bch_code", false]], "bch_decoder() (sage.coding.cyclic_code.cycliccodesurroundingbchdecoder method)": [[14, "sage.coding.cyclic_code.CyclicCodeSurroundingBCHDecoder.bch_decoder", false]], "bch_to_grs() (sage.coding.bch_code.bchcode method)": [[4, "sage.coding.bch_code.BCHCode.bch_to_grs", false]], "bch_word_to_grs() (sage.coding.bch_code.bchunderlyinggrsdecoder method)": [[4, "sage.coding.bch_code.BCHUnderlyingGRSDecoder.bch_word_to_grs", false]], "bchcode (class in sage.coding.bch_code)": [[4, "sage.coding.bch_code.BCHCode", false]], "bchunderlyinggrsdecoder (class in sage.coding.bch_code)": [[4, "sage.coding.bch_code.BCHUnderlyingGRSDecoder", false]], "best_linear_code_in_codetables_dot_de() (in module sage.coding.databases)": [[15, "sage.coding.databases.best_linear_code_in_codetables_dot_de", false]], "best_linear_code_in_guava() (in module sage.coding.databases)": [[15, "sage.coding.databases.best_linear_code_in_guava", false]], "binarycode (class in sage.coding.binary_code)": [[5, "sage.coding.binary_code.BinaryCode", false]], "binarycodeclassifier (class in sage.coding.binary_code)": [[5, "sage.coding.binary_code.BinaryCodeClassifier", false]], "binaryreedmullercode (class in sage.coding.reed_muller_code)": [[38, "sage.coding.reed_muller_code.BinaryReedMullerCode", false]], "binomial_moment() (sage.coding.linear_code.abstractlinearcode method)": [[33, "sage.coding.linear_code.AbstractLinearCode.binomial_moment", false]], "bounds_on_minimum_distance_in_guava() (in module sage.coding.databases)": [[15, "sage.coding.databases.bounds_on_minimum_distance_in_guava", false]], "calibrate() (sage.coding.information_set_decoder.informationsetalgorithm method)": [[31, "sage.coding.information_set_decoder.InformationSetAlgorithm.calibrate", false]], "calibrate() (sage.coding.information_set_decoder.leebrickellisdalgorithm method)": [[31, "sage.coding.information_set_decoder.LeeBrickellISDAlgorithm.calibrate", false]], "canonical_representative() (sage.coding.linear_code.abstractlinearcode method)": [[33, "sage.coding.linear_code.AbstractLinearCode.canonical_representative", false]], "cardinality() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[34, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.cardinality", false]], "cartiercode (class in sage.coding.ag_code)": [[2, "sage.coding.ag_code.CartierCode", false]], "channel (class in sage.coding.channel)": [[7, "sage.coding.channel.Channel", false]], "characteristic() (sage.coding.linear_code.abstractlinearcode method)": [[33, "sage.coding.linear_code.AbstractLinearCode.characteristic", false]], "characteristic_polynomial() (sage.coding.linear_code.abstractlinearcode method)": [[33, "sage.coding.linear_code.AbstractLinearCode.characteristic_polynomial", false]], "check_polynomial() (sage.coding.cyclic_code.cycliccode method)": [[14, "sage.coding.cyclic_code.CyclicCode.check_polynomial", false]], "chinen_polynomial() (sage.coding.linear_code.abstractlinearcode method)": [[33, "sage.coding.linear_code.AbstractLinearCode.chinen_polynomial", false]], "cmp() (sage.coding.binary_code.partitionstack method)": [[5, "sage.coding.binary_code.PartitionStack.cmp", false]], "code() (sage.coding.decoder.decoder method)": [[16, "sage.coding.decoder.Decoder.code", false]], "code() (sage.coding.encoder.encoder method)": [[19, "sage.coding.encoder.Encoder.code", false]], "code() (sage.coding.information_set_decoder.informationsetalgorithm method)": [[31, "sage.coding.information_set_decoder.InformationSetAlgorithm.code", false]], "codesize_upper_bound() (in module sage.coding.code_bounds)": [[9, "sage.coding.code_bounds.codesize_upper_bound", false]], "column_blocks() (sage.coding.codecan.codecan.innergroup method)": [[12, "sage.coding.codecan.codecan.InnerGroup.column_blocks", false]], "column_multipliers() (sage.coding.grs_code.generalizedreedsolomoncode method)": [[25, "sage.coding.grs_code.GeneralizedReedSolomonCode.column_multipliers", false]], "connected_encoder() (sage.coding.ag_code_decoders.differentialagcodeuniquedecoder method)": [[3, "sage.coding.ag_code_decoders.DifferentialAGCodeUniqueDecoder.connected_encoder", false]], "connected_encoder() (sage.coding.ag_code_decoders.evaluationagcodeuniquedecoder method)": [[3, "sage.coding.ag_code_decoders.EvaluationAGCodeUniqueDecoder.connected_encoder", false]], "connected_encoder() (sage.coding.decoder.decoder method)": [[16, "sage.coding.decoder.Decoder.connected_encoder", false]], "construction_x() (sage.coding.linear_code.abstractlinearcode method)": [[33, "sage.coding.linear_code.AbstractLinearCode.construction_x", false]], "cosetgraph() (sage.coding.linear_code.abstractlinearcode method)": [[33, "sage.coding.linear_code.AbstractLinearCode.cosetGraph", false]], "covering_radius() (sage.coding.golay_code.golaycode method)": [[23, "sage.coding.golay_code.GolayCode.covering_radius", false]], "covering_radius() (sage.coding.grs_code.generalizedreedsolomoncode method)": [[25, "sage.coding.grs_code.GeneralizedReedSolomonCode.covering_radius", false]], "covering_radius() (sage.coding.linear_code.abstractlinearcode method)": [[33, "sage.coding.linear_code.AbstractLinearCode.covering_radius", false]], "cycliccode (class in sage.coding.cyclic_code)": [[14, "sage.coding.cyclic_code.CyclicCode", false]], "cycliccodepolynomialencoder (class in sage.coding.cyclic_code)": [[14, "sage.coding.cyclic_code.CyclicCodePolynomialEncoder", false]], "cycliccodesurroundingbchdecoder (class in sage.coding.cyclic_code)": [[14, "sage.coding.cyclic_code.CyclicCodeSurroundingBCHDecoder", false]], "cycliccodevectorencoder (class in sage.coding.cyclic_code)": [[14, "sage.coding.cyclic_code.CyclicCodeVectorEncoder", false]], "decode() (sage.coding.ag_code_decoders.decoder_k method)": [[3, "sage.coding.ag_code_decoders.Decoder_K.decode", false]], "decode() (sage.coding.ag_code_decoders.decoder_k_extension method)": [[3, "sage.coding.ag_code_decoders.Decoder_K_extension.decode", false]], "decode() (sage.coding.information_set_decoder.informationsetalgorithm method)": [[31, "sage.coding.information_set_decoder.InformationSetAlgorithm.decode", false]], "decode() (sage.coding.information_set_decoder.leebrickellisdalgorithm method)": [[31, "sage.coding.information_set_decoder.LeeBrickellISDAlgorithm.decode", false]], "decode() (sage.coding.source_coding.huffman.huffman method)": [[40, "sage.coding.source_coding.huffman.Huffman.decode", false]], "decode_to_code() (sage.coding.abstract_code.abstractcode method)": [[1, "sage.coding.abstract_code.AbstractCode.decode_to_code", false]], "decode_to_code() (sage.coding.ag_code_decoders.differentialagcodeuniquedecoder method)": [[3, "sage.coding.ag_code_decoders.DifferentialAGCodeUniqueDecoder.decode_to_code", false]], "decode_to_code() (sage.coding.ag_code_decoders.evaluationagcodeuniquedecoder method)": [[3, "sage.coding.ag_code_decoders.EvaluationAGCodeUniqueDecoder.decode_to_code", false]], "decode_to_code() (sage.coding.bch_code.bchunderlyinggrsdecoder method)": [[4, "sage.coding.bch_code.BCHUnderlyingGRSDecoder.decode_to_code", false]], "decode_to_code() (sage.coding.cyclic_code.cycliccodesurroundingbchdecoder method)": [[14, "sage.coding.cyclic_code.CyclicCodeSurroundingBCHDecoder.decode_to_code", false]], "decode_to_code() (sage.coding.decoder.decoder method)": [[16, "sage.coding.decoder.Decoder.decode_to_code", false]], "decode_to_code() (sage.coding.extended_code.extendedcodeoriginalcodedecoder method)": [[21, "sage.coding.extended_code.ExtendedCodeOriginalCodeDecoder.decode_to_code", false]], "decode_to_code() (sage.coding.gabidulin_code.gabidulingaodecoder method)": [[22, "sage.coding.gabidulin_code.GabidulinGaoDecoder.decode_to_code", false]], "decode_to_code() (sage.coding.grs_code.grsberlekampwelchdecoder method)": [[25, "sage.coding.grs_code.GRSBerlekampWelchDecoder.decode_to_code", false]], "decode_to_code() (sage.coding.grs_code.grsgaodecoder method)": [[25, "sage.coding.grs_code.GRSGaoDecoder.decode_to_code", false]], "decode_to_code() (sage.coding.grs_code.grskeyequationsyndromedecoder method)": [[25, "sage.coding.grs_code.GRSKeyEquationSyndromeDecoder.decode_to_code", false]], "decode_to_code() (sage.coding.guruswami_sudan.gs_decoder.grsguruswamisudandecoder method)": [[27, "sage.coding.guruswami_sudan.gs_decoder.GRSGuruswamiSudanDecoder.decode_to_code", false]], "decode_to_code() (sage.coding.information_set_decoder.linearcodeinformationsetdecoder method)": [[31, "sage.coding.information_set_decoder.LinearCodeInformationSetDecoder.decode_to_code", false]], "decode_to_code() (sage.coding.linear_code.linearcodenearestneighbordecoder method)": [[33, "sage.coding.linear_code.LinearCodeNearestNeighborDecoder.decode_to_code", false]], "decode_to_code() (sage.coding.linear_code.linearcodesyndromedecoder method)": [[33, "sage.coding.linear_code.LinearCodeSyndromeDecoder.decode_to_code", false]], "decode_to_code() (sage.coding.linear_rank_metric.linearrankmetriccodenearestneighbordecoder method)": [[35, "sage.coding.linear_rank_metric.LinearRankMetricCodeNearestNeighborDecoder.decode_to_code", false]], "decode_to_code() (sage.coding.punctured_code.puncturedcodeoriginalcodedecoder method)": [[37, "sage.coding.punctured_code.PuncturedCodeOriginalCodeDecoder.decode_to_code", false]], "decode_to_code() (sage.coding.subfield_subcode.subfieldsubcodeoriginalcodedecoder method)": [[41, "sage.coding.subfield_subcode.SubfieldSubcodeOriginalCodeDecoder.decode_to_code", false]], "decode_to_message() (sage.coding.abstract_code.abstractcode method)": [[1, "sage.coding.abstract_code.AbstractCode.decode_to_message", false]], "decode_to_message() (sage.coding.ag_code_decoders.differentialagcodeuniquedecoder method)": [[3, "sage.coding.ag_code_decoders.DifferentialAGCodeUniqueDecoder.decode_to_message", false]], "decode_to_message() (sage.coding.ag_code_decoders.evaluationagcodeuniquedecoder method)": [[3, "sage.coding.ag_code_decoders.EvaluationAGCodeUniqueDecoder.decode_to_message", false]], "decode_to_message() (sage.coding.decoder.decoder method)": [[16, "sage.coding.decoder.Decoder.decode_to_message", false]], "decode_to_message() (sage.coding.gabidulin_code.gabidulingaodecoder method)": [[22, "sage.coding.gabidulin_code.GabidulinGaoDecoder.decode_to_message", false]], "decode_to_message() (sage.coding.grs_code.grsberlekampwelchdecoder method)": [[25, "sage.coding.grs_code.GRSBerlekampWelchDecoder.decode_to_message", false]], "decode_to_message() (sage.coding.grs_code.grserrorerasuredecoder method)": [[25, "sage.coding.grs_code.GRSErrorErasureDecoder.decode_to_message", false]], "decode_to_message() (sage.coding.grs_code.grsgaodecoder method)": [[25, "sage.coding.grs_code.GRSGaoDecoder.decode_to_message", false]], "decode_to_message() (sage.coding.grs_code.grskeyequationsyndromedecoder method)": [[25, "sage.coding.grs_code.GRSKeyEquationSyndromeDecoder.decode_to_message", false]], "decode_to_message() (sage.coding.guruswami_sudan.gs_decoder.grsguruswamisudandecoder method)": [[27, "sage.coding.guruswami_sudan.gs_decoder.GRSGuruswamiSudanDecoder.decode_to_message", false]], "decoder (class in sage.coding.decoder)": [[16, "sage.coding.decoder.Decoder", false]], "decoder() (sage.coding.abstract_code.abstractcode method)": [[1, "sage.coding.abstract_code.AbstractCode.decoder", false]], "decoder_k (class in sage.coding.ag_code_decoders)": [[3, "sage.coding.ag_code_decoders.Decoder_K", false]], "decoder_k_extension (class in sage.coding.ag_code_decoders)": [[3, "sage.coding.ag_code_decoders.Decoder_K_extension", false]], "decoder_type() (sage.coding.decoder.decoder class method)": [[16, "sage.coding.decoder.Decoder.decoder_type", false]], "decoders_available() (sage.coding.abstract_code.abstractcode method)": [[1, "sage.coding.abstract_code.AbstractCode.decoders_available", false]], "decoding_interval() (sage.coding.information_set_decoder.informationsetalgorithm method)": [[31, "sage.coding.information_set_decoder.InformationSetAlgorithm.decoding_interval", false]], "decoding_interval() (sage.coding.information_set_decoder.linearcodeinformationsetdecoder method)": [[31, "sage.coding.information_set_decoder.LinearCodeInformationSetDecoder.decoding_interval", false]], "decoding_radius() (sage.coding.ag_code_decoders.differentialagcodeuniquedecoder method)": [[3, "sage.coding.ag_code_decoders.DifferentialAGCodeUniqueDecoder.decoding_radius", false]], "decoding_radius() (sage.coding.ag_code_decoders.evaluationagcodeuniquedecoder method)": [[3, "sage.coding.ag_code_decoders.EvaluationAGCodeUniqueDecoder.decoding_radius", false]], "decoding_radius() (sage.coding.bch_code.bchunderlyinggrsdecoder method)": [[4, "sage.coding.bch_code.BCHUnderlyingGRSDecoder.decoding_radius", false]], "decoding_radius() (sage.coding.cyclic_code.cycliccodesurroundingbchdecoder method)": [[14, "sage.coding.cyclic_code.CyclicCodeSurroundingBCHDecoder.decoding_radius", false]], "decoding_radius() (sage.coding.decoder.decoder method)": [[16, "sage.coding.decoder.Decoder.decoding_radius", false]], "decoding_radius() (sage.coding.extended_code.extendedcodeoriginalcodedecoder method)": [[21, "sage.coding.extended_code.ExtendedCodeOriginalCodeDecoder.decoding_radius", false]], "decoding_radius() (sage.coding.gabidulin_code.gabidulingaodecoder method)": [[22, "sage.coding.gabidulin_code.GabidulinGaoDecoder.decoding_radius", false]], "decoding_radius() (sage.coding.grs_code.grsberlekampwelchdecoder method)": [[25, "sage.coding.grs_code.GRSBerlekampWelchDecoder.decoding_radius", false]], "decoding_radius() (sage.coding.grs_code.grserrorerasuredecoder method)": [[25, "sage.coding.grs_code.GRSErrorErasureDecoder.decoding_radius", false]], "decoding_radius() (sage.coding.grs_code.grsgaodecoder method)": [[25, "sage.coding.grs_code.GRSGaoDecoder.decoding_radius", false]], "decoding_radius() (sage.coding.grs_code.grskeyequationsyndromedecoder method)": [[25, "sage.coding.grs_code.GRSKeyEquationSyndromeDecoder.decoding_radius", false]], "decoding_radius() (sage.coding.guruswami_sudan.gs_decoder.grsguruswamisudandecoder method)": [[27, "sage.coding.guruswami_sudan.gs_decoder.GRSGuruswamiSudanDecoder.decoding_radius", false]], "decoding_radius() (sage.coding.information_set_decoder.linearcodeinformationsetdecoder method)": [[31, "sage.coding.information_set_decoder.LinearCodeInformationSetDecoder.decoding_radius", false]], "decoding_radius() (sage.coding.linear_code.linearcodenearestneighbordecoder method)": [[33, "sage.coding.linear_code.LinearCodeNearestNeighborDecoder.decoding_radius", false]], "decoding_radius() (sage.coding.linear_code.linearcodesyndromedecoder method)": [[33, "sage.coding.linear_code.LinearCodeSyndromeDecoder.decoding_radius", false]], "decoding_radius() (sage.coding.linear_rank_metric.linearrankmetriccodenearestneighbordecoder method)": [[35, "sage.coding.linear_rank_metric.LinearRankMetricCodeNearestNeighborDecoder.decoding_radius", false]], "decoding_radius() (sage.coding.punctured_code.puncturedcodeoriginalcodedecoder method)": [[37, "sage.coding.punctured_code.PuncturedCodeOriginalCodeDecoder.decoding_radius", false]], "decoding_radius() (sage.coding.subfield_subcode.subfieldsubcodeoriginalcodedecoder method)": [[41, "sage.coding.subfield_subcode.SubfieldSubcodeOriginalCodeDecoder.decoding_radius", false]], "decodingerror": [[16, "sage.coding.decoder.DecodingError", false]], "defining_set() (sage.coding.cyclic_code.cycliccode method)": [[14, "sage.coding.cyclic_code.CyclicCode.defining_set", false]], "delsarte_bound_additive_hamming_space() (in module sage.coding.delsarte_bounds)": [[18, "sage.coding.delsarte_bounds.delsarte_bound_additive_hamming_space", false]], "delsarte_bound_constant_weight_code() (in module sage.coding.delsarte_bounds)": [[18, "sage.coding.delsarte_bounds.delsarte_bound_constant_weight_code", false]], "delsarte_bound_hamming_space() (in module sage.coding.delsarte_bounds)": [[18, "sage.coding.delsarte_bounds.delsarte_bound_hamming_space", false]], "delsarte_bound_q_matrix() (in module sage.coding.delsarte_bounds)": [[18, "sage.coding.delsarte_bounds.delsarte_bound_Q_matrix", false]], "designed_distance() (sage.coding.ag_code.cartiercode method)": [[2, "sage.coding.ag_code.CartierCode.designed_distance", false]], "designed_distance() (sage.coding.ag_code.differentialagcode method)": [[2, "sage.coding.ag_code.DifferentialAGCode.designed_distance", false]], "designed_distance() (sage.coding.ag_code.evaluationagcode method)": [[2, "sage.coding.ag_code.EvaluationAGCode.designed_distance", false]], "designed_distance() (sage.coding.bch_code.bchcode method)": [[4, "sage.coding.bch_code.BCHCode.designed_distance", false]], "differentialagcode (class in sage.coding.ag_code)": [[2, "sage.coding.ag_code.DifferentialAGCode", false]], "differentialagcodedecoder_k (class in sage.coding.ag_code_decoders)": [[3, "sage.coding.ag_code_decoders.DifferentialAGCodeDecoder_K", false]], "differentialagcodedecoder_k_extension (class in sage.coding.ag_code_decoders)": [[3, "sage.coding.ag_code_decoders.DifferentialAGCodeDecoder_K_extension", false]], "differentialagcodeencoder (class in sage.coding.ag_code_decoders)": [[3, "sage.coding.ag_code_decoders.DifferentialAGCodeEncoder", false]], "differentialagcodeuniquedecoder (class in sage.coding.ag_code_decoders)": [[3, "sage.coding.ag_code_decoders.DifferentialAGCodeUniqueDecoder", false]], "dimension() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[34, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.dimension", false]], "dimension() (sage.coding.punctured_code.puncturedcode method)": [[37, "sage.coding.punctured_code.PuncturedCode.dimension", false]], "dimension() (sage.coding.subfield_subcode.subfieldsubcode method)": [[41, "sage.coding.subfield_subcode.SubfieldSubcode.dimension", false]], "dimension_lower_bound() (sage.coding.subfield_subcode.subfieldsubcode method)": [[41, "sage.coding.subfield_subcode.SubfieldSubcode.dimension_lower_bound", false]], "dimension_upper_bound() (in module sage.coding.code_bounds)": [[9, "sage.coding.code_bounds.dimension_upper_bound", false]], "dimension_upper_bound() (sage.coding.subfield_subcode.subfieldsubcode method)": [[41, "sage.coding.subfield_subcode.SubfieldSubcode.dimension_upper_bound", false]], "direct_sum() (sage.coding.linear_code.abstractlinearcode method)": [[33, "sage.coding.linear_code.AbstractLinearCode.direct_sum", false]], "distance_bound() (sage.coding.goppa_code.goppacode method)": [[24, "sage.coding.goppa_code.GoppaCode.distance_bound", false]], "divisor() (sage.coding.linear_code.abstractlinearcode method)": [[33, "sage.coding.linear_code.AbstractLinearCode.divisor", false]], "duadiccodeevenpair() (in module sage.coding.code_constructions)": [[10, "sage.coding.code_constructions.DuadicCodeEvenPair", false]], "duadiccodeoddpair() (in module sage.coding.code_constructions)": [[10, "sage.coding.code_constructions.DuadicCodeOddPair", false]], "dual_code() (sage.coding.gabidulin_code.gabidulincode method)": [[22, "sage.coding.gabidulin_code.GabidulinCode.dual_code", false]], "dual_code() (sage.coding.golay_code.golaycode method)": [[23, "sage.coding.golay_code.GolayCode.dual_code", false]], "dual_code() (sage.coding.grs_code.generalizedreedsolomoncode method)": [[25, "sage.coding.grs_code.GeneralizedReedSolomonCode.dual_code", false]], "dual_code() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[34, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.dual_code", false]], "eberlein() (in module sage.coding.delsarte_bounds)": [[18, "sage.coding.delsarte_bounds.eberlein", false]], "elias_bound_asymp() (in module sage.coding.code_bounds)": [[9, "sage.coding.code_bounds.elias_bound_asymp", false]], "elias_upper_bound() (in module sage.coding.code_bounds)": [[9, "sage.coding.code_bounds.elias_upper_bound", false]], "embedding() (sage.coding.subfield_subcode.subfieldsubcode method)": [[41, "sage.coding.subfield_subcode.SubfieldSubcode.embedding", false]], "encode() (sage.coding.abstract_code.abstractcode method)": [[1, "sage.coding.abstract_code.AbstractCode.encode", false]], "encode() (sage.coding.ag_code_decoders.decoder_k method)": [[3, "sage.coding.ag_code_decoders.Decoder_K.encode", false]], "encode() (sage.coding.ag_code_decoders.decoder_k_extension method)": [[3, "sage.coding.ag_code_decoders.Decoder_K_extension.encode", false]], "encode() (sage.coding.ag_code_decoders.differentialagcodeencoder method)": [[3, "sage.coding.ag_code_decoders.DifferentialAGCodeEncoder.encode", false]], "encode() (sage.coding.ag_code_decoders.evaluationagcodeencoder method)": [[3, "sage.coding.ag_code_decoders.EvaluationAGCodeEncoder.encode", false]], "encode() (sage.coding.cyclic_code.cycliccodepolynomialencoder method)": [[14, "sage.coding.cyclic_code.CyclicCodePolynomialEncoder.encode", false]], "encode() (sage.coding.cyclic_code.cycliccodevectorencoder method)": [[14, "sage.coding.cyclic_code.CyclicCodeVectorEncoder.encode", false]], "encode() (sage.coding.encoder.encoder method)": [[19, "sage.coding.encoder.Encoder.encode", false]], "encode() (sage.coding.gabidulin_code.gabidulinpolynomialevaluationencoder method)": [[22, "sage.coding.gabidulin_code.GabidulinPolynomialEvaluationEncoder.encode", false]], "encode() (sage.coding.grs_code.grsevaluationpolynomialencoder method)": [[25, "sage.coding.grs_code.GRSEvaluationPolynomialEncoder.encode", false]], "encode() (sage.coding.parity_check_code.paritycheckcodestraightforwardencoder method)": [[36, "sage.coding.parity_check_code.ParityCheckCodeStraightforwardEncoder.encode", false]], "encode() (sage.coding.punctured_code.puncturedcode method)": [[37, "sage.coding.punctured_code.PuncturedCode.encode", false]], "encode() (sage.coding.reed_muller_code.reedmullerpolynomialencoder method)": [[38, "sage.coding.reed_muller_code.ReedMullerPolynomialEncoder.encode", false]], "encode() (sage.coding.source_coding.huffman.huffman method)": [[40, "sage.coding.source_coding.huffman.Huffman.encode", false]], "encoder (class in sage.coding.encoder)": [[19, "sage.coding.encoder.Encoder", false]], "encoder() (sage.coding.abstract_code.abstractcode method)": [[1, "sage.coding.abstract_code.AbstractCode.encoder", false]], "encoders_available() (sage.coding.abstract_code.abstractcode method)": [[1, "sage.coding.abstract_code.AbstractCode.encoders_available", false]], "encoding_table() (sage.coding.source_coding.huffman.huffman method)": [[40, "sage.coding.source_coding.huffman.Huffman.encoding_table", false]], "encodingerror": [[19, "sage.coding.encoder.EncodingError", false]], "entropy() (in module sage.coding.code_bounds)": [[9, "sage.coding.code_bounds.entropy", false]], "entropy_inverse() (in module sage.coding.code_bounds)": [[9, "sage.coding.code_bounds.entropy_inverse", false]], "error_probability() (sage.coding.channel.qarysymmetricchannel method)": [[7, "sage.coding.channel.QarySymmetricChannel.error_probability", false]], "errorerasurechannel (class in sage.coding.channel)": [[7, "sage.coding.channel.ErrorErasureChannel", false]], "evaluation_points() (sage.coding.gabidulin_code.gabidulincode method)": [[22, "sage.coding.gabidulin_code.GabidulinCode.evaluation_points", false]], "evaluation_points() (sage.coding.grs_code.generalizedreedsolomoncode method)": [[25, "sage.coding.grs_code.GeneralizedReedSolomonCode.evaluation_points", false]], "evaluationagcode (class in sage.coding.ag_code)": [[2, "sage.coding.ag_code.EvaluationAGCode", false]], "evaluationagcodedecoder_k (class in sage.coding.ag_code_decoders)": [[3, "sage.coding.ag_code_decoders.EvaluationAGCodeDecoder_K", false]], "evaluationagcodedecoder_k_extension (class in sage.coding.ag_code_decoders)": [[3, "sage.coding.ag_code_decoders.EvaluationAGCodeDecoder_K_extension", false]], "evaluationagcodeencoder (class in sage.coding.ag_code_decoders)": [[3, "sage.coding.ag_code_decoders.EvaluationAGCodeEncoder", false]], "evaluationagcodeuniquedecoder (class in sage.coding.ag_code_decoders)": [[3, "sage.coding.ag_code_decoders.EvaluationAGCodeUniqueDecoder", false]], "extended_code() (sage.coding.linear_code.abstractlinearcode method)": [[33, "sage.coding.linear_code.AbstractLinearCode.extended_code", false]], "extendedcode (class in sage.coding.extended_code)": [[21, "sage.coding.extended_code.ExtendedCode", false]], "extendedcodeextendedmatrixencoder (class in sage.coding.extended_code)": [[21, "sage.coding.extended_code.ExtendedCodeExtendedMatrixEncoder", false]], "extendedcodeoriginalcodedecoder (class in sage.coding.extended_code)": [[21, "sage.coding.extended_code.ExtendedCodeOriginalCodeDecoder", false]], "extendedquadraticresiduecode() (in module sage.coding.code_constructions)": [[10, "sage.coding.code_constructions.ExtendedQuadraticResidueCode", false]], "extension_degree() (sage.coding.linear_rank_metric.abstractlinearrankmetriccode method)": [[35, "sage.coding.linear_rank_metric.AbstractLinearRankMetricCode.extension_degree", false]], "field_embedding() (sage.coding.cyclic_code.cycliccode method)": [[14, "sage.coding.cyclic_code.CyclicCode.field_embedding", false]], "field_extension() (sage.coding.linear_rank_metric.abstractlinearrankmetriccode method)": [[35, "sage.coding.linear_rank_metric.AbstractLinearRankMetricCode.field_extension", false]], "find_generator_polynomial() (in module sage.coding.cyclic_code)": [[14, "sage.coding.cyclic_code.find_generator_polynomial", false]], "format_interval() (in module sage.coding.channel)": [[7, "sage.coding.channel.format_interval", false]], "frequency_table() (in module sage.coding.source_coding.huffman)": [[40, "sage.coding.source_coding.huffman.frequency_table", false]], "from_matrix_representation() (in module sage.coding.linear_rank_metric)": [[35, "sage.coding.linear_rank_metric.from_matrix_representation", false]], "from_parity_check_matrix() (in module sage.coding.code_constructions)": [[10, "sage.coding.code_constructions.from_parity_check_matrix", false]], "gabidulincode (class in sage.coding.gabidulin_code)": [[22, "sage.coding.gabidulin_code.GabidulinCode", false]], "gabidulingaodecoder (class in sage.coding.gabidulin_code)": [[22, "sage.coding.gabidulin_code.GabidulinGaoDecoder", false]], "gabidulinpolynomialevaluationencoder (class in sage.coding.gabidulin_code)": [[22, "sage.coding.gabidulin_code.GabidulinPolynomialEvaluationEncoder", false]], "gabidulinvectorevaluationencoder (class in sage.coding.gabidulin_code)": [[22, "sage.coding.gabidulin_code.GabidulinVectorEvaluationEncoder", false]], "galois_closure() (sage.coding.linear_code.abstractlinearcode method)": [[33, "sage.coding.linear_code.AbstractLinearCode.galois_closure", false]], "generalizedreedsolomoncode (class in sage.coding.grs_code)": [[25, "sage.coding.grs_code.GeneralizedReedSolomonCode", false]], "generate_children() (sage.coding.binary_code.binarycodeclassifier method)": [[5, "sage.coding.binary_code.BinaryCodeClassifier.generate_children", false]], "generator_matrix() (sage.coding.ag_code.cartiercode method)": [[2, "sage.coding.ag_code.CartierCode.generator_matrix", false]], "generator_matrix() (sage.coding.ag_code.differentialagcode method)": [[2, "sage.coding.ag_code.DifferentialAGCode.generator_matrix", false]], "generator_matrix() (sage.coding.ag_code.evaluationagcode method)": [[2, "sage.coding.ag_code.EvaluationAGCode.generator_matrix", false]], "generator_matrix() (sage.coding.cyclic_code.cycliccodevectorencoder method)": [[14, "sage.coding.cyclic_code.CyclicCodeVectorEncoder.generator_matrix", false]], "generator_matrix() (sage.coding.encoder.encoder method)": [[19, "sage.coding.encoder.Encoder.generator_matrix", false]], "generator_matrix() (sage.coding.extended_code.extendedcodeextendedmatrixencoder method)": [[21, "sage.coding.extended_code.ExtendedCodeExtendedMatrixEncoder.generator_matrix", false]], "generator_matrix() (sage.coding.gabidulin_code.gabidulinvectorevaluationencoder method)": [[22, "sage.coding.gabidulin_code.GabidulinVectorEvaluationEncoder.generator_matrix", false]], "generator_matrix() (sage.coding.golay_code.golaycode method)": [[23, "sage.coding.golay_code.GolayCode.generator_matrix", false]], "generator_matrix() (sage.coding.goppa_code.goppacodeencoder method)": [[24, "sage.coding.goppa_code.GoppaCodeEncoder.generator_matrix", false]], "generator_matrix() (sage.coding.grs_code.grsevaluationvectorencoder method)": [[25, "sage.coding.grs_code.GRSEvaluationVectorEncoder.generator_matrix", false]], "generator_matrix() (sage.coding.kasami_codes.kasamicode method)": [[32, "sage.coding.kasami_codes.KasamiCode.generator_matrix", false]], "generator_matrix() (sage.coding.linear_code.linearcode method)": [[33, "sage.coding.linear_code.LinearCode.generator_matrix", false]], "generator_matrix() (sage.coding.linear_code.linearcodegeneratormatrixencoder method)": [[33, "sage.coding.linear_code.LinearCodeGeneratorMatrixEncoder.generator_matrix", false]], "generator_matrix() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[34, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.generator_matrix", false]], "generator_matrix() (sage.coding.linear_code_no_metric.linearcodesystematicencoder method)": [[34, "sage.coding.linear_code_no_metric.LinearCodeSystematicEncoder.generator_matrix", false]], "generator_matrix() (sage.coding.linear_rank_metric.linearrankmetriccode method)": [[35, "sage.coding.linear_rank_metric.LinearRankMetricCode.generator_matrix", false]], "generator_matrix() (sage.coding.parity_check_code.paritycheckcodegeneratormatrixencoder method)": [[36, "sage.coding.parity_check_code.ParityCheckCodeGeneratorMatrixEncoder.generator_matrix", false]], "generator_matrix() (sage.coding.punctured_code.puncturedcodepuncturedmatrixencoder method)": [[37, "sage.coding.punctured_code.PuncturedCodePuncturedMatrixEncoder.generator_matrix", false]], "generator_matrix() (sage.coding.reed_muller_code.reedmullervectorencoder method)": [[38, "sage.coding.reed_muller_code.ReedMullerVectorEncoder.generator_matrix", false]], "generator_polynomial() (sage.coding.cyclic_code.cycliccode method)": [[14, "sage.coding.cyclic_code.CyclicCode.generator_polynomial", false]], "gens() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[34, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.gens", false]], "genus() (sage.coding.linear_code.abstractlinearcode method)": [[33, "sage.coding.linear_code.AbstractLinearCode.genus", false]], "get_autom_gens() (sage.coding.codecan.autgroup_can_label.linearcodeautgroupcanlabel method)": [[11, "sage.coding.codecan.autgroup_can_label.LinearCodeAutGroupCanLabel.get_autom_gens", false]], "get_autom_gens() (sage.coding.codecan.codecan.partitionrefinementlinearcode method)": [[12, "sage.coding.codecan.codecan.PartitionRefinementLinearCode.get_autom_gens", false]], "get_autom_order() (sage.coding.codecan.autgroup_can_label.linearcodeautgroupcanlabel method)": [[11, "sage.coding.codecan.autgroup_can_label.LinearCodeAutGroupCanLabel.get_autom_order", false]], "get_autom_order_inner_stabilizer() (sage.coding.codecan.codecan.partitionrefinementlinearcode method)": [[12, "sage.coding.codecan.codecan.PartitionRefinementLinearCode.get_autom_order_inner_stabilizer", false]], "get_canonical_form() (sage.coding.codecan.autgroup_can_label.linearcodeautgroupcanlabel method)": [[11, "sage.coding.codecan.autgroup_can_label.LinearCodeAutGroupCanLabel.get_canonical_form", false]], "get_canonical_form() (sage.coding.codecan.codecan.partitionrefinementlinearcode method)": [[12, "sage.coding.codecan.codecan.PartitionRefinementLinearCode.get_canonical_form", false]], "get_frob_pow() (sage.coding.codecan.codecan.innergroup method)": [[12, "sage.coding.codecan.codecan.InnerGroup.get_frob_pow", false]], "get_pgammal_gens() (sage.coding.codecan.autgroup_can_label.linearcodeautgroupcanlabel method)": [[11, "sage.coding.codecan.autgroup_can_label.LinearCodeAutGroupCanLabel.get_PGammaL_gens", false]], "get_pgammal_order() (sage.coding.codecan.autgroup_can_label.linearcodeautgroupcanlabel method)": [[11, "sage.coding.codecan.autgroup_can_label.LinearCodeAutGroupCanLabel.get_PGammaL_order", false]], "get_transporter() (sage.coding.codecan.autgroup_can_label.linearcodeautgroupcanlabel method)": [[11, "sage.coding.codecan.autgroup_can_label.LinearCodeAutGroupCanLabel.get_transporter", false]], "get_transporter() (sage.coding.codecan.codecan.partitionrefinementlinearcode method)": [[12, "sage.coding.codecan.codecan.PartitionRefinementLinearCode.get_transporter", false]], "gilbert_lower_bound() (in module sage.coding.code_bounds)": [[9, "sage.coding.code_bounds.gilbert_lower_bound", false]], "gilt() (in module sage.coding.guruswami_sudan.utils)": [[29, "sage.coding.guruswami_sudan.utils.gilt", false]], "golaycode (class in sage.coding.golay_code)": [[23, "sage.coding.golay_code.GolayCode", false]], "goppacode (class in sage.coding.goppa_code)": [[24, "sage.coding.goppa_code.GoppaCode", false]], "goppacodeencoder (class in sage.coding.goppa_code)": [[24, "sage.coding.goppa_code.GoppaCodeEncoder", false]], "griesmer_upper_bound() (in module sage.coding.code_bounds)": [[9, "sage.coding.code_bounds.griesmer_upper_bound", false]], "grs_code() (sage.coding.bch_code.bchunderlyinggrsdecoder method)": [[4, "sage.coding.bch_code.BCHUnderlyingGRSDecoder.grs_code", false]], "grs_decoder() (sage.coding.bch_code.bchunderlyinggrsdecoder method)": [[4, "sage.coding.bch_code.BCHUnderlyingGRSDecoder.grs_decoder", false]], "grs_word_to_bch() (sage.coding.bch_code.bchunderlyinggrsdecoder method)": [[4, "sage.coding.bch_code.BCHUnderlyingGRSDecoder.grs_word_to_bch", false]], "grsberlekampwelchdecoder (class in sage.coding.grs_code)": [[25, "sage.coding.grs_code.GRSBerlekampWelchDecoder", false]], "grserrorerasuredecoder (class in sage.coding.grs_code)": [[25, "sage.coding.grs_code.GRSErrorErasureDecoder", false]], "grsevaluationpolynomialencoder (class in sage.coding.grs_code)": [[25, "sage.coding.grs_code.GRSEvaluationPolynomialEncoder", false]], "grsevaluationvectorencoder (class in sage.coding.grs_code)": [[25, "sage.coding.grs_code.GRSEvaluationVectorEncoder", false]], "grsgaodecoder (class in sage.coding.grs_code)": [[25, "sage.coding.grs_code.GRSGaoDecoder", false]], "grsguruswamisudandecoder (class in sage.coding.guruswami_sudan.gs_decoder)": [[27, "sage.coding.guruswami_sudan.gs_decoder.GRSGuruswamiSudanDecoder", false]], "grskeyequationsyndromedecoder (class in sage.coding.grs_code)": [[25, "sage.coding.grs_code.GRSKeyEquationSyndromeDecoder", false]], "gs_interpolation_lee_osullivan() (in module sage.coding.guruswami_sudan.interpolation)": [[28, "sage.coding.guruswami_sudan.interpolation.gs_interpolation_lee_osullivan", false]], "gs_interpolation_linalg() (in module sage.coding.guruswami_sudan.interpolation)": [[28, "sage.coding.guruswami_sudan.interpolation.gs_interpolation_linalg", false]], "gs_satisfactory() (sage.coding.guruswami_sudan.gs_decoder.grsguruswamisudandecoder static method)": [[27, "sage.coding.guruswami_sudan.gs_decoder.GRSGuruswamiSudanDecoder.gs_satisfactory", false]], "guruswami_sudan_decoding_radius() (sage.coding.guruswami_sudan.gs_decoder.grsguruswamisudandecoder static method)": [[27, "sage.coding.guruswami_sudan.gs_decoder.GRSGuruswamiSudanDecoder.guruswami_sudan_decoding_radius", false]], "gv_bound_asymp() (in module sage.coding.code_bounds)": [[9, "sage.coding.code_bounds.gv_bound_asymp", false]], "gv_info_rate() (in module sage.coding.code_bounds)": [[9, "sage.coding.code_bounds.gv_info_rate", false]], "hamming_bound_asymp() (in module sage.coding.code_bounds)": [[9, "sage.coding.code_bounds.hamming_bound_asymp", false]], "hamming_upper_bound() (in module sage.coding.code_bounds)": [[9, "sage.coding.code_bounds.hamming_upper_bound", false]], "hammingcode (class in sage.coding.hamming_code)": [[30, "sage.coding.hamming_code.HammingCode", false]], "huffman (class in sage.coding.source_coding.huffman)": [[40, "sage.coding.source_coding.huffman.Huffman", false]], "info (sage.coding.ag_code_decoders.decoder_k attribute)": [[3, "sage.coding.ag_code_decoders.Decoder_K.info", false]], "info (sage.coding.ag_code_decoders.decoder_k_extension attribute)": [[3, "sage.coding.ag_code_decoders.Decoder_K_extension.info", false]], "information_set() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[34, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.information_set", false]], "informationsetalgorithm (class in sage.coding.information_set_decoder)": [[31, "sage.coding.information_set_decoder.InformationSetAlgorithm", false]], "innergroup (class in sage.coding.codecan.codecan)": [[12, "sage.coding.codecan.codecan.InnerGroup", false]], "input_space() (sage.coding.channel.channel method)": [[7, "sage.coding.channel.Channel.input_space", false]], "input_space() (sage.coding.decoder.decoder method)": [[16, "sage.coding.decoder.Decoder.input_space", false]], "interpolation_algorithm() (sage.coding.guruswami_sudan.gs_decoder.grsguruswamisudandecoder method)": [[27, "sage.coding.guruswami_sudan.gs_decoder.GRSGuruswamiSudanDecoder.interpolation_algorithm", false]], "is_galois_closed() (sage.coding.linear_code.abstractlinearcode method)": [[33, "sage.coding.linear_code.AbstractLinearCode.is_galois_closed", false]], "is_generalized() (sage.coding.grs_code.generalizedreedsolomoncode method)": [[25, "sage.coding.grs_code.GeneralizedReedSolomonCode.is_generalized", false]], "is_information_set() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[34, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.is_information_set", false]], "is_permutation_automorphism() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[34, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.is_permutation_automorphism", false]], "is_permutation_equivalent() (sage.coding.linear_code.abstractlinearcode method)": [[33, "sage.coding.linear_code.AbstractLinearCode.is_permutation_equivalent", false]], "is_projective() (sage.coding.linear_code.abstractlinearcode method)": [[33, "sage.coding.linear_code.AbstractLinearCode.is_projective", false]], "is_self_dual() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[34, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.is_self_dual", false]], "is_self_orthogonal() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[34, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.is_self_orthogonal", false]], "is_subcode() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[34, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.is_subcode", false]], "johnson_radius() (in module sage.coding.guruswami_sudan.utils)": [[29, "sage.coding.guruswami_sudan.utils.johnson_radius", false]], "jump_size() (sage.coding.bch_code.bchcode method)": [[4, "sage.coding.bch_code.BCHCode.jump_size", false]], "juxtapose() (sage.coding.linear_code.abstractlinearcode method)": [[33, "sage.coding.linear_code.AbstractLinearCode.juxtapose", false]], "kasamicode (class in sage.coding.kasami_codes)": [[32, "sage.coding.kasami_codes.KasamiCode", false]], "known_algorithms() (sage.coding.information_set_decoder.linearcodeinformationsetdecoder static method)": [[31, "sage.coding.information_set_decoder.LinearCodeInformationSetDecoder.known_algorithms", false]], "krawtchouk() (in module sage.coding.delsarte_bounds)": [[18, "sage.coding.delsarte_bounds.krawtchouk", false]], "lee_osullivan_module() (in module sage.coding.guruswami_sudan.interpolation)": [[28, "sage.coding.guruswami_sudan.interpolation.lee_osullivan_module", false]], "leebrickellisdalgorithm (class in sage.coding.information_set_decoder)": [[31, "sage.coding.information_set_decoder.LeeBrickellISDAlgorithm", false]], "length() (sage.coding.abstract_code.abstractcode method)": [[1, "sage.coding.abstract_code.AbstractCode.length", false]], "ligt() (in module sage.coding.guruswami_sudan.utils)": [[29, "sage.coding.guruswami_sudan.utils.ligt", false]], "linearcode (class in sage.coding.linear_code)": [[33, "sage.coding.linear_code.LinearCode", false]], "linearcodeautgroupcanlabel (class in sage.coding.codecan.autgroup_can_label)": [[11, "sage.coding.codecan.autgroup_can_label.LinearCodeAutGroupCanLabel", false]], "linearcodegeneratormatrixencoder (class in sage.coding.linear_code)": [[33, "sage.coding.linear_code.LinearCodeGeneratorMatrixEncoder", false]], "linearcodeinformationsetdecoder (class in sage.coding.information_set_decoder)": [[31, "sage.coding.information_set_decoder.LinearCodeInformationSetDecoder", false]], "linearcodenearestneighbordecoder (class in sage.coding.linear_code)": [[33, "sage.coding.linear_code.LinearCodeNearestNeighborDecoder", false]], "linearcodesyndromedecoder (class in sage.coding.linear_code)": [[33, "sage.coding.linear_code.LinearCodeSyndromeDecoder", false]], "linearcodesystematicencoder (class in sage.coding.linear_code_no_metric)": [[34, "sage.coding.linear_code_no_metric.LinearCodeSystematicEncoder", false]], "linearrankmetriccode (class in sage.coding.linear_rank_metric)": [[35, "sage.coding.linear_rank_metric.LinearRankMetricCode", false]], "linearrankmetriccodenearestneighbordecoder (class in sage.coding.linear_rank_metric)": [[35, "sage.coding.linear_rank_metric.LinearRankMetricCodeNearestNeighborDecoder", false]], "list() (sage.coding.abstract_code.abstractcode method)": [[1, "sage.coding.abstract_code.AbstractCode.list", false]], "list_size() (sage.coding.guruswami_sudan.gs_decoder.grsguruswamisudandecoder method)": [[27, "sage.coding.guruswami_sudan.gs_decoder.GRSGuruswamiSudanDecoder.list_size", false]], "matrix() (sage.coding.binary_code.binarycode method)": [[5, "sage.coding.binary_code.BinaryCode.matrix", false]], "matrix_form_of_vector() (sage.coding.linear_rank_metric.abstractlinearrankmetriccode method)": [[35, "sage.coding.linear_rank_metric.AbstractLinearRankMetricCode.matrix_form_of_vector", false]], "maximum_error_weight() (sage.coding.linear_code.linearcodesyndromedecoder method)": [[33, "sage.coding.linear_code.LinearCodeSyndromeDecoder.maximum_error_weight", false]], "message_space() (sage.coding.cyclic_code.cycliccodepolynomialencoder method)": [[14, "sage.coding.cyclic_code.CyclicCodePolynomialEncoder.message_space", false]], "message_space() (sage.coding.cyclic_code.cycliccodevectorencoder method)": [[14, "sage.coding.cyclic_code.CyclicCodeVectorEncoder.message_space", false]], "message_space() (sage.coding.decoder.decoder method)": [[16, "sage.coding.decoder.Decoder.message_space", false]], "message_space() (sage.coding.encoder.encoder method)": [[19, "sage.coding.encoder.Encoder.message_space", false]], "message_space() (sage.coding.gabidulin_code.gabidulinpolynomialevaluationencoder method)": [[22, "sage.coding.gabidulin_code.GabidulinPolynomialEvaluationEncoder.message_space", false]], "message_space() (sage.coding.grs_code.grsevaluationpolynomialencoder method)": [[25, "sage.coding.grs_code.GRSEvaluationPolynomialEncoder.message_space", false]], "message_space() (sage.coding.parity_check_code.paritycheckcodestraightforwardencoder method)": [[36, "sage.coding.parity_check_code.ParityCheckCodeStraightforwardEncoder.message_space", false]], "message_space() (sage.coding.reed_muller_code.reedmullerpolynomialencoder method)": [[38, "sage.coding.reed_muller_code.ReedMullerPolynomialEncoder.message_space", false]], "metric() (sage.coding.abstract_code.abstractcode method)": [[1, "sage.coding.abstract_code.AbstractCode.metric", false]], "minimum_distance() (sage.coding.gabidulin_code.gabidulincode method)": [[22, "sage.coding.gabidulin_code.GabidulinCode.minimum_distance", false]], "minimum_distance() (sage.coding.golay_code.golaycode method)": [[23, "sage.coding.golay_code.GolayCode.minimum_distance", false]], "minimum_distance() (sage.coding.grs_code.generalizedreedsolomoncode method)": [[25, "sage.coding.grs_code.GeneralizedReedSolomonCode.minimum_distance", false]], "minimum_distance() (sage.coding.hamming_code.hammingcode method)": [[30, "sage.coding.hamming_code.HammingCode.minimum_distance", false]], "minimum_distance() (sage.coding.linear_code.abstractlinearcode method)": [[33, "sage.coding.linear_code.AbstractLinearCode.minimum_distance", false]], "minimum_distance() (sage.coding.linear_rank_metric.abstractlinearrankmetriccode method)": [[35, "sage.coding.linear_rank_metric.AbstractLinearRankMetricCode.minimum_distance", false]], "minimum_distance() (sage.coding.parity_check_code.paritycheckcode method)": [[36, "sage.coding.parity_check_code.ParityCheckCode.minimum_distance", false]], "minimum_distance() (sage.coding.reed_muller_code.binaryreedmullercode method)": [[38, "sage.coding.reed_muller_code.BinaryReedMullerCode.minimum_distance", false]], "minimum_distance() (sage.coding.reed_muller_code.qaryreedmullercode method)": [[38, "sage.coding.reed_muller_code.QAryReedMullerCode.minimum_distance", false]], "module": [[1, "module-sage.coding.abstract_code", false], [2, "module-sage.coding.ag_code", false], [3, "module-sage.coding.ag_code_decoders", false], [4, "module-sage.coding.bch_code", false], [5, "module-sage.coding.binary_code", false], [6, "module-sage.coding.bounds_catalog", false], [7, "module-sage.coding.channel", false], [8, "module-sage.coding.channels_catalog", false], [9, "module-sage.coding.code_bounds", false], [10, "module-sage.coding.code_constructions", false], [11, "module-sage.coding.codecan.autgroup_can_label", false], [12, "module-sage.coding.codecan.codecan", false], [13, "module-sage.coding.codes_catalog", false], [14, "module-sage.coding.cyclic_code", false], [15, "module-sage.coding.databases", false], [16, "module-sage.coding.decoder", false], [17, "module-sage.coding.decoders_catalog", false], [18, "module-sage.coding.delsarte_bounds", false], [19, "module-sage.coding.encoder", false], [20, "module-sage.coding.encoders_catalog", false], [21, "module-sage.coding.extended_code", false], [22, "module-sage.coding.gabidulin_code", false], [23, "module-sage.coding.golay_code", false], [24, "module-sage.coding.goppa_code", false], [25, "module-sage.coding.grs_code", false], [26, "module-sage.coding.guava", false], [27, "module-sage.coding.guruswami_sudan.gs_decoder", false], [28, "module-sage.coding.guruswami_sudan.interpolation", false], [29, "module-sage.coding.guruswami_sudan.utils", false], [30, "module-sage.coding.hamming_code", false], [31, "module-sage.coding.information_set_decoder", false], [32, "module-sage.coding.kasami_codes", false], [33, "module-sage.coding.linear_code", false], [34, "module-sage.coding.linear_code_no_metric", false], [35, "module-sage.coding.linear_rank_metric", false], [36, "module-sage.coding.parity_check_code", false], [37, "module-sage.coding.punctured_code", false], [38, "module-sage.coding.reed_muller_code", false], [39, "module-sage.coding.self_dual_codes", false], [40, "module-sage.coding.source_coding.huffman", false], [41, "module-sage.coding.subfield_subcode", false], [42, "module-sage.coding.two_weight_db", false]], "module_composition_factors() (sage.coding.linear_code.abstractlinearcode method)": [[33, "sage.coding.linear_code.AbstractLinearCode.module_composition_factors", false]], "mrrw1_bound_asymp() (in module sage.coding.code_bounds)": [[9, "sage.coding.code_bounds.mrrw1_bound_asymp", false]], "multiplicity() (sage.coding.guruswami_sudan.gs_decoder.grsguruswamisudandecoder method)": [[27, "sage.coding.guruswami_sudan.gs_decoder.GRSGuruswamiSudanDecoder.multiplicity", false]], "multipliers_product() (sage.coding.grs_code.generalizedreedsolomoncode method)": [[25, "sage.coding.grs_code.GeneralizedReedSolomonCode.multipliers_product", false]], "n_k_params() (in module sage.coding.guruswami_sudan.gs_decoder)": [[27, "sage.coding.guruswami_sudan.gs_decoder.n_k_params", false]], "name() (sage.coding.information_set_decoder.informationsetalgorithm method)": [[31, "sage.coding.information_set_decoder.InformationSetAlgorithm.name", false]], "number_erasures() (sage.coding.channel.errorerasurechannel method)": [[7, "sage.coding.channel.ErrorErasureChannel.number_erasures", false]], "number_errors() (sage.coding.channel.errorerasurechannel method)": [[7, "sage.coding.channel.ErrorErasureChannel.number_errors", false]], "number_errors() (sage.coding.channel.staticerrorratechannel method)": [[7, "sage.coding.channel.StaticErrorRateChannel.number_errors", false]], "number_of_variables() (sage.coding.reed_muller_code.binaryreedmullercode method)": [[38, "sage.coding.reed_muller_code.BinaryReedMullerCode.number_of_variables", false]], "number_of_variables() (sage.coding.reed_muller_code.qaryreedmullercode method)": [[38, "sage.coding.reed_muller_code.QAryReedMullerCode.number_of_variables", false]], "offset() (sage.coding.bch_code.bchcode method)": [[4, "sage.coding.bch_code.BCHCode.offset", false]], "orbitpartition (class in sage.coding.binary_code)": [[5, "sage.coding.binary_code.OrbitPartition", false]], "order() (sage.coding.reed_muller_code.binaryreedmullercode method)": [[38, "sage.coding.reed_muller_code.BinaryReedMullerCode.order", false]], "order() (sage.coding.reed_muller_code.qaryreedmullercode method)": [[38, "sage.coding.reed_muller_code.QAryReedMullerCode.order", false]], "original_code() (sage.coding.extended_code.extendedcode method)": [[21, "sage.coding.extended_code.ExtendedCode.original_code", false]], "original_code() (sage.coding.punctured_code.puncturedcode method)": [[37, "sage.coding.punctured_code.PuncturedCode.original_code", false]], "original_code() (sage.coding.subfield_subcode.subfieldsubcode method)": [[41, "sage.coding.subfield_subcode.SubfieldSubcode.original_code", false]], "original_decoder() (sage.coding.extended_code.extendedcodeoriginalcodedecoder method)": [[21, "sage.coding.extended_code.ExtendedCodeOriginalCodeDecoder.original_decoder", false]], "original_decoder() (sage.coding.punctured_code.puncturedcodeoriginalcodedecoder method)": [[37, "sage.coding.punctured_code.PuncturedCodeOriginalCodeDecoder.original_decoder", false]], "original_decoder() (sage.coding.subfield_subcode.subfieldsubcodeoriginalcodedecoder method)": [[41, "sage.coding.subfield_subcode.SubfieldSubcodeOriginalCodeDecoder.original_decoder", false]], "output_space() (sage.coding.channel.channel method)": [[7, "sage.coding.channel.Channel.output_space", false]], "parameters() (sage.coding.guruswami_sudan.gs_decoder.grsguruswamisudandecoder method)": [[27, "sage.coding.guruswami_sudan.gs_decoder.GRSGuruswamiSudanDecoder.parameters", false]], "parameters() (sage.coding.information_set_decoder.informationsetalgorithm method)": [[31, "sage.coding.information_set_decoder.InformationSetAlgorithm.parameters", false]], "parameters() (sage.coding.kasami_codes.kasamicode method)": [[32, "sage.coding.kasami_codes.KasamiCode.parameters", false]], "parameters_given_tau() (sage.coding.guruswami_sudan.gs_decoder.grsguruswamisudandecoder static method)": [[27, "sage.coding.guruswami_sudan.gs_decoder.GRSGuruswamiSudanDecoder.parameters_given_tau", false]], "parity_check_matrix() (sage.coding.cyclic_code.cycliccode method)": [[14, "sage.coding.cyclic_code.CyclicCode.parity_check_matrix", false]], "parity_check_matrix() (sage.coding.extended_code.extendedcode method)": [[21, "sage.coding.extended_code.ExtendedCode.parity_check_matrix", false]], "parity_check_matrix() (sage.coding.gabidulin_code.gabidulincode method)": [[22, "sage.coding.gabidulin_code.GabidulinCode.parity_check_matrix", false]], "parity_check_matrix() (sage.coding.golay_code.golaycode method)": [[23, "sage.coding.golay_code.GolayCode.parity_check_matrix", false]], "parity_check_matrix() (sage.coding.goppa_code.goppacode method)": [[24, "sage.coding.goppa_code.GoppaCode.parity_check_matrix", false]], "parity_check_matrix() (sage.coding.grs_code.generalizedreedsolomoncode method)": [[25, "sage.coding.grs_code.GeneralizedReedSolomonCode.parity_check_matrix", false]], "parity_check_matrix() (sage.coding.hamming_code.hammingcode method)": [[30, "sage.coding.hamming_code.HammingCode.parity_check_matrix", false]], "parity_check_matrix() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[34, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.parity_check_matrix", false]], "parity_check_matrix() (sage.coding.subfield_subcode.subfieldsubcode method)": [[41, "sage.coding.subfield_subcode.SubfieldSubcode.parity_check_matrix", false]], "parity_column_multipliers() (sage.coding.grs_code.generalizedreedsolomoncode method)": [[25, "sage.coding.grs_code.GeneralizedReedSolomonCode.parity_column_multipliers", false]], "parity_evaluation_points() (sage.coding.gabidulin_code.gabidulincode method)": [[22, "sage.coding.gabidulin_code.GabidulinCode.parity_evaluation_points", false]], "paritycheckcode (class in sage.coding.parity_check_code)": [[36, "sage.coding.parity_check_code.ParityCheckCode", false]], "paritycheckcodegeneratormatrixencoder (class in sage.coding.parity_check_code)": [[36, "sage.coding.parity_check_code.ParityCheckCodeGeneratorMatrixEncoder", false]], "paritycheckcodestraightforwardencoder (class in sage.coding.parity_check_code)": [[36, "sage.coding.parity_check_code.ParityCheckCodeStraightforwardEncoder", false]], "partitionrefinementlinearcode (class in sage.coding.codecan.codecan)": [[12, "sage.coding.codecan.codecan.PartitionRefinementLinearCode", false]], "partitionstack (class in sage.coding.binary_code)": [[5, "sage.coding.binary_code.PartitionStack", false]], "permutation_action() (in module sage.coding.code_constructions)": [[10, "sage.coding.code_constructions.permutation_action", false]], "permutation_automorphism_group() (sage.coding.linear_code.abstractlinearcode method)": [[33, "sage.coding.linear_code.AbstractLinearCode.permutation_automorphism_group", false]], "permuted_code() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[34, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.permuted_code", false]], "plotkin_bound_asymp() (in module sage.coding.code_bounds)": [[9, "sage.coding.code_bounds.plotkin_bound_asymp", false]], "plotkin_upper_bound() (in module sage.coding.code_bounds)": [[9, "sage.coding.code_bounds.plotkin_upper_bound", false]], "points() (sage.coding.reed_muller_code.reedmullerpolynomialencoder method)": [[38, "sage.coding.reed_muller_code.ReedMullerPolynomialEncoder.points", false]], "points() (sage.coding.reed_muller_code.reedmullervectorencoder method)": [[38, "sage.coding.reed_muller_code.ReedMullerVectorEncoder.points", false]], "polynomial_ring() (sage.coding.grs_code.grsevaluationpolynomialencoder method)": [[25, "sage.coding.grs_code.GRSEvaluationPolynomialEncoder.polynomial_ring", false]], "polynomial_ring() (sage.coding.reed_muller_code.reedmullerpolynomialencoder method)": [[38, "sage.coding.reed_muller_code.ReedMullerPolynomialEncoder.polynomial_ring", false]], "polynomial_to_list() (in module sage.coding.guruswami_sudan.utils)": [[29, "sage.coding.guruswami_sudan.utils.polynomial_to_list", false]], "primitive_root() (sage.coding.cyclic_code.cycliccode method)": [[14, "sage.coding.cyclic_code.CyclicCode.primitive_root", false]], "print_basis() (sage.coding.binary_code.partitionstack method)": [[5, "sage.coding.binary_code.PartitionStack.print_basis", false]], "print_data() (sage.coding.binary_code.binarycode method)": [[5, "sage.coding.binary_code.BinaryCode.print_data", false]], "print_data() (sage.coding.binary_code.partitionstack method)": [[5, "sage.coding.binary_code.PartitionStack.print_data", false]], "probability_of_at_most_t_errors() (sage.coding.channel.qarysymmetricchannel method)": [[7, "sage.coding.channel.QarySymmetricChannel.probability_of_at_most_t_errors", false]], "probability_of_exactly_t_errors() (sage.coding.channel.qarysymmetricchannel method)": [[7, "sage.coding.channel.QarySymmetricChannel.probability_of_exactly_t_errors", false]], "product_code() (sage.coding.linear_code.abstractlinearcode method)": [[33, "sage.coding.linear_code.AbstractLinearCode.product_code", false]], "punctured() (sage.coding.linear_code.abstractlinearcode method)": [[33, "sage.coding.linear_code.AbstractLinearCode.punctured", false]], "punctured_positions() (sage.coding.punctured_code.puncturedcode method)": [[37, "sage.coding.punctured_code.PuncturedCode.punctured_positions", false]], "puncturedcode (class in sage.coding.punctured_code)": [[37, "sage.coding.punctured_code.PuncturedCode", false]], "puncturedcodeoriginalcodedecoder (class in sage.coding.punctured_code)": [[37, "sage.coding.punctured_code.PuncturedCodeOriginalCodeDecoder", false]], "puncturedcodepuncturedmatrixencoder (class in sage.coding.punctured_code)": [[37, "sage.coding.punctured_code.PuncturedCodePuncturedMatrixEncoder", false]], "put_in_canonical_form() (sage.coding.binary_code.binarycodeclassifier method)": [[5, "sage.coding.binary_code.BinaryCodeClassifier.put_in_canonical_form", false]], "put_in_std_form() (sage.coding.binary_code.binarycode method)": [[5, "sage.coding.binary_code.BinaryCode.put_in_std_form", false]], "qaryreedmullercode (class in sage.coding.reed_muller_code)": [[38, "sage.coding.reed_muller_code.QAryReedMullerCode", false]], "qarysymmetricchannel (class in sage.coding.channel)": [[7, "sage.coding.channel.QarySymmetricChannel", false]], "quadraticresiduecode() (in module sage.coding.code_constructions)": [[10, "sage.coding.code_constructions.QuadraticResidueCode", false]], "quadraticresiduecodeevenpair() (in module sage.coding.code_constructions)": [[10, "sage.coding.code_constructions.QuadraticResidueCodeEvenPair", false]], "quadraticresiduecodeoddpair() (in module sage.coding.code_constructions)": [[10, "sage.coding.code_constructions.QuadraticResidueCodeOddPair", false]], "quasiquadraticresiduecode() (in module sage.coding.guava)": [[26, "sage.coding.guava.QuasiQuadraticResidueCode", false]], "random_element() (sage.coding.abstract_code.abstractcode method)": [[1, "sage.coding.abstract_code.AbstractCode.random_element", false]], "random_element() (sage.coding.extended_code.extendedcode method)": [[21, "sage.coding.extended_code.ExtendedCode.random_element", false]], "random_element() (sage.coding.punctured_code.puncturedcode method)": [[37, "sage.coding.punctured_code.PuncturedCode.random_element", false]], "random_error_vector() (in module sage.coding.channel)": [[7, "sage.coding.channel.random_error_vector", false]], "random_linear_code() (in module sage.coding.code_constructions)": [[10, "sage.coding.code_constructions.random_linear_code", false]], "randomlinearcodeguava() (in module sage.coding.guava)": [[26, "sage.coding.guava.RandomLinearCodeGuava", false]], "rank_distance() (in module sage.coding.linear_rank_metric)": [[35, "sage.coding.linear_rank_metric.rank_distance", false]], "rank_distance_between_vectors() (sage.coding.linear_rank_metric.abstractlinearrankmetriccode method)": [[35, "sage.coding.linear_rank_metric.AbstractLinearRankMetricCode.rank_distance_between_vectors", false]], "rank_support_of_vector() (sage.coding.linear_rank_metric.abstractlinearrankmetriccode method)": [[35, "sage.coding.linear_rank_metric.AbstractLinearRankMetricCode.rank_support_of_vector", false]], "rank_weight() (in module sage.coding.linear_rank_metric)": [[35, "sage.coding.linear_rank_metric.rank_weight", false]], "rank_weight_of_vector() (sage.coding.linear_rank_metric.abstractlinearrankmetriccode method)": [[35, "sage.coding.linear_rank_metric.AbstractLinearRankMetricCode.rank_weight_of_vector", false]], "rate() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[34, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.rate", false]], "redundancy_matrix() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[34, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.redundancy_matrix", false]], "reedmullercode() (in module sage.coding.reed_muller_code)": [[38, "sage.coding.reed_muller_code.ReedMullerCode", false]], "reedmullerpolynomialencoder (class in sage.coding.reed_muller_code)": [[38, "sage.coding.reed_muller_code.ReedMullerPolynomialEncoder", false]], "reedmullervectorencoder (class in sage.coding.reed_muller_code)": [[38, "sage.coding.reed_muller_code.ReedMullerVectorEncoder", false]], "reedsolomoncode() (in module sage.coding.grs_code)": [[25, "sage.coding.grs_code.ReedSolomonCode", false]], "relative_distance() (sage.coding.linear_code.abstractlinearcode method)": [[33, "sage.coding.linear_code.AbstractLinearCode.relative_distance", false]], "rootfinding_algorithm() (sage.coding.guruswami_sudan.gs_decoder.grsguruswamisudandecoder method)": [[27, "sage.coding.guruswami_sudan.gs_decoder.GRSGuruswamiSudanDecoder.rootfinding_algorithm", false]], "roth_ruckenstein_root_finder() (in module sage.coding.guruswami_sudan.gs_decoder)": [[27, "sage.coding.guruswami_sudan.gs_decoder.roth_ruckenstein_root_finder", false]], "sage.coding.abstract_code": [[1, "module-sage.coding.abstract_code", false]], "sage.coding.ag_code": [[2, "module-sage.coding.ag_code", false]], "sage.coding.ag_code_decoders": [[3, "module-sage.coding.ag_code_decoders", false]], "sage.coding.bch_code": [[4, "module-sage.coding.bch_code", false]], "sage.coding.binary_code": [[5, "module-sage.coding.binary_code", false]], "sage.coding.bounds_catalog": [[6, "module-sage.coding.bounds_catalog", false]], "sage.coding.channel": [[7, "module-sage.coding.channel", false]], "sage.coding.channels_catalog": [[8, "module-sage.coding.channels_catalog", false]], "sage.coding.code_bounds": [[9, "module-sage.coding.code_bounds", false]], "sage.coding.code_constructions": [[10, "module-sage.coding.code_constructions", false]], "sage.coding.codecan.autgroup_can_label": [[11, "module-sage.coding.codecan.autgroup_can_label", false]], "sage.coding.codecan.codecan": [[12, "module-sage.coding.codecan.codecan", false]], "sage.coding.codes_catalog": [[13, "module-sage.coding.codes_catalog", false]], "sage.coding.cyclic_code": [[14, "module-sage.coding.cyclic_code", false]], "sage.coding.databases": [[15, "module-sage.coding.databases", false]], "sage.coding.decoder": [[16, "module-sage.coding.decoder", false]], "sage.coding.decoders_catalog": [[17, "module-sage.coding.decoders_catalog", false]], "sage.coding.delsarte_bounds": [[18, "module-sage.coding.delsarte_bounds", false]], "sage.coding.encoder": [[19, "module-sage.coding.encoder", false]], "sage.coding.encoders_catalog": [[20, "module-sage.coding.encoders_catalog", false]], "sage.coding.extended_code": [[21, "module-sage.coding.extended_code", false]], "sage.coding.gabidulin_code": [[22, "module-sage.coding.gabidulin_code", false]], "sage.coding.golay_code": [[23, "module-sage.coding.golay_code", false]], "sage.coding.goppa_code": [[24, "module-sage.coding.goppa_code", false]], "sage.coding.grs_code": [[25, "module-sage.coding.grs_code", false]], "sage.coding.guava": [[26, "module-sage.coding.guava", false]], "sage.coding.guruswami_sudan.gs_decoder": [[27, "module-sage.coding.guruswami_sudan.gs_decoder", false]], "sage.coding.guruswami_sudan.interpolation": [[28, "module-sage.coding.guruswami_sudan.interpolation", false]], "sage.coding.guruswami_sudan.utils": [[29, "module-sage.coding.guruswami_sudan.utils", false]], "sage.coding.hamming_code": [[30, "module-sage.coding.hamming_code", false]], "sage.coding.information_set_decoder": [[31, "module-sage.coding.information_set_decoder", false]], "sage.coding.kasami_codes": [[32, "module-sage.coding.kasami_codes", false]], "sage.coding.linear_code": [[33, "module-sage.coding.linear_code", false]], "sage.coding.linear_code_no_metric": [[34, "module-sage.coding.linear_code_no_metric", false]], "sage.coding.linear_rank_metric": [[35, "module-sage.coding.linear_rank_metric", false]], "sage.coding.parity_check_code": [[36, "module-sage.coding.parity_check_code", false]], "sage.coding.punctured_code": [[37, "module-sage.coding.punctured_code", false]], "sage.coding.reed_muller_code": [[38, "module-sage.coding.reed_muller_code", false]], "sage.coding.self_dual_codes": [[39, "module-sage.coding.self_dual_codes", false]], "sage.coding.source_coding.huffman": [[40, "module-sage.coding.source_coding.huffman", false]], "sage.coding.subfield_subcode": [[41, "module-sage.coding.subfield_subcode", false]], "sage.coding.two_weight_db": [[42, "module-sage.coding.two_weight_db", false]], "self_dual_binary_codes() (in module sage.coding.self_dual_codes)": [[39, "sage.coding.self_dual_codes.self_dual_binary_codes", false]], "self_orthogonal_binary_codes() (in module sage.coding.databases)": [[15, "sage.coding.databases.self_orthogonal_binary_codes", false]], "shortened() (sage.coding.linear_code.abstractlinearcode method)": [[33, "sage.coding.linear_code.AbstractLinearCode.shortened", false]], "singleton_bound_asymp() (in module sage.coding.code_bounds)": [[9, "sage.coding.code_bounds.singleton_bound_asymp", false]], "singleton_upper_bound() (in module sage.coding.code_bounds)": [[9, "sage.coding.code_bounds.singleton_upper_bound", false]], "solve_degree2_to_integer_range() (in module sage.coding.guruswami_sudan.utils)": [[29, "sage.coding.guruswami_sudan.utils.solve_degree2_to_integer_range", false]], "spectrum() (sage.coding.linear_code.abstractlinearcode method)": [[33, "sage.coding.linear_code.AbstractLinearCode.spectrum", false]], "standard_form() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[34, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.standard_form", false]], "staticerrorratechannel (class in sage.coding.channel)": [[7, "sage.coding.channel.StaticErrorRateChannel", false]], "structured_representation() (sage.coding.punctured_code.puncturedcode method)": [[37, "sage.coding.punctured_code.PuncturedCode.structured_representation", false]], "sub_field() (sage.coding.linear_rank_metric.abstractlinearrankmetriccode method)": [[35, "sage.coding.linear_rank_metric.AbstractLinearRankMetricCode.sub_field", false]], "subfieldsubcode (class in sage.coding.subfield_subcode)": [[41, "sage.coding.subfield_subcode.SubfieldSubcode", false]], "subfieldsubcodeoriginalcodedecoder (class in sage.coding.subfield_subcode)": [[41, "sage.coding.subfield_subcode.SubfieldSubcodeOriginalCodeDecoder", false]], "support() (sage.coding.linear_code.abstractlinearcode method)": [[33, "sage.coding.linear_code.AbstractLinearCode.support", false]], "surrounding_bch_code() (sage.coding.cyclic_code.cycliccode method)": [[14, "sage.coding.cyclic_code.CyclicCode.surrounding_bch_code", false]], "syndrome() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[34, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.syndrome", false]], "syndrome_table() (sage.coding.linear_code.linearcodesyndromedecoder method)": [[33, "sage.coding.linear_code.LinearCodeSyndromeDecoder.syndrome_table", false]], "systematic_generator_matrix() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[34, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.systematic_generator_matrix", false]], "systematic_permutation() (sage.coding.linear_code_no_metric.linearcodesystematicencoder method)": [[34, "sage.coding.linear_code_no_metric.LinearCodeSystematicEncoder.systematic_permutation", false]], "systematic_positions() (sage.coding.linear_code_no_metric.linearcodesystematicencoder method)": [[34, "sage.coding.linear_code_no_metric.LinearCodeSystematicEncoder.systematic_positions", false]], "test_expand_to_ortho_basis() (in module sage.coding.binary_code)": [[5, "sage.coding.binary_code.test_expand_to_ortho_basis", false]], "test_word_perms() (in module sage.coding.binary_code)": [[5, "sage.coding.binary_code.test_word_perms", false]], "time_estimate() (sage.coding.information_set_decoder.informationsetalgorithm method)": [[31, "sage.coding.information_set_decoder.InformationSetAlgorithm.time_estimate", false]], "to_matrix_representation() (in module sage.coding.linear_rank_metric)": [[35, "sage.coding.linear_rank_metric.to_matrix_representation", false]], "toriccode() (in module sage.coding.code_constructions)": [[10, "sage.coding.code_constructions.ToricCode", false]], "transmit() (sage.coding.channel.channel method)": [[7, "sage.coding.channel.Channel.transmit", false]], "transmit_unsafe() (sage.coding.channel.channel method)": [[7, "sage.coding.channel.Channel.transmit_unsafe", false]], "transmit_unsafe() (sage.coding.channel.errorerasurechannel method)": [[7, "sage.coding.channel.ErrorErasureChannel.transmit_unsafe", false]], "transmit_unsafe() (sage.coding.channel.qarysymmetricchannel method)": [[7, "sage.coding.channel.QarySymmetricChannel.transmit_unsafe", false]], "transmit_unsafe() (sage.coding.channel.staticerrorratechannel method)": [[7, "sage.coding.channel.StaticErrorRateChannel.transmit_unsafe", false]], "tree() (sage.coding.source_coding.huffman.huffman method)": [[40, "sage.coding.source_coding.huffman.Huffman.tree", false]], "twisting_homomorphism() (sage.coding.gabidulin_code.gabidulincode method)": [[22, "sage.coding.gabidulin_code.GabidulinCode.twisting_homomorphism", false]], "u_u_plus_v_code() (sage.coding.linear_code.abstractlinearcode method)": [[33, "sage.coding.linear_code.AbstractLinearCode.u_u_plus_v_code", false]], "unencode() (sage.coding.abstract_code.abstractcode method)": [[1, "sage.coding.abstract_code.AbstractCode.unencode", false]], "unencode() (sage.coding.encoder.encoder method)": [[19, "sage.coding.encoder.Encoder.unencode", false]], "unencode_nocheck() (sage.coding.ag_code_decoders.differentialagcodeencoder method)": [[3, "sage.coding.ag_code_decoders.DifferentialAGCodeEncoder.unencode_nocheck", false]], "unencode_nocheck() (sage.coding.ag_code_decoders.evaluationagcodeencoder method)": [[3, "sage.coding.ag_code_decoders.EvaluationAGCodeEncoder.unencode_nocheck", false]], "unencode_nocheck() (sage.coding.cyclic_code.cycliccodepolynomialencoder method)": [[14, "sage.coding.cyclic_code.CyclicCodePolynomialEncoder.unencode_nocheck", false]], "unencode_nocheck() (sage.coding.cyclic_code.cycliccodevectorencoder method)": [[14, "sage.coding.cyclic_code.CyclicCodeVectorEncoder.unencode_nocheck", false]], "unencode_nocheck() (sage.coding.encoder.encoder method)": [[19, "sage.coding.encoder.Encoder.unencode_nocheck", false]], "unencode_nocheck() (sage.coding.gabidulin_code.gabidulinpolynomialevaluationencoder method)": [[22, "sage.coding.gabidulin_code.GabidulinPolynomialEvaluationEncoder.unencode_nocheck", false]], "unencode_nocheck() (sage.coding.grs_code.grsevaluationpolynomialencoder method)": [[25, "sage.coding.grs_code.GRSEvaluationPolynomialEncoder.unencode_nocheck", false]], "unencode_nocheck() (sage.coding.parity_check_code.paritycheckcodestraightforwardencoder method)": [[36, "sage.coding.parity_check_code.ParityCheckCodeStraightforwardEncoder.unencode_nocheck", false]], "unencode_nocheck() (sage.coding.reed_muller_code.reedmullerpolynomialencoder method)": [[38, "sage.coding.reed_muller_code.ReedMullerPolynomialEncoder.unencode_nocheck", false]], "vector_form_of_matrix() (sage.coding.linear_rank_metric.abstractlinearrankmetriccode method)": [[35, "sage.coding.linear_rank_metric.AbstractLinearRankMetricCode.vector_form_of_matrix", false]], "volume_hamming() (in module sage.coding.code_bounds)": [[9, "sage.coding.code_bounds.volume_hamming", false]], "walsh_matrix() (in module sage.coding.code_constructions)": [[10, "sage.coding.code_constructions.walsh_matrix", false]], "walshcode() (in module sage.coding.code_constructions)": [[10, "sage.coding.code_constructions.WalshCode", false]], "weight_dist() (in module sage.coding.binary_code)": [[5, "sage.coding.binary_code.weight_dist", false]], "weight_distribution() (sage.coding.golay_code.golaycode method)": [[23, "sage.coding.golay_code.GolayCode.weight_distribution", false]], "weight_distribution() (sage.coding.grs_code.generalizedreedsolomoncode method)": [[25, "sage.coding.grs_code.GeneralizedReedSolomonCode.weight_distribution", false]], "weight_distribution() (sage.coding.linear_code.abstractlinearcode method)": [[33, "sage.coding.linear_code.AbstractLinearCode.weight_distribution", false]], "weight_enumerator() (sage.coding.linear_code.abstractlinearcode method)": [[33, "sage.coding.linear_code.AbstractLinearCode.weight_enumerator", false]], "zero() (sage.coding.linear_code_no_metric.abstractlinearcodenometric method)": [[34, "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric.zero", false]], "zeta_function() (sage.coding.linear_code.abstractlinearcode method)": [[33, "sage.coding.linear_code.AbstractLinearCode.zeta_function", false]], "zeta_polynomial() (sage.coding.linear_code.abstractlinearcode method)": [[33, "sage.coding.linear_code.AbstractLinearCode.zeta_polynomial", false]]}, "objects": {"sage.coding": [[1, 0, 0, "-", "abstract_code"], [2, 0, 0, "-", "ag_code"], [3, 0, 0, "-", "ag_code_decoders"], [4, 0, 0, "-", "bch_code"], [5, 0, 0, "-", "binary_code"], [6, 0, 0, "-", "bounds_catalog"], [7, 0, 0, "-", "channel"], [8, 0, 0, "-", "channels_catalog"], [9, 0, 0, "-", "code_bounds"], [10, 0, 0, "-", "code_constructions"], [13, 0, 0, "-", "codes_catalog"], [14, 0, 0, "-", "cyclic_code"], [15, 0, 0, "-", "databases"], [16, 0, 0, "-", "decoder"], [17, 0, 0, "-", "decoders_catalog"], [18, 0, 0, "-", "delsarte_bounds"], [19, 0, 0, "-", "encoder"], [20, 0, 0, "-", "encoders_catalog"], [21, 0, 0, "-", "extended_code"], [22, 0, 0, "-", "gabidulin_code"], [23, 0, 0, "-", "golay_code"], [24, 0, 0, "-", "goppa_code"], [25, 0, 0, "-", "grs_code"], [26, 0, 0, "-", "guava"], [30, 0, 0, "-", "hamming_code"], [31, 0, 0, "-", "information_set_decoder"], [32, 0, 0, "-", "kasami_codes"], [33, 0, 0, "-", "linear_code"], [34, 0, 0, "-", "linear_code_no_metric"], [35, 0, 0, "-", "linear_rank_metric"], [36, 0, 0, "-", "parity_check_code"], [37, 0, 0, "-", "punctured_code"], [38, 0, 0, "-", "reed_muller_code"], [39, 0, 0, "-", "self_dual_codes"], [41, 0, 0, "-", "subfield_subcode"], [42, 0, 0, "-", "two_weight_db"]], "sage.coding.abstract_code": [[1, 1, 1, "", "AbstractCode"]], "sage.coding.abstract_code.AbstractCode": [[1, 2, 1, "", "add_decoder"], [1, 2, 1, "", "add_encoder"], [1, 2, 1, "", "ambient_space"], [1, 2, 1, "", "decode_to_code"], [1, 2, 1, "", "decode_to_message"], [1, 2, 1, "", "decoder"], [1, 2, 1, "", "decoders_available"], [1, 2, 1, "", "encode"], [1, 2, 1, "", "encoder"], [1, 2, 1, "", "encoders_available"], [1, 2, 1, "", "length"], [1, 2, 1, "", "list"], [1, 2, 1, "", "metric"], [1, 2, 1, "", "random_element"], [1, 2, 1, "", "unencode"]], "sage.coding.ag_code": [[2, 1, 1, "", "AGCode"], [2, 1, 1, "", "CartierCode"], [2, 1, 1, "", "DifferentialAGCode"], [2, 1, 1, "", "EvaluationAGCode"]], "sage.coding.ag_code.AGCode": [[2, 2, 1, "", "base_function_field"]], "sage.coding.ag_code.CartierCode": [[2, 2, 1, "", "designed_distance"], [2, 2, 1, "", "generator_matrix"]], "sage.coding.ag_code.DifferentialAGCode": [[2, 2, 1, "", "basis_differentials"], [2, 2, 1, "", "designed_distance"], [2, 2, 1, "", "generator_matrix"]], "sage.coding.ag_code.EvaluationAGCode": [[2, 2, 1, "", "basis_functions"], [2, 2, 1, "", "designed_distance"], [2, 2, 1, "", "generator_matrix"]], "sage.coding.ag_code_decoders": [[3, 1, 1, "", "Decoder_K"], [3, 1, 1, "", "Decoder_K_extension"], [3, 1, 1, "", "DifferentialAGCodeDecoder_K"], [3, 1, 1, "", "DifferentialAGCodeDecoder_K_extension"], [3, 1, 1, "", "DifferentialAGCodeEncoder"], [3, 1, 1, "", "DifferentialAGCodeUniqueDecoder"], [3, 1, 1, "", "EvaluationAGCodeDecoder_K"], [3, 1, 1, "", "EvaluationAGCodeDecoder_K_extension"], [3, 1, 1, "", "EvaluationAGCodeEncoder"], [3, 1, 1, "", "EvaluationAGCodeUniqueDecoder"]], "sage.coding.ag_code_decoders.Decoder_K": [[3, 2, 1, "", "decode"], [3, 2, 1, "", "encode"], [3, 3, 1, "", "info"]], "sage.coding.ag_code_decoders.Decoder_K_extension": [[3, 2, 1, "", "decode"], [3, 2, 1, "", "encode"], [3, 3, 1, "", "info"]], "sage.coding.ag_code_decoders.DifferentialAGCodeEncoder": [[3, 2, 1, "", "encode"], [3, 2, 1, "", "unencode_nocheck"]], "sage.coding.ag_code_decoders.DifferentialAGCodeUniqueDecoder": [[3, 2, 1, "", "connected_encoder"], [3, 2, 1, "", "decode_to_code"], [3, 2, 1, "", "decode_to_message"], [3, 2, 1, "", "decoding_radius"]], "sage.coding.ag_code_decoders.EvaluationAGCodeEncoder": [[3, 2, 1, "", "encode"], [3, 2, 1, "", "unencode_nocheck"]], "sage.coding.ag_code_decoders.EvaluationAGCodeUniqueDecoder": [[3, 2, 1, "", "connected_encoder"], [3, 2, 1, "", "decode_to_code"], [3, 2, 1, "", "decode_to_message"], [3, 2, 1, "", "decoding_radius"]], "sage.coding.bch_code": [[4, 1, 1, "", "BCHCode"], [4, 1, 1, "", "BCHUnderlyingGRSDecoder"]], "sage.coding.bch_code.BCHCode": [[4, 2, 1, "", "bch_to_grs"], [4, 2, 1, "", "designed_distance"], [4, 2, 1, "", "jump_size"], [4, 2, 1, "", "offset"]], "sage.coding.bch_code.BCHUnderlyingGRSDecoder": [[4, 2, 1, "", "bch_word_to_grs"], [4, 2, 1, "", "decode_to_code"], [4, 2, 1, "", "decoding_radius"], [4, 2, 1, "", "grs_code"], [4, 2, 1, "", "grs_decoder"], [4, 2, 1, "", "grs_word_to_bch"]], "sage.coding.binary_code": [[5, 1, 1, "", "BinaryCode"], [5, 1, 1, "", "BinaryCodeClassifier"], [5, 1, 1, "", "OrbitPartition"], [5, 1, 1, "", "PartitionStack"], [5, 4, 1, "", "test_expand_to_ortho_basis"], [5, 4, 1, "", "test_word_perms"], [5, 4, 1, "", "weight_dist"]], "sage.coding.binary_code.BinaryCode": [[5, 2, 1, "", "apply_permutation"], [5, 2, 1, "", "matrix"], [5, 2, 1, "", "print_data"], [5, 2, 1, "", "put_in_std_form"]], "sage.coding.binary_code.BinaryCodeClassifier": [[5, 2, 1, "", "generate_children"], [5, 2, 1, "", "put_in_canonical_form"]], "sage.coding.binary_code.PartitionStack": [[5, 2, 1, "", "cmp"], [5, 2, 1, "", "print_basis"], [5, 2, 1, "", "print_data"]], "sage.coding.channel": [[7, 1, 1, "", "Channel"], [7, 1, 1, "", "ErrorErasureChannel"], [7, 1, 1, "", "QarySymmetricChannel"], [7, 1, 1, "", "StaticErrorRateChannel"], [7, 4, 1, "", "format_interval"], [7, 4, 1, "", "random_error_vector"]], "sage.coding.channel.Channel": [[7, 2, 1, "", "input_space"], [7, 2, 1, "", "output_space"], [7, 2, 1, "", "transmit"], [7, 2, 1, "", "transmit_unsafe"]], "sage.coding.channel.ErrorErasureChannel": [[7, 2, 1, "", "number_erasures"], [7, 2, 1, "", "number_errors"], [7, 2, 1, "", "transmit_unsafe"]], "sage.coding.channel.QarySymmetricChannel": [[7, 2, 1, "", "error_probability"], [7, 2, 1, "", "probability_of_at_most_t_errors"], [7, 2, 1, "", "probability_of_exactly_t_errors"], [7, 2, 1, "", "transmit_unsafe"]], "sage.coding.channel.StaticErrorRateChannel": [[7, 2, 1, "", "number_errors"], [7, 2, 1, "", "transmit_unsafe"]], "sage.coding.code_bounds": [[9, 4, 1, "", "codesize_upper_bound"], [9, 4, 1, "", "dimension_upper_bound"], [9, 4, 1, "", "elias_bound_asymp"], [9, 4, 1, "", "elias_upper_bound"], [9, 4, 1, "", "entropy"], [9, 4, 1, "", "entropy_inverse"], [9, 4, 1, "", "gilbert_lower_bound"], [9, 4, 1, "", "griesmer_upper_bound"], [9, 4, 1, "", "gv_bound_asymp"], [9, 4, 1, "", "gv_info_rate"], [9, 4, 1, "", "hamming_bound_asymp"], [9, 4, 1, "", "hamming_upper_bound"], [9, 4, 1, "", "mrrw1_bound_asymp"], [9, 4, 1, "", "plotkin_bound_asymp"], [9, 4, 1, "", "plotkin_upper_bound"], [9, 4, 1, "", "singleton_bound_asymp"], [9, 4, 1, "", "singleton_upper_bound"], [9, 4, 1, "", "volume_hamming"]], "sage.coding.code_constructions": [[10, 4, 1, "", "DuadicCodeEvenPair"], [10, 4, 1, "", "DuadicCodeOddPair"], [10, 4, 1, "", "ExtendedQuadraticResidueCode"], [10, 4, 1, "", "QuadraticResidueCode"], [10, 4, 1, "", "QuadraticResidueCodeEvenPair"], [10, 4, 1, "", "QuadraticResidueCodeOddPair"], [10, 4, 1, "", "ToricCode"], [10, 4, 1, "", "WalshCode"], [10, 4, 1, "", "from_parity_check_matrix"], [10, 4, 1, "", "permutation_action"], [10, 4, 1, "", "random_linear_code"], [10, 4, 1, "", "walsh_matrix"]], "sage.coding.codecan": [[11, 0, 0, "-", "autgroup_can_label"], [12, 0, 0, "-", "codecan"]], "sage.coding.codecan.autgroup_can_label": [[11, 1, 1, "", "LinearCodeAutGroupCanLabel"]], "sage.coding.codecan.autgroup_can_label.LinearCodeAutGroupCanLabel": [[11, 2, 1, "", "get_PGammaL_gens"], [11, 2, 1, "", "get_PGammaL_order"], [11, 2, 1, "", "get_autom_gens"], [11, 2, 1, "", "get_autom_order"], [11, 2, 1, "", "get_canonical_form"], [11, 2, 1, "", "get_transporter"]], "sage.coding.codecan.codecan": [[12, 1, 1, "", "InnerGroup"], [12, 1, 1, "", "PartitionRefinementLinearCode"]], "sage.coding.codecan.codecan.InnerGroup": [[12, 2, 1, "", "column_blocks"], [12, 2, 1, "", "get_frob_pow"]], "sage.coding.codecan.codecan.PartitionRefinementLinearCode": [[12, 2, 1, "", "get_autom_gens"], [12, 2, 1, "", "get_autom_order_inner_stabilizer"], [12, 2, 1, "", "get_canonical_form"], [12, 2, 1, "", "get_transporter"]], "sage.coding.cyclic_code": [[14, 1, 1, "", "CyclicCode"], [14, 1, 1, "", "CyclicCodePolynomialEncoder"], [14, 1, 1, "", "CyclicCodeSurroundingBCHDecoder"], [14, 1, 1, "", "CyclicCodeVectorEncoder"], [14, 4, 1, "", "bch_bound"], [14, 4, 1, "", "find_generator_polynomial"]], "sage.coding.cyclic_code.CyclicCode": [[14, 2, 1, "", "bch_bound"], [14, 2, 1, "", "check_polynomial"], [14, 2, 1, "", "defining_set"], [14, 2, 1, "", "field_embedding"], [14, 2, 1, "", "generator_polynomial"], [14, 2, 1, "", "parity_check_matrix"], [14, 2, 1, "", "primitive_root"], [14, 2, 1, "", "surrounding_bch_code"]], "sage.coding.cyclic_code.CyclicCodePolynomialEncoder": [[14, 2, 1, "", "encode"], [14, 2, 1, "", "message_space"], [14, 2, 1, "", "unencode_nocheck"]], "sage.coding.cyclic_code.CyclicCodeSurroundingBCHDecoder": [[14, 2, 1, "", "bch_code"], [14, 2, 1, "", "bch_decoder"], [14, 2, 1, "", "decode_to_code"], [14, 2, 1, "", "decoding_radius"]], "sage.coding.cyclic_code.CyclicCodeVectorEncoder": [[14, 2, 1, "", "encode"], [14, 2, 1, "", "generator_matrix"], [14, 2, 1, "", "message_space"], [14, 2, 1, "", "unencode_nocheck"]], "sage.coding.databases": [[15, 4, 1, "", "best_linear_code_in_codetables_dot_de"], [15, 4, 1, "", "best_linear_code_in_guava"], [15, 4, 1, "", "bounds_on_minimum_distance_in_guava"], [15, 4, 1, "", "self_orthogonal_binary_codes"]], "sage.coding.decoder": [[16, 1, 1, "", "Decoder"], [16, 5, 1, "", "DecodingError"]], "sage.coding.decoder.Decoder": [[16, 2, 1, "", "code"], [16, 2, 1, "", "connected_encoder"], [16, 2, 1, "", "decode_to_code"], [16, 2, 1, "", "decode_to_message"], [16, 2, 1, "", "decoder_type"], [16, 2, 1, "", "decoding_radius"], [16, 2, 1, "", "input_space"], [16, 2, 1, "", "message_space"]], "sage.coding.delsarte_bounds": [[18, 4, 1, "", "delsarte_bound_Q_matrix"], [18, 4, 1, "", "delsarte_bound_additive_hamming_space"], [18, 4, 1, "", "delsarte_bound_constant_weight_code"], [18, 4, 1, "", "delsarte_bound_hamming_space"], [18, 4, 1, "", "eberlein"], [18, 4, 1, "", "krawtchouk"]], "sage.coding.encoder": [[19, 1, 1, "", "Encoder"], [19, 5, 1, "", "EncodingError"]], "sage.coding.encoder.Encoder": [[19, 2, 1, "", "code"], [19, 2, 1, "", "encode"], [19, 2, 1, "", "generator_matrix"], [19, 2, 1, "", "message_space"], [19, 2, 1, "", "unencode"], [19, 2, 1, "", "unencode_nocheck"]], "sage.coding.extended_code": [[21, 1, 1, "", "ExtendedCode"], [21, 1, 1, "", "ExtendedCodeExtendedMatrixEncoder"], [21, 1, 1, "", "ExtendedCodeOriginalCodeDecoder"]], "sage.coding.extended_code.ExtendedCode": [[21, 2, 1, "", "original_code"], [21, 2, 1, "", "parity_check_matrix"], [21, 2, 1, "", "random_element"]], "sage.coding.extended_code.ExtendedCodeExtendedMatrixEncoder": [[21, 2, 1, "", "generator_matrix"]], "sage.coding.extended_code.ExtendedCodeOriginalCodeDecoder": [[21, 2, 1, "", "decode_to_code"], [21, 2, 1, "", "decoding_radius"], [21, 2, 1, "", "original_decoder"]], "sage.coding.gabidulin_code": [[22, 1, 1, "", "GabidulinCode"], [22, 1, 1, "", "GabidulinGaoDecoder"], [22, 1, 1, "", "GabidulinPolynomialEvaluationEncoder"], [22, 1, 1, "", "GabidulinVectorEvaluationEncoder"]], "sage.coding.gabidulin_code.GabidulinCode": [[22, 2, 1, "", "dual_code"], [22, 2, 1, "", "evaluation_points"], [22, 2, 1, "", "minimum_distance"], [22, 2, 1, "", "parity_check_matrix"], [22, 2, 1, "", "parity_evaluation_points"], [22, 2, 1, "", "twisting_homomorphism"]], "sage.coding.gabidulin_code.GabidulinGaoDecoder": [[22, 2, 1, "", "decode_to_code"], [22, 2, 1, "", "decode_to_message"], [22, 2, 1, "", "decoding_radius"]], "sage.coding.gabidulin_code.GabidulinPolynomialEvaluationEncoder": [[22, 2, 1, "", "encode"], [22, 2, 1, "", "message_space"], [22, 2, 1, "", "unencode_nocheck"]], "sage.coding.gabidulin_code.GabidulinVectorEvaluationEncoder": [[22, 2, 1, "", "generator_matrix"]], "sage.coding.golay_code": [[23, 1, 1, "", "GolayCode"]], "sage.coding.golay_code.GolayCode": [[23, 2, 1, "", "covering_radius"], [23, 2, 1, "", "dual_code"], [23, 2, 1, "", "generator_matrix"], [23, 2, 1, "", "minimum_distance"], [23, 2, 1, "", "parity_check_matrix"], [23, 2, 1, "", "weight_distribution"]], "sage.coding.goppa_code": [[24, 1, 1, "", "GoppaCode"], [24, 1, 1, "", "GoppaCodeEncoder"]], "sage.coding.goppa_code.GoppaCode": [[24, 2, 1, "", "distance_bound"], [24, 2, 1, "", "parity_check_matrix"]], "sage.coding.goppa_code.GoppaCodeEncoder": [[24, 2, 1, "", "generator_matrix"]], "sage.coding.grs_code": [[25, 1, 1, "", "GRSBerlekampWelchDecoder"], [25, 1, 1, "", "GRSErrorErasureDecoder"], [25, 1, 1, "", "GRSEvaluationPolynomialEncoder"], [25, 1, 1, "", "GRSEvaluationVectorEncoder"], [25, 1, 1, "", "GRSGaoDecoder"], [25, 1, 1, "", "GRSKeyEquationSyndromeDecoder"], [25, 1, 1, "", "GeneralizedReedSolomonCode"], [25, 4, 1, "", "ReedSolomonCode"]], "sage.coding.grs_code.GRSBerlekampWelchDecoder": [[25, 2, 1, "", "decode_to_code"], [25, 2, 1, "", "decode_to_message"], [25, 2, 1, "", "decoding_radius"]], "sage.coding.grs_code.GRSErrorErasureDecoder": [[25, 2, 1, "", "decode_to_message"], [25, 2, 1, "", "decoding_radius"]], "sage.coding.grs_code.GRSEvaluationPolynomialEncoder": [[25, 2, 1, "", "encode"], [25, 2, 1, "", "message_space"], [25, 2, 1, "", "polynomial_ring"], [25, 2, 1, "", "unencode_nocheck"]], "sage.coding.grs_code.GRSEvaluationVectorEncoder": [[25, 2, 1, "", "generator_matrix"]], "sage.coding.grs_code.GRSGaoDecoder": [[25, 2, 1, "", "decode_to_code"], [25, 2, 1, "", "decode_to_message"], [25, 2, 1, "", "decoding_radius"]], "sage.coding.grs_code.GRSKeyEquationSyndromeDecoder": [[25, 2, 1, "", "decode_to_code"], [25, 2, 1, "", "decode_to_message"], [25, 2, 1, "", "decoding_radius"]], "sage.coding.grs_code.GeneralizedReedSolomonCode": [[25, 2, 1, "", "column_multipliers"], [25, 2, 1, "", "covering_radius"], [25, 2, 1, "", "dual_code"], [25, 2, 1, "", "evaluation_points"], [25, 2, 1, "", "is_generalized"], [25, 2, 1, "", "minimum_distance"], [25, 2, 1, "", "multipliers_product"], [25, 2, 1, "", "parity_check_matrix"], [25, 2, 1, "", "parity_column_multipliers"], [25, 2, 1, "", "weight_distribution"]], "sage.coding.guava": [[26, 4, 1, "", "QuasiQuadraticResidueCode"], [26, 4, 1, "", "RandomLinearCodeGuava"]], "sage.coding.guruswami_sudan": [[27, 0, 0, "-", "gs_decoder"], [28, 0, 0, "-", "interpolation"], [29, 0, 0, "-", "utils"]], "sage.coding.guruswami_sudan.gs_decoder": [[27, 1, 1, "", "GRSGuruswamiSudanDecoder"], [27, 4, 1, "", "alekhnovich_root_finder"], [27, 4, 1, "", "n_k_params"], [27, 4, 1, "", "roth_ruckenstein_root_finder"]], "sage.coding.guruswami_sudan.gs_decoder.GRSGuruswamiSudanDecoder": [[27, 2, 1, "", "decode_to_code"], [27, 2, 1, "", "decode_to_message"], [27, 2, 1, "", "decoding_radius"], [27, 2, 1, "", "gs_satisfactory"], [27, 2, 1, "", "guruswami_sudan_decoding_radius"], [27, 2, 1, "", "interpolation_algorithm"], [27, 2, 1, "", "list_size"], [27, 2, 1, "", "multiplicity"], [27, 2, 1, "", "parameters"], [27, 2, 1, "", "parameters_given_tau"], [27, 2, 1, "", "rootfinding_algorithm"]], "sage.coding.guruswami_sudan.interpolation": [[28, 4, 1, "", "gs_interpolation_lee_osullivan"], [28, 4, 1, "", "gs_interpolation_linalg"], [28, 4, 1, "", "lee_osullivan_module"]], "sage.coding.guruswami_sudan.utils": [[29, 4, 1, "", "gilt"], [29, 4, 1, "", "johnson_radius"], [29, 4, 1, "", "ligt"], [29, 4, 1, "", "polynomial_to_list"], [29, 4, 1, "", "solve_degree2_to_integer_range"]], "sage.coding.hamming_code": [[30, 1, 1, "", "HammingCode"]], "sage.coding.hamming_code.HammingCode": [[30, 2, 1, "", "minimum_distance"], [30, 2, 1, "", "parity_check_matrix"]], "sage.coding.information_set_decoder": [[31, 1, 1, "", "InformationSetAlgorithm"], [31, 1, 1, "", "LeeBrickellISDAlgorithm"], [31, 1, 1, "", "LinearCodeInformationSetDecoder"]], "sage.coding.information_set_decoder.InformationSetAlgorithm": [[31, 2, 1, "", "calibrate"], [31, 2, 1, "", "code"], [31, 2, 1, "", "decode"], [31, 2, 1, "", "decoding_interval"], [31, 2, 1, "", "name"], [31, 2, 1, "", "parameters"], [31, 2, 1, "", "time_estimate"]], "sage.coding.information_set_decoder.LeeBrickellISDAlgorithm": [[31, 2, 1, "", "calibrate"], [31, 2, 1, "", "decode"]], "sage.coding.information_set_decoder.LinearCodeInformationSetDecoder": [[31, 2, 1, "", "algorithm"], [31, 2, 1, "", "decode_to_code"], [31, 2, 1, "", "decoding_interval"], [31, 2, 1, "", "decoding_radius"], [31, 2, 1, "", "known_algorithms"]], "sage.coding.kasami_codes": [[32, 1, 1, "", "KasamiCode"]], "sage.coding.kasami_codes.KasamiCode": [[32, 2, 1, "", "generator_matrix"], [32, 2, 1, "", "parameters"]], "sage.coding.linear_code": [[33, 1, 1, "", "AbstractLinearCode"], [33, 1, 1, "", "LinearCode"], [33, 1, 1, "", "LinearCodeGeneratorMatrixEncoder"], [33, 1, 1, "", "LinearCodeNearestNeighborDecoder"], [33, 1, 1, "", "LinearCodeSyndromeDecoder"]], "sage.coding.linear_code.AbstractLinearCode": [[33, 2, 1, "", "assmus_mattson_designs"], [33, 2, 1, "", "automorphism_group_gens"], [33, 2, 1, "", "binomial_moment"], [33, 2, 1, "", "canonical_representative"], [33, 2, 1, "", "characteristic"], [33, 2, 1, "", "characteristic_polynomial"], [33, 2, 1, "", "chinen_polynomial"], [33, 2, 1, "", "construction_x"], [33, 2, 1, "", "cosetGraph"], [33, 2, 1, "", "covering_radius"], [33, 2, 1, "", "direct_sum"], [33, 2, 1, "", "divisor"], [33, 2, 1, "", "extended_code"], [33, 2, 1, "", "galois_closure"], [33, 2, 1, "", "genus"], [33, 2, 1, "", "is_galois_closed"], [33, 2, 1, "", "is_permutation_equivalent"], [33, 2, 1, "", "is_projective"], [33, 2, 1, "", "juxtapose"], [33, 2, 1, "", "minimum_distance"], [33, 2, 1, "", "module_composition_factors"], [33, 2, 1, "", "permutation_automorphism_group"], [33, 2, 1, "", "product_code"], [33, 2, 1, "", "punctured"], [33, 2, 1, "", "relative_distance"], [33, 2, 1, "", "shortened"], [33, 2, 1, "", "spectrum"], [33, 2, 1, "", "support"], [33, 2, 1, "", "u_u_plus_v_code"], [33, 2, 1, "", "weight_distribution"], [33, 2, 1, "", "weight_enumerator"], [33, 2, 1, "", "zeta_function"], [33, 2, 1, "", "zeta_polynomial"]], "sage.coding.linear_code.LinearCode": [[33, 2, 1, "", "generator_matrix"]], "sage.coding.linear_code.LinearCodeGeneratorMatrixEncoder": [[33, 2, 1, "", "generator_matrix"]], "sage.coding.linear_code.LinearCodeNearestNeighborDecoder": [[33, 2, 1, "", "decode_to_code"], [33, 2, 1, "", "decoding_radius"]], "sage.coding.linear_code.LinearCodeSyndromeDecoder": [[33, 2, 1, "", "decode_to_code"], [33, 2, 1, "", "decoding_radius"], [33, 2, 1, "", "maximum_error_weight"], [33, 2, 1, "", "syndrome_table"]], "sage.coding.linear_code_no_metric": [[34, 1, 1, "", "AbstractLinearCodeNoMetric"], [34, 1, 1, "", "LinearCodeSystematicEncoder"]], "sage.coding.linear_code_no_metric.AbstractLinearCodeNoMetric": [[34, 2, 1, "", "ambient_space"], [34, 2, 1, "", "base_field"], [34, 2, 1, "", "basis"], [34, 2, 1, "", "cardinality"], [34, 2, 1, "", "dimension"], [34, 2, 1, "", "dual_code"], [34, 2, 1, "", "generator_matrix"], [34, 2, 1, "", "gens"], [34, 2, 1, "", "information_set"], [34, 2, 1, "", "is_information_set"], [34, 2, 1, "", "is_permutation_automorphism"], [34, 2, 1, "", "is_self_dual"], [34, 2, 1, "", "is_self_orthogonal"], [34, 2, 1, "", "is_subcode"], [34, 2, 1, "", "parity_check_matrix"], [34, 2, 1, "", "permuted_code"], [34, 2, 1, "", "rate"], [34, 2, 1, "", "redundancy_matrix"], [34, 2, 1, "", "standard_form"], [34, 2, 1, "", "syndrome"], [34, 2, 1, "", "systematic_generator_matrix"], [34, 2, 1, "", "zero"]], "sage.coding.linear_code_no_metric.LinearCodeSystematicEncoder": [[34, 2, 1, "", "generator_matrix"], [34, 2, 1, "", "systematic_permutation"], [34, 2, 1, "", "systematic_positions"]], "sage.coding.linear_rank_metric": [[35, 1, 1, "", "AbstractLinearRankMetricCode"], [35, 1, 1, "", "LinearRankMetricCode"], [35, 1, 1, "", "LinearRankMetricCodeNearestNeighborDecoder"], [35, 4, 1, "", "from_matrix_representation"], [35, 4, 1, "", "rank_distance"], [35, 4, 1, "", "rank_weight"], [35, 4, 1, "", "to_matrix_representation"]], "sage.coding.linear_rank_metric.AbstractLinearRankMetricCode": [[35, 2, 1, "", "extension_degree"], [35, 2, 1, "", "field_extension"], [35, 2, 1, "", "matrix_form_of_vector"], [35, 2, 1, "", "minimum_distance"], [35, 2, 1, "", "rank_distance_between_vectors"], [35, 2, 1, "", "rank_support_of_vector"], [35, 2, 1, "", "rank_weight_of_vector"], [35, 2, 1, "", "sub_field"], [35, 2, 1, "", "vector_form_of_matrix"]], "sage.coding.linear_rank_metric.LinearRankMetricCode": [[35, 2, 1, "", "generator_matrix"]], "sage.coding.linear_rank_metric.LinearRankMetricCodeNearestNeighborDecoder": [[35, 2, 1, "", "decode_to_code"], [35, 2, 1, "", "decoding_radius"]], "sage.coding.parity_check_code": [[36, 1, 1, "", "ParityCheckCode"], [36, 1, 1, "", "ParityCheckCodeGeneratorMatrixEncoder"], [36, 1, 1, "", "ParityCheckCodeStraightforwardEncoder"]], "sage.coding.parity_check_code.ParityCheckCode": [[36, 2, 1, "", "minimum_distance"]], "sage.coding.parity_check_code.ParityCheckCodeGeneratorMatrixEncoder": [[36, 2, 1, "", "generator_matrix"]], "sage.coding.parity_check_code.ParityCheckCodeStraightforwardEncoder": [[36, 2, 1, "", "encode"], [36, 2, 1, "", "message_space"], [36, 2, 1, "", "unencode_nocheck"]], "sage.coding.punctured_code": [[37, 1, 1, "", "PuncturedCode"], [37, 1, 1, "", "PuncturedCodeOriginalCodeDecoder"], [37, 1, 1, "", "PuncturedCodePuncturedMatrixEncoder"]], "sage.coding.punctured_code.PuncturedCode": [[37, 2, 1, "", "dimension"], [37, 2, 1, "", "encode"], [37, 2, 1, "", "original_code"], [37, 2, 1, "", "punctured_positions"], [37, 2, 1, "", "random_element"], [37, 2, 1, "", "structured_representation"]], "sage.coding.punctured_code.PuncturedCodeOriginalCodeDecoder": [[37, 2, 1, "", "decode_to_code"], [37, 2, 1, "", "decoding_radius"], [37, 2, 1, "", "original_decoder"]], "sage.coding.punctured_code.PuncturedCodePuncturedMatrixEncoder": [[37, 2, 1, "", "generator_matrix"]], "sage.coding.reed_muller_code": [[38, 1, 1, "", "BinaryReedMullerCode"], [38, 1, 1, "", "QAryReedMullerCode"], [38, 4, 1, "", "ReedMullerCode"], [38, 1, 1, "", "ReedMullerPolynomialEncoder"], [38, 1, 1, "", "ReedMullerVectorEncoder"]], "sage.coding.reed_muller_code.BinaryReedMullerCode": [[38, 2, 1, "", "minimum_distance"], [38, 2, 1, "", "number_of_variables"], [38, 2, 1, "", "order"]], "sage.coding.reed_muller_code.QAryReedMullerCode": [[38, 2, 1, "", "minimum_distance"], [38, 2, 1, "", "number_of_variables"], [38, 2, 1, "", "order"]], "sage.coding.reed_muller_code.ReedMullerPolynomialEncoder": [[38, 2, 1, "", "encode"], [38, 2, 1, "", "message_space"], [38, 2, 1, "", "points"], [38, 2, 1, "", "polynomial_ring"], [38, 2, 1, "", "unencode_nocheck"]], "sage.coding.reed_muller_code.ReedMullerVectorEncoder": [[38, 2, 1, "", "generator_matrix"], [38, 2, 1, "", "points"]], "sage.coding.self_dual_codes": [[39, 4, 1, "", "self_dual_binary_codes"]], "sage.coding.source_coding": [[40, 0, 0, "-", "huffman"]], "sage.coding.source_coding.huffman": [[40, 1, 1, "", "Huffman"], [40, 4, 1, "", "frequency_table"]], "sage.coding.source_coding.huffman.Huffman": [[40, 2, 1, "", "decode"], [40, 2, 1, "", "encode"], [40, 2, 1, "", "encoding_table"], [40, 2, 1, "", "tree"]], "sage.coding.subfield_subcode": [[41, 1, 1, "", "SubfieldSubcode"], [41, 1, 1, "", "SubfieldSubcodeOriginalCodeDecoder"]], "sage.coding.subfield_subcode.SubfieldSubcode": [[41, 2, 1, "", "dimension"], [41, 2, 1, "", "dimension_lower_bound"], [41, 2, 1, "", "dimension_upper_bound"], [41, 2, 1, "", "embedding"], [41, 2, 1, "", "original_code"], [41, 2, 1, "", "parity_check_matrix"]], "sage.coding.subfield_subcode.SubfieldSubcodeOriginalCodeDecoder": [[41, 2, 1, "", "decode_to_code"], [41, 2, 1, "", "decoding_radius"], [41, 2, 1, "", "original_decoder"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:function", "5": "py:exception"}, "terms": {"": [1, 5, 9, 11, 12, 14, 15, 16, 19, 21, 22, 23, 25, 27, 28, 29, 31, 32, 33, 34, 35, 37, 39, 40, 41], "0": [1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41], "00": 40, "0000": 5, "00000": 40, "000000": 5, "00000000": 5, "000000000001001101101110": 5, "000000000001010111000111": 5, "000000000001101011100011": 5, "000000000010001011110101": 5, "000000000010101110001101": 5, "000000000010111110010010": 5, "000000000100001011011110": 5, "000000000100010011011110": 5, "000000000100110100101011": 5, "000000001000010101110011": 5, "000000001000010110111100": 5, "000000001000110001110110": 5, "000000010000011111001001": 5, "000000010000101101111000": 5, "000000010000110011011001": 5, "000000100000001100110111": 5, "000000100000011000110110": 5, "000000100000011001101101": 5, "000001000000001100110111": 5, "000001000000010001101101": 5, "000001000000011001101101": 5, "00001": 40, "000010000000010110010101": 5, "000010000000101101111000": 5, "000010000000110011011001": 5, "00001111": 5, "000011110110100001000000": 5, "0001": 40, "000100000000010110101010": 5, "000100000000010110111100": 5, "000100000000110001110110": 5, "000111101101000010000000": 5, "0008162108571427874": 31, "0010": 40, "001000000000001011011110": 5, "001000000000001111010010": 5, "001000000000110100101011": 5, "001001001111100000000001": 5, "0011": 40, "00110011": 5, "001101110001100000000100": 5, "001111": 5, "00111100": 5, "001111011010000100000000": 5, "01": [16, 33], "010": 40, "010000000000001010001111": 5, "010000000000101110001101": 5, "010000000000111110010010": 5, "010011011001100000001000": 5, "01010101": 5, "010110001110101000000000": 5, "01011010": 5, "010110110011000000010000": 5, "010111": 5, "0110": 40, "011000111010100000000000": 5, "01100110": 5, "01101001": 5, "011010100101100000000010": 5, "0111": 40, "011100011101010000000000": 5, "011101100110000000100000": 5, "012986862055": 9, "02": [10, 16, 31, 33, 35], "03": [2, 3, 10, 15, 26, 33], "04": 33, "041": 29, "05": [9, 10, 26, 33, 40], "06": [16, 24, 31], "07": [9, 10, 32, 33], "08": [22, 33, 35, 39], "09": [10, 32, 33], "0x": 27, "1": [1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42], "10": [4, 5, 7, 9, 10, 11, 12, 14, 15, 18, 22, 25, 26, 27, 28, 31, 33, 37, 39, 42], "100": [9, 25, 40], "1000": 7, "10000": 40, "100000000000001100111001": 5, "100000000000010111000111": 5, "100000000000101011100011": 5, "10001": 40, "10010": 40, "10010110": 5, "10011": 40, "10011001": 5, "101": [39, 40], "1010": 40, "10100101": 5, "10101010": 5, "101011": 5, "1011": 40, "10111010111": 40, "10111011101": 40, "102": 10, "1024": 22, "103": 39, "104": 42, "105": 27, "108": 42, "109": 27, "109226": 9, "11": [5, 7, 9, 10, 11, 12, 14, 15, 18, 21, 25, 26, 27, 28, 33, 34, 37, 38, 39], "110": 33, "1100": 40, "110000": 40, "11000011": 5, "11000011010001010101100001111101001110011101001101101111011110111001111010000101101110100000111010101000101000000010111011011000110100101001011100010011011110101011100100110001100101001001110101110101110110001000101011000111101101101111110011111101110100011": 40, "110001": 40, "11000101": 40, "110010": 40, "110011": [5, 40], "11001100": 5, "1101": 40, "111": 27, "1110": 40, "11100": 40, "11100110010001010000111011101101010000111110111111100001110010110101001101101011000010110100110": 40, "11101": 40, "1111": [5, 40], "11110": 40, "111100": 5, "11110000": 5, "11111": 40, "111110101100": 40, "11111111": 5, "11111111111111111111111111111111": 5, "112": 42, "117": 42, "118": 27, "12": [5, 7, 9, 11, 14, 18, 22, 23, 25, 26, 27, 31, 33, 34, 37, 38, 39, 40, 42], "121": 42, "122346861835401": 7, "1224": 5, "12300": 18, "123361": 9, "126": 42, "128": 9, "13": [4, 5, 9, 10, 11, 14, 25, 27, 33, 34, 35, 40, 41], "132": [33, 42], "135": 39, "13723": 33, "14": [5, 7, 10, 11, 14, 15, 18, 25, 27, 33, 39], "140": 42, "143": [33, 42], "144": 33, "148": 18, "15": [3, 4, 5, 7, 9, 10, 11, 12, 14, 15, 21, 22, 26, 27, 33, 37, 39, 42], "150": 18, "1500": 5, "151": 18, "153": 10, "154": 42, "156": 25, "16": [4, 5, 7, 9, 10, 11, 14, 15, 18, 21, 22, 24, 32, 33, 34, 35, 37, 38, 39, 40, 41], "168": [11, 42], "17": [10, 11, 14, 18, 27, 31, 33], "176": [9, 39], "18": [3, 7, 11, 15, 33, 39], "181": [5, 27, 29], "181440": 33, "183": 25, "18872187554086": 9, "19": [11, 15, 22, 33], "192": 9, "195": 25, "1972": 39, "198": 42, "19863": 7, "1b": 5, "1e": 9, "1m": 38, "1st": 34, "2": [1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42], "20": [7, 9, 11, 15, 18, 22, 33, 39, 40], "200": 27, "2002": 15, "2003": 39, "2005": [10, 15, 26, 33], "2006": [9, 10, 15, 26, 33], "2007": [5, 10, 26, 33, 39], "2008": [10, 15, 26, 33], "2009": [9, 16, 26, 33], "2010": [33, 40], "2011": 33, "2012": [9, 11, 12, 18, 33], "2013": 33, "2015": [16, 18, 19], "2016": [22, 31, 33], "2017": 31, "2019": [2, 3, 22, 24, 26, 35], "20198": 33, "2020": 32, "2021": 18, "2024": 35, "209": 39, "21": [11, 15, 18, 33, 34, 38], "2100": 25, "219": 42, "22": [15, 26, 33, 38, 39], "2224": 18, "23": [7, 18, 23, 33], "231": 39, "232": 9, "24": [5, 9, 10, 15, 18, 23, 31, 33, 39, 42], "240": 5, "24147": 39, "243": 15, "2448023843": 38, "244823040": 33, "246": 39, "25": [15, 39], "250": [27, 29], "251": 27, "256": [9, 15, 25, 33], "257": 15, "2576": 18, "25896": 10, "26": [3, 7, 39], "261": 39, "263": 33, "264": 23, "27": 15, "28": [10, 25, 33, 37, 39, 42], "2816": 33, "29": [16, 25], "290": 5, "29250": 25, "294": 33, "2d": 5, "2d_1": 33, "2e": 9, "2j": [32, 39], "2m": 38, "2n": 33, "2nd": 25, "2p": 26, "2t": 24, "3": [1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 14, 15, 18, 22, 23, 24, 25, 26, 27, 28, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42], "30": [5, 7, 9, 25, 26, 30, 31, 33, 39, 42], "300000000000000": 7, "303": 33, "31": [4, 7, 23], "32": [5, 15, 33, 38, 42], "327680": 18, "3295": 39, "33": [7, 15, 23], "330": 33, "33229": 38, "34": [5, 15, 42], "347": 39, "35": [33, 42], "3545789026652697": 9, "358": 32, "36": [10, 15, 18, 42], "362880": 33, "365": 10, "367": 7, "36704992608261894": 9, "37": [15, 29], "375": 38, "38": 7, "3893": 33, "39": [37, 40, 42], "39110": 38, "39912396330": 9, "39916800": 33, "3d": 5, "4": [1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42], "40": [7, 25, 37, 42], "4096": [9, 18, 33], "41": 29, "42": [7, 29, 37, 39], "429": 33, "4294967296": 38, "43": [18, 29], "440": 23, "45": [14, 18, 40, 42], "456435556800": 9, "46": 7, "463": 5, "47": [27, 30], "48": [30, 33, 42], "49": [7, 10, 27], "4e": 9, "5": [1, 2, 3, 4, 5, 7, 9, 10, 11, 14, 15, 18, 21, 22, 24, 25, 26, 27, 28, 29, 33, 34, 36, 37, 38, 39, 40, 41, 42], "50": [7, 29, 42], "51": [14, 25], "52": [25, 42], "53": 7, "54": [30, 33, 42], "55": [7, 24, 39, 42], "56": [39, 42], "567785569973042442072": 18, "57": [30, 33], "58": 7, "59": [7, 25, 31, 34, 37, 38], "6": [4, 5, 7, 9, 10, 11, 12, 14, 15, 18, 22, 24, 25, 27, 28, 31, 33, 34, 35, 37, 38, 39, 42], "60": 5, "6000": 25, "61500": 25, "62200": 25, "63": [14, 42], "64": [25, 33, 35], "65": 42, "66": 27, "67": 23, "68": [5, 42], "69": 23, "690": 29, "7": [1, 4, 5, 7, 9, 10, 11, 14, 15, 16, 19, 21, 22, 23, 25, 27, 28, 30, 32, 33, 34, 36, 37, 39, 41], "70": [18, 27, 42], "707106781186548": 39, "72": [15, 42], "729": 9, "73": [15, 42], "731": 39, "759": [18, 33], "77": 39, "78": 33, "7920": 33, "8": [2, 3, 4, 5, 7, 9, 10, 11, 14, 15, 18, 22, 23, 24, 25, 27, 28, 29, 31, 32, 33, 34, 35, 36, 39, 42], "80": [27, 33], "81": 42, "84": 42, "85": [5, 9, 42], "86": 18, "864": 11, "88": 42, "89": 27, "9": [2, 3, 5, 7, 10, 11, 14, 15, 18, 21, 22, 24, 25, 27, 28, 29, 32, 33, 34, 37, 38, 39, 40, 41, 42], "90": 42, "92": 27, "93": 9, "95": 18, "952236164579467": 7, "96": 42, "97": 27, "98": 42, "99": 42, "9999360": 33, "A": [1, 2, 3, 4, 5, 9, 10, 11, 12, 14, 22, 24, 25, 26, 31, 33, 34, 35, 36, 37, 38, 39, 40], "And": [12, 33, 37], "As": [1, 2, 4, 9, 14, 16, 19, 25, 33, 34, 37], "But": 33, "By": [9, 16, 19, 33], "For": [0, 1, 4, 9, 14, 15, 31, 32, 33, 34, 35, 38, 39], "If": [0, 1, 2, 3, 4, 5, 7, 9, 10, 11, 14, 16, 18, 19, 21, 23, 25, 27, 29, 31, 33, 34, 35, 37, 38, 39, 40, 41], "In": [0, 7, 9, 12, 14, 19, 24, 25, 31, 32, 33, 35, 39, 40], "It": [1, 4, 7, 10, 14, 15, 16, 17, 18, 21, 22, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], "No": 1, "Of": [9, 14], "One": [1, 7, 19, 25, 27, 31, 34, 35], "Ore": 22, "Such": [16, 18, 31, 33, 39], "That": [14, 33], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40], "Then": [9, 16, 19, 26, 28, 32, 33, 35], "There": [0, 1, 11, 14, 18, 31, 40], "These": [5, 9, 10, 11, 15, 19, 22, 24, 26, 33, 35, 39], "To": [1, 6, 7, 8, 13, 14, 16, 17, 19, 20, 27, 31, 33, 34, 35, 39, 41], "Will": 14, "With": [1, 18], "_": [3, 14, 22, 32, 33, 38], "__call__": 1, "__contains__": 1, "__eq__": [16, 19, 33], "__hash__": 33, "__init__": [1, 16, 19, 31, 33, 34, 35], "__iter__": [1, 33], "__ne__": [16, 19], "_clear": 5, "_dangerous_dont_use_set_ents_lvl": 5, "_field": 1, "_find_basi": 5, "_first_ngen": [2, 3, 14, 22, 24, 25, 27, 29, 33, 35, 38], "_function_field": 2, "_generator_matrix": [33, 35], "_generic_constructor": 34, "_hyp_refin": 12, "_init_point_hyperplane_incid": 12, "_interpolation_max_weighted_deg": 28, "_is_a_split": 10, "_is_discret": 5, "_k": [6, 18], "_l": [6, 18], "_latex_": [1, 7, 16, 19, 33, 34], "_lift": 3, "_number_erasur": 7, "_number_error": 7, "_paramet": 31, "_parameters_specifi": 31, "_point_refin": 12, "_q": [9, 33], "_random_nonzero_el": 25, "_refin": 5, "_registered_decod": [1, 33, 34], "_registered_encod": [1, 33, 34], "_repr_": [1, 7, 16, 19, 33, 34], "_split_vertex": 5, "_t": 10, "_time_estim": 31, "a003179": 39, "a2": 3, "a_": [5, 12, 39], "a_0": [33, 39], "a_1": [1, 31, 33, 39], "a_2": [1, 9], "a_i": [1, 5, 31, 33], "a_j": 33, "a_m": 39, "a_n": [1, 33, 39], "a_p": 31, "a_q": 9, "aa": 41, "ab": [9, 39], "abl": [1, 9, 16, 25, 27, 33, 34], "about": [1, 11, 35], "abov": [4, 5, 7, 9, 12, 16, 27, 31, 33, 37, 39, 40], "abstract": [1, 2, 7, 16, 19, 31, 33, 34, 35], "abstract_cod": 1, "abstractcod": [1, 34], "abstractlinearcod": [1, 2, 14, 17, 21, 23, 24, 25, 30, 31, 32, 34, 35, 36, 37, 38, 41], "abstractlinearcodenometr": [1, 19, 23, 33, 34, 35], "abstractlinearrankmetriccod": [1, 22], "abund": 33, "accept": [1, 31], "access": [0, 6, 8, 10, 11, 13, 17, 20, 31, 33], "accord": [10, 12, 25, 28, 38, 39], "accordingli": 7, "account": 39, "achiev": [7, 11], "act": 33, "action": [10, 11, 12, 33], "activ": 3, "actual": [5, 25, 27, 33, 36, 38], "ad": [7, 9, 10, 26, 33, 35, 36, 39], "add": [1, 7, 33, 34], "add_decod": 1, "add_encod": 1, "addit": [1, 3, 6, 18, 33, 34, 35], "adjac": 33, "admit": 34, "advantag": 1, "advis": 1, "aeb": 18, "affect": 16, "affinespac": [2, 3], "aforement": 38, "after": 33, "afterward": 33, "ag": [0, 17], "ag_cod": 2, "ag_code_decod": [3, 17], "again": 10, "agcod": 2, "agr": 37, "agre": [5, 31, 33], "ai": 33, "alekhnovich": 27, "alekhnovich_root_find": 27, "alexand": [26, 33], "alfr": 42, "algebra": [0, 2, 40], "algorithm": [0, 1, 2, 3, 5, 7, 9, 10, 11, 12, 16, 22, 25, 27, 31, 32, 33, 35], "algorithm_nam": 31, "algorithm_typ": 11, "align": 4, "all": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], "allow": [1, 7, 9, 11, 17, 19, 27, 31, 33, 34, 35, 37, 39], "alongsid": [27, 33], "alpha": [4, 10, 11, 12, 25], "alpha_": [25, 38], "alpha_1": [22, 25], "alpha_i": [22, 25, 38], "alpha_n": [22, 25], "alphabet": [1, 7, 9, 18, 33, 40], "alreadi": [1, 5, 11, 23, 31], "also": [1, 4, 5, 7, 9, 10, 11, 12, 14, 16, 22, 25, 27, 31, 33, 34, 35, 38, 40], "altern": [7, 22, 33, 35], "alwai": [1, 7, 9, 10, 16, 25, 30, 31, 33, 35, 36], "am": 34, "ambiant": 36, "ambient": [1, 3, 16, 19, 23, 25, 31, 33, 34], "ambient_spac": [1, 3, 21, 25, 31, 33, 34, 37, 41], "among": [0, 27, 31], "amongst": 1, "an": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41], "an_el": [11, 12], "analog": [9, 35], "analyt": 28, "ani": [0, 1, 7, 14, 16, 19, 23, 25, 29, 31, 33, 35, 40], "anoth": [7, 14, 21, 23, 25, 27, 33, 34, 37], "anyth": [23, 31], "appear": 33, "append": [36, 40], "appli": [5, 12, 33], "applic": 9, "apply_map": [11, 33], "apply_permut": 5, "appropri": [1, 27, 31, 38], "approxim": 31, "april": 33, "ar": [0, 1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41], "arbitrari": [5, 12, 18, 33, 35], "arg": [1, 3, 21, 33, 37], "argument": [1, 3, 4, 7, 14, 21, 31, 33, 34, 35, 37, 38, 39, 41], "ari": [6, 7, 9, 13, 31, 38], "aris": 28, "arithmet": [4, 14], "arpit": 22, "arrai": [5, 32], "articl": [5, 9, 10, 18, 23, 33], "ask": [9, 33, 34, 38], "assign": 40, "assmu": 33, "assmus_mattson_design": 33, "associ": [1, 2, 3, 4, 10, 14, 16, 19, 21, 22, 25, 27, 31, 33, 34, 36, 37, 38, 40, 41], "assum": [9, 16, 18, 19, 31, 33, 34], "assumpt": 1, "asymptot": [6, 9], "attempt": [1, 9, 19, 31], "attribut": [2, 33], "augment": 5, "aut": [11, 12, 33, 39], "autgp": 39, "autgroup_can_label": [11, 33], "author": [2, 3, 5, 7, 9, 10, 11, 12, 15, 16, 18, 19, 22, 24, 26, 27, 28, 29, 31, 32, 33, 35, 39, 40], "automorph": [5, 10, 33, 34, 39], "automorphism_group_binary_cod": [33, 39], "automorphism_group_gen": 33, "aux": 33, "avail": [0, 1, 2, 10, 11, 14, 27, 34, 37], "averag": 31, "avoid": 37, "ax": 29, "axel": 42, "b": [4, 5, 9, 15, 28, 29, 33, 35, 40], "b_": [5, 33], "b_1": 35, "b_2": 35, "b_i": [5, 33, 35], "b_m": 35, "b_n": 39, "b_q": 9, "back": [10, 35, 39], "badcodefamili": 34, "badli": 34, "ball": [6, 9], "base": [0, 1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 14, 15, 16, 19, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], "base_field": [2, 4, 19, 22, 23, 25, 30, 33, 34, 35, 36, 38], "base_function_field": 2, "base_r": 33, "basi": [2, 3, 5, 9, 28, 33, 34, 35], "basic": [0, 1, 33, 34, 35, 40], "basis_differenti": [2, 3], "basis_differential_spac": 3, "basis_funct": [2, 3], "basis_function_spac": 3, "basis_loc": 5, "bc": [5, 15], "bch": [0, 10, 13, 14, 17, 24, 33], "bch_bound": 14, "bch_code": [4, 14, 17], "bch_decod": 14, "bch_to_gr": 4, "bch_word_to_gr": 4, "bchcode": [1, 4, 10, 13, 33], "bchunderlyinggrsdecod": [4, 17], "bcn1989": 32, "bead": 40, "becaus": [9, 33], "bee": 40, "been": [5, 7, 14, 16, 31, 33, 34, 35, 37, 40], "befor": [31, 33], "begin": [4, 12], "behaviour": [1, 14, 16, 33, 37], "being": [7, 25, 27, 28, 29, 33, 37, 40, 41], "belong": [7, 9, 14, 19, 22, 25, 34, 36, 38], "below": [0, 14, 15, 32, 33, 39], "berlekamp": [9, 25], "berlekampwelch": 25, "bertrand": 35, "besid": 1, "best": [9, 15, 27, 31], "best_known_cod": 33, "best_known_linear_cod": [9, 33], "best_known_linear_code_www": 9, "best_linear_code_in_codetables_dot_d": 15, "best_linear_code_in_guava": [15, 33], "bestknownlinearcod": 15, "beta": [25, 35], "beta_": 38, "beta_1": [25, 38], "beta_2": 38, "beta_i": 25, "beta_j": 25, "beta_n": 25, "beta_q": 38, "better": [33, 38], "between": [4, 7, 9, 14, 15, 19, 25, 31, 33, 35, 38, 41], "bewar": 7, "beyond": 27, "bf": 9, "bh2012": 33, "big": [22, 35], "bigger": [9, 14, 24, 27, 31, 33, 34], "biject": [5, 19], "binari": [0, 9, 10, 13, 15, 18, 23, 24, 26, 30, 31, 33, 38, 40], "binary_cod": 5, "binarycod": 5, "binarycodeclassifi": 5, "binaryreedmullercod": [13, 38], "binom": [18, 31, 33], "binomi": 33, "binomial_mo": 33, "bipartit": 12, "bit": 10, "bitbucket": 7, "bivari": [28, 33], "blank": 37, "blanklin": [15, 40], "block": [26, 27, 33, 34, 35, 39], "blockmatrix": 12, "bm2003": 26, "bmod": 38, "bodi": 31, "boil": 5, "bold": 9, "boolean": [1, 3, 14, 15, 19, 23, 31, 32, 33, 34, 37], "borrow": 7, "both": [2, 5, 7, 14, 16, 18, 25, 27, 31, 33, 35, 37, 38, 39], "bound": [7, 14, 15, 16, 24, 33, 41], "bounded_dist": 33, "bounds_catalog": 6, "bounds_minimum_dist": 33, "bounds_on_minimum_distance_in_guava": 15, "bouyukliev": 42, "bracket": 9, "breuer": 33, "brickel": 31, "brief": 16, "bring": 34, "brouwer": 15, "bs2003": 42, "bs2011": 33, "bug": [9, 10, 33], "build": [8, 10, 13, 14, 16, 17, 19, 20, 25, 32, 33, 34, 38, 40, 41], "built": [4, 9, 25, 33, 38], "bx": 29, "c": [1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 14, 16, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], "c0": 39, "c1": [10, 14, 19, 22, 33, 34, 38], "c1x": 10, "c2": [1, 10, 11, 14, 25, 33, 34, 38], "c2x": 10, "c3": [10, 33, 34], "c3x": 10, "c4": [10, 34], "c5": 34, "c_": [11, 14, 33], "c_0": 14, "c_1": [14, 33], "c_2": 33, "c_a": 33, "c_gr": 37, "c_hamm": 35, "c_i": [4, 14, 33, 37, 41], "c_iso": 33, "c_l": 33, "c_lin": 37, "c_origin": 37, "c_out": 31, "cach": [1, 34], "calcul": [9, 35], "calibr": 31, "call": [1, 7, 9, 11, 14, 15, 16, 19, 25, 27, 30, 31, 32, 33, 34, 35, 38, 39, 41], "cambridg": 39, "camil": 35, "can": [0, 1, 2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41], "cannot": 19, "canon": [0, 5, 33, 35], "canonical_label": 11, "canonical_repres": 33, "canrep": 33, "canrep1": 33, "canrep2": 33, "canrep_iso": 33, "capabl": [25, 31], "cardin": [1, 24, 25, 33, 34], "cari": 33, "carri": 34, "cartesian": [1, 7], "cartier": 2, "cartiercod": 2, "case": [1, 4, 9, 12, 14, 19, 22, 24, 25, 30, 31, 33, 35, 38, 39, 40], "catalog": [0, 1], "catch": 19, "categori": [1, 33], "caus": 33, "caution": [22, 25, 36, 38], "cc": [14, 33, 39], "ccyc": 25, "cd": [23, 25, 33], "cdot": [22, 34], "ce": 21, "cell": [5, 12], "cen": 15, "central": 33, "certain": [1, 33], "cext": 32, "cf": [9, 12, 33], "cf1": [11, 12], "cf2": 11, "cg": [5, 34], "cgr": 4, "chan": [3, 7, 21, 25, 31, 33, 37, 41], "chang": [7, 10], "channel": [0, 3, 6, 9, 16, 21, 25, 31, 33, 37, 41], "channels_catalog": 8, "chapui": 31, "char": 33, "charact": 40, "characterist": [2, 33], "characteristic_polynomi": 33, "charalampo": 18, "charl": 33, "check": [0, 1, 4, 7, 9, 10, 13, 14, 18, 19, 21, 22, 23, 24, 25, 30, 31, 32, 33, 34, 38, 39, 41], "check_polynomi": 14, "chen": 42, "chendb": 42, "childhood": 9, "children": 5, "chinen": 33, "chinen_polynomi": 33, "choic": [1, 5, 14, 27, 30, 31, 33, 34], "choos": [1, 9, 27, 31, 33], "chose": 9, "chosen": [27, 31, 33, 37, 38], "circuit": 3, "circul": 26, "cj": 33, "class": [0, 1, 2, 3, 4, 5, 7, 11, 12, 14, 15, 16, 19, 21, 22, 23, 24, 25, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41], "classic": [2, 25, 39], "classif": 39, "classmethod": 16, "clever": [16, 19], "clist": 1, "close": [14, 33], "closest": [16, 27], "closur": 33, "cmp": 5, "coars": 16, "code": [7, 8, 16, 17, 18, 19, 20, 26, 28, 29, 40, 41], "code_bound": 9, "code_construct": [10, 26], "codecan": [11, 12, 33], "codes_catalog": 13, "codesize_upper_bound": [6, 9], "codet": [9, 15], "codeword": [1, 3, 4, 5, 6, 9, 10, 12, 14, 16, 19, 22, 24, 25, 27, 31, 32, 33, 34, 35, 36, 37, 38, 41], "codeword_matrix": 22, "codeword_vector": 22, "coding_theori": 33, "codinglib": [7, 19], "coeff": 39, "coeffici": [7, 14, 24, 25, 27, 28, 29, 33, 35, 39], "coerc": 25, "cohen": 40, "col_count": 5, "col_deg": 5, "col_ent": 5, "col_lvl": 5, "col_output": 5, "colmult": 25, "color": [11, 12], "column": [5, 11, 12, 24, 25, 26, 31, 32, 34, 35], "column_block": 12, "column_multipli": 25, "combin": [33, 37], "combinatori": 0, "come": 41, "comma": 33, "command": [33, 39], "comment": [26, 39], "common": [3, 16, 33, 35], "commonli": [16, 33], "commun": [0, 7], "compar": 33, "comparison": [16, 19], "compat": [4, 17, 26], "compil": 5, "complement": 33, "complet": [15, 16, 27, 33], "compon": [12, 25], "composit": [5, 33], "comput": [0, 1, 4, 5, 6, 9, 11, 14, 15, 18, 19, 21, 23, 24, 25, 27, 28, 31, 33, 34, 35, 36, 37, 40], "computation": [25, 27], "concret": 34, "condit": [5, 35], "confus": 33, "conjectur": 39, "connect": [3, 9, 16], "connected_encod": [2, 3, 16, 25, 27], "connected_encoder_nam": 16, "consecut": [4, 25], "consid": [7, 9, 14, 16, 25, 31, 33, 34, 35, 37, 38, 40], "consist": [9, 10, 27, 33, 40], "constant": [2, 3, 6, 10, 12, 18], "constitu": 0, "construct": [1, 2, 7, 10, 14, 15, 16, 17, 22, 25, 27, 28, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40], "construction_x": 33, "constructor": [0, 1, 3, 7, 16, 19, 27, 31, 33, 34, 40], "consum": 39, "contain": [1, 3, 4, 7, 9, 10, 12, 14, 15, 25, 26, 28, 33, 34, 35, 38, 40], "content": [9, 25], "contradictori": 37, "contrast": 0, "conveni": 7, "convent": 10, "convers": 14, "convert": [4, 22, 35], "coordin": [10, 11, 12, 25, 33, 37, 41], "coprim": [4, 14], "correct": [0, 1, 3, 5, 9, 10, 16, 18, 22, 25, 27, 31, 33, 35, 39, 41], "correctli": [9, 33], "correspond": [1, 3, 10, 12, 14, 19, 22, 23, 25, 27, 28, 33, 34, 36, 38, 40], "corrupt": 7, "coset": [10, 32, 33], "cosetgraph": 33, "cou2014": 2, "could": [11, 31, 33, 35], "count": [39, 40], "coupl": 7, "cours": [9, 14, 33, 39], "cover": [15, 23, 25, 33], "covering_radiu": [23, 25, 33], "cp": 37, "cp_gr": 37, "cp_lin": 37, "cperp": 34, "cramer": 25, "crash": 33, "creat": [1, 4, 5, 7, 14, 23, 25, 32, 34, 38, 40], "create_array_word_perm": 5, "create_comp_word_perm": 5, "create_id_word_perm": 5, "create_inv_word_perm": 5, "create_word_perm": 5, "creation": 1, "current": [15, 27, 33, 35, 40], "curv": [2, 3], "cw": 3, "cx": 33, "cyclic": [0, 4, 10, 13, 15, 17, 20, 25, 26, 33], "cyclic_cod": [14, 17, 20], "cycliccod": [1, 4, 13, 14, 15, 25, 33], "cycliccodepolynomialencod": [14, 20], "cycliccodesurroundingbchdecod": [14, 17], "cycliccodevectorencod": [14, 20], "cyclotom": [10, 14], "cyclotomic_coset": 10, "d": [1, 2, 3, 4, 5, 6, 9, 10, 11, 14, 16, 18, 21, 22, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 40, 41], "d2": 31, "d_1": 33, "d_1d_2": 33, "d_2": 33, "d_a": 33, "d_star": 18, "data": [5, 11, 15, 18, 33], "databas": [5, 33, 39], "david": [9, 10, 15, 16, 19, 26, 27, 28, 29, 31, 33, 39], "de": [9, 15], "de1973": 18, "deaf": 40, "dealloc_word_perm": 5, "dec": 3, "dec2": 3, "decis": [16, 33], "decod": [1, 2, 4, 14, 21, 22, 25, 33, 34, 35, 37, 40, 41], "decode_to_cod": [1, 2, 3, 4, 14, 16, 21, 22, 25, 27, 31, 33, 35, 37, 41], "decode_to_messag": [1, 2, 3, 16, 22, 25, 27], "decoder_k": [2, 3], "decoder_k_extens": [2, 3], "decoder_nam": 1, "decoder_typ": [16, 33, 37], "decodernam": [1, 33, 34], "decoders_avail": 1, "decoders_catalog": 17, "decoding_interv": 31, "decoding_radiu": [2, 3, 4, 14, 16, 21, 22, 25, 27, 31, 33, 35, 37, 41], "decodingerror": [3, 16, 31], "dedic": 30, "deem": 31, "def": [1, 31, 34], "default": [1, 2, 3, 4, 9, 14, 15, 16, 18, 19, 21, 22, 23, 25, 27, 28, 31, 32, 33, 34, 35, 37, 38, 41], "default_decoder_nam": [1, 2, 33, 34, 35], "default_encoder_nam": [1, 2, 33, 34, 35], "default_valu": 27, "defaultdict": 40, "defin": [0, 1, 2, 3, 4, 5, 7, 9, 10, 12, 14, 18, 19, 22, 23, 24, 29, 30, 32, 33, 34, 35, 36, 39], "defining_set": [4, 14, 24], "definit": [10, 14, 16, 22, 23, 26, 27, 32, 33, 35, 38], "defn": [14, 33, 41], "deg": [22, 25, 38], "degre": [4, 5, 11, 14, 22, 24, 25, 28, 29, 35, 38], "delet": 33, "delsart": [0, 6, 9], "delsarte_bound": 18, "delsarte_bound_additive_hamming_spac": [6, 18], "delsarte_bound_constant_weight_cod": [6, 18], "delsarte_bound_hamming_spac": [6, 18], "delsarte_bound_q_matrix": [6, 18], "delta": [4, 9, 14], "demonstr": 34, "denot": [9, 10, 12, 22, 25, 33, 39], "depend": [14, 16, 22, 31, 33, 34], "deprec": 33, "deriv": [4, 12, 15, 28], "describ": [11, 12, 15, 16, 25, 31, 33], "descript": [12, 31, 35], "descriptor": 16, "design": [1, 2, 4, 14, 16, 19, 33, 34, 35], "designed_dist": [2, 3, 4], "detail": [1, 9, 11, 12, 14, 15, 21, 25, 27, 28, 29, 31, 33, 34, 35, 38], "detect": [3, 34, 36], "detect_decoding_failur": 3, "detect_q_polynomi": 3, "determin": [9, 16, 24, 25, 27, 31, 33], "develop": 12, "devic": 36, "dgr": [4, 21], "di2000": 42, "diag": 39, "diagon": [12, 39], "diagram": 1, "dict": [1, 31], "dictionari": [1, 31, 33, 34, 39, 40], "did": 33, "differ": [14, 16, 19, 25, 31, 33, 34, 35, 40], "differenti": [2, 3, 17], "differentialagcod": [2, 3], "differentialagcodedecoder_k": [2, 3], "differentialagcodedecoder_k_extens": [2, 3], "differentialagcodeencod": [2, 3], "differentialagcodeuniquedecod": [2, 3, 17], "digit": 36, "digraph": 40, "dim": [33, 39], "dima": [9, 18, 26], "dimens": [1, 2, 4, 5, 6, 7, 9, 10, 11, 14, 15, 16, 18, 19, 22, 24, 25, 26, 27, 30, 31, 33, 34, 35, 36, 37, 38, 41], "dimension": 33, "dimension_lower_bound": 41, "dimension_upper_bound": [6, 9, 41], "direct": 33, "direct_sum": 33, "direct_sum_cod": 33, "directli": [1, 7, 17, 21, 22, 25, 27, 31, 33, 35, 36, 38], "disabl": [1, 19], "discret": [12, 39], "discuss": 10, "disjoint": [2, 5, 9], "displai": [15, 33], "dist": [6, 18], "distanc": [0, 2, 4, 6, 9, 10, 14, 15, 16, 18, 22, 23, 24, 25, 27, 29, 30, 31, 32, 33, 35, 36, 38], "distance_bound": 24, "distinct": [25, 34], "distinguish": 9, "distribut": [1, 5, 7, 10, 18, 23, 25, 33], "divid": [9, 14, 25], "divis": [5, 15], "divisor": [2, 3, 33], "dm": 24, "dmitrii": 18, "do": [0, 1, 4, 5, 7, 11, 16, 18, 19, 31, 33, 34], "doc": [9, 31, 33], "docstr": [10, 26, 33], "doctest": [3, 33, 34], "document": [1, 11, 30, 31, 32, 33, 34, 35, 39], "doe": [1, 5, 7, 14, 16, 19, 21, 22, 25, 27, 31, 33, 34, 36, 37, 38, 40], "doesn": 14, "don": [10, 31, 33], "done": [7, 31], "dor": 37, "dot": [4, 14, 21, 22, 25, 31, 36, 38], "doubl": [33, 39], "doubli": [5, 15], "down": [5, 41], "download": 15, "dqdx": 28, "dqdy": 28, "draw": 7, "drawn": 10, "du2001": 33, "du2004": 33, "duadic": [10, 13], "duadiccodeevenpair": [10, 13], "duadiccodeoddpair": [10, 13], "dual": [0, 2, 4, 11, 14, 18, 22, 23, 25, 26, 33, 34], "dual_cod": [2, 10, 11, 12, 22, 23, 25, 33, 34, 39], "dualcod": 15, "dualiti": 10, "dualrepetitioncod": 34, "due": [1, 9, 33], "dummi": 1, "duplic": 12, "dure": [5, 16, 19], "duursma": 33, "dynam": [16, 33], "e": [2, 5, 6, 7, 9, 10, 12, 14, 16, 18, 19, 21, 22, 24, 25, 27, 28, 31, 33, 34, 35, 36, 37, 38, 40], "e1": 38, "e2": [34, 38], "e3": 34, "e_1": 10, "e_d": 10, "e_i": 33, "each": [1, 2, 5, 7, 12, 15, 19, 24, 28, 31, 33, 35, 39, 40], "earli": [3, 25], "easi": 33, "easiest": [31, 39], "easili": [28, 31, 35], "eberlein": [6, 18], "eberlein_polynomi": 18, "echelon": 34, "echelon_form": [11, 12], "edit": 9, "effect": 5, "effici": [25, 31], "eierhffcoeft": 40, "either": [1, 5, 7, 9, 10, 14, 16, 25, 27, 31, 33, 35, 37, 38, 40], "element": [1, 4, 5, 6, 7, 9, 10, 11, 12, 14, 16, 19, 21, 23, 24, 25, 26, 27, 33, 34, 35, 37, 38, 40], "elia": [6, 9], "elias_bound_asymp": [6, 9], "elias_upper_bound": [6, 9], "ell": [4, 9, 28], "ellipsi": 34, "els": [16, 29, 37], "elsewher": [7, 39], "embed": [14, 41], "emploi": 31, "empti": [29, 33, 39, 40], "en": 33, "enabl": 1, "enc": 3, "enc2": 3, "encod": [0, 1, 2, 3, 14, 16, 21, 22, 24, 25, 27, 33, 34, 35, 36, 37, 38], "encoder_nam": [1, 33, 34, 35, 37], "encodernam": [1, 33, 34], "encoders_avail": 1, "encoders_catalog": 20, "encoding_t": 40, "encodingerror": 19, "encourag": 33, "end": [4, 31, 33], "endomorph": [22, 33], "endow": 33, "enforc": 1, "ensur": [5, 18, 33, 36], "entir": [9, 35], "entri": [12, 18, 23, 24, 25, 35, 39], "entropi": [6, 9], "entropy_invers": 9, "enumer": [0, 1, 33], "epsilon": 7, "equal": [4, 9, 12, 15, 18, 24, 25, 33, 34, 38, 39], "equat": [4, 25, 27, 28, 29, 32], "equiv": 26, "equival": [5, 9, 11, 12, 15, 22, 33, 34, 39], "eras": [7, 25], "erasur": [7, 25, 37], "eric": 42, "erron": 7, "error": [0, 1, 4, 7, 9, 14, 15, 16, 18, 19, 21, 22, 25, 27, 28, 31, 33, 34, 35, 36, 37, 38, 39, 41], "error_posit": 7, "error_prob": 7, "errorerasur": 25, "errorerasurechannel": [7, 8, 25], "essenti": [5, 31], "estim": [9, 31], "etc": [33, 34, 35], "euclidean": 25, "eval": 10, "evalpt": 25, "evalu": [2, 3, 4, 10, 17, 22, 25, 38], "evaluation_point": [22, 25], "evaluationagcod": [2, 3], "evaluationagcodedecoder_k": [2, 3], "evaluationagcodedecoder_k_extens": [2, 3], "evaluationagcodeencod": [2, 3], "evaluationagcodeuniquedecod": [2, 3, 17], "evaluationpolynomi": [25, 38], "evaluationvector": [25, 38], "even": [5, 10, 13, 15, 16, 18, 33, 34, 36, 37, 39], "everi": [1, 14, 16, 19, 31, 33, 34, 35, 37], "exact": [7, 18], "exactli": [4, 7, 12, 14, 25, 33, 34, 40], "exampl": [1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], "exce": [25, 33], "except": [1, 3, 7, 16, 18, 19, 25, 27, 31, 34, 39], "exemplifi": 34, "exercis": 10, "exist": [9, 10, 14, 33], "expand": 14, "expans": [5, 39], "expect": [7, 16, 27, 31], "explain": [4, 15], "explan": 15, "explicit": 28, "explicitli": [31, 33], "expon": 14, "exponenti": [31, 33, 35], "express": 25, "extend": [0, 10, 13, 17, 18, 20, 23, 25, 31, 32, 33], "extended_cod": [10, 17, 20, 21, 32, 33, 34], "extendedcod": [13, 21, 33], "extendedcodeextendedmatrixencod": [20, 21], "extendedcodeoriginalcodedecod": [17, 21], "extendedquadraticresiduecod": [10, 13], "extens": [0, 3, 4, 10, 14, 21, 25, 31, 32, 33, 35], "extension_degre": 35, "extra": [1, 4, 14, 21, 33, 37, 41], "extract": 14, "extran": 33, "f": [1, 2, 3, 4, 7, 9, 10, 14, 15, 19, 22, 24, 25, 26, 27, 28, 29, 30, 33, 35, 38, 39, 40], "f0": 33, "f_": [18, 22], "f_0": 33, "f_q": 14, "fab": 40, "facad": 1, "fact": [10, 39], "factor": [9, 26, 33], "fail": [1, 3, 16, 31, 33, 37], "failur": 3, "fals": [1, 3, 14, 15, 16, 18, 19, 21, 23, 25, 27, 31, 32, 33, 34, 37, 38], "famili": [1, 35], "famou": 0, "fashion": 1, "fast": [3, 10, 25, 33], "faster": [33, 35], "favorit": 40, "feasibl": 18, "featur": [33, 35], "feed": 40, "feedback": 9, "feu2009": [11, 12], "feulner": [11, 12, 33], "few": 31, "fgr": 4, "field": [0, 1, 2, 3, 4, 5, 7, 9, 10, 14, 15, 16, 19, 22, 23, 24, 25, 26, 27, 28, 30, 31, 33, 34, 35, 36, 37, 38, 41], "field_embed": 14, "field_extens": 35, "figsiz": 40, "file": [1, 7, 10, 33, 34, 35, 38], "filip": 24, "fill": [1, 7, 33, 34, 37], "final": [1, 4, 12, 14, 33], "find": [5, 6, 9, 11, 14, 18, 25, 27, 28], "find_generator_polynomi": 14, "fine": 34, "finish": 11, "finit": [0, 1, 2, 4, 7, 9, 10, 14, 15, 16, 19, 22, 24, 25, 33, 34, 35, 36, 38, 41], "first": [1, 4, 6, 9, 14, 22, 25, 26, 27, 28, 31, 33, 34, 36, 41], "fix": [5, 7, 9, 10, 18, 22, 26, 33, 38], "floor": 9, "follow": [0, 1, 5, 7, 14, 16, 19, 22, 25, 26, 27, 28, 31, 32, 33, 34, 38, 39, 40], "foral": [14, 22, 34, 41], "forc": 37, "forget": [1, 33], "form": [0, 5, 14, 19, 22, 26, 31, 33, 34, 35, 39], "formal": 18, "format": [7, 39, 40], "format_interv": 7, "former": 33, "formula": [25, 33], "forward": [0, 1, 3, 4, 14, 21, 28, 33, 34, 35, 37, 41], "found": [0, 31, 33, 35, 40, 42], "four": 23, "fq": 22, "fqm": 22, "frac": [7, 9, 14, 25, 30, 33], "fraction": 31, "framework": [1, 33], "free": 27, "free_modul": 37, "french": 40, "frequenc": 40, "frequency_t": 40, "fri": 40, "friendli": 31, "frob_pow": 12, "frobeniu": [12, 22, 33], "from": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42], "from_matrix": 35, "from_matrix_represent": 35, "from_parity_check_matrix": [10, 13], "front": 5, "fry": 40, "ft": 40, "full": [2, 10, 33, 34], "functiom": 2, "function": [0, 1, 2, 3, 5, 7, 9, 10, 11, 12, 18, 19, 25, 27, 33, 35, 39], "function_field": [2, 3], "fundament": 39, "further": [1, 12, 15], "furthermor": [11, 12, 28], "fx": [25, 38], "g": [1, 2, 3, 5, 7, 9, 10, 11, 12, 14, 16, 19, 22, 24, 25, 26, 28, 31, 33, 34, 35, 37, 39, 40], "g1": 34, "g2": 34, "g_": [12, 22, 25, 31], "g_0": 22, "g_1": 22, "g_i": 31, "ga02": 25, "gab": 22, "gabidulin": 0, "gabidulin_cod": 22, "gabidulincod": 22, "gabidulingaodecod": 22, "gabidulinpolynomialevaluationencod": 22, "gabidulinvectorevaluationencod": 22, "gal": 33, "galoi": 33, "galois_closur": 33, "game": 9, "gamma": 11, "gamma_c": 33, "gao": [21, 22, 25, 37, 41], "gap": [0, 9, 10, 13, 15, 24, 32, 33], "gap_package_guava": [9, 10, 15, 26, 33, 34], "gap_rec": 15, "garnier": 35, "gcd": [14, 32], "gen": [4, 14, 22, 28, 34, 35, 39], "gener": [0, 1, 2, 4, 5, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 31, 32, 36, 37, 38, 39, 40], "generalizedreedsolomoncod": [1, 4, 10, 13, 14, 21, 25, 27, 33, 37, 41], "generate_children": 5, "generating_pol": 24, "generator_matrix": [2, 4, 5, 10, 11, 12, 14, 15, 19, 21, 22, 23, 24, 25, 32, 33, 34, 35, 36, 37, 38], "generator_matrix_systemat": 33, "generator_pol": [14, 33], "generator_polynomi": [4, 14, 25], "generatormatrix": 1, "generic_graph": 11, "genericgraph": 11, "genu": 33, "geometr": 11, "geometri": [2, 11, 30], "geq": [9, 12, 14, 33], "get": [10, 11, 12, 21, 31, 33, 35, 37, 39, 40], "get_autom_gen": [11, 12], "get_autom_ord": 11, "get_autom_order_inner_stabil": 12, "get_autom_order_permut": 12, "get_canonical_form": [11, 12], "get_frob_pow": 12, "get_perm": 11, "get_pgammal_gen": 11, "get_pgammal_ord": 11, "get_plac": [2, 3], "get_transport": [11, 12], "get_valu": 18, "gf": [1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41], "gf2x": 14, "gg": 33, "gilbert": [6, 9], "gilbert_lower_bound": [6, 9], "gilt": 29, "give": [5, 9, 14, 19, 27, 31, 33, 38], "given": [3, 4, 7, 9, 10, 11, 12, 15, 25, 27, 28, 30, 31, 32, 33, 34, 35, 38, 39, 40], "gl": [11, 12], "glb": 9, "global": [6, 8, 13, 14, 17, 20], "glue": 5, "go": 35, "golai": [0, 9, 13, 18, 26, 31, 33], "golay_cod": 23, "golaycod": [1, 5, 13, 23, 31, 33, 34], "good": [1, 31, 34, 38], "gop1981": 2, "goppa": [0, 2, 13], "goppa_cod": 24, "goppacod": [1, 13, 24], "goppacodeencod": 24, "govern": 27, "gp": [33, 39], "gpl": 10, "gr": [4, 14, 25, 27, 28, 37], "graph": [5, 11, 12, 32, 33, 40], "graphic": 9, "grassl": 9, "greater": [9, 10, 29, 33], "greatest": [15, 29, 33], "griesmer": [6, 9], "griesmer_upper_bound": [6, 9], "group": [4, 5, 10, 11, 15, 26, 33, 34, 39], "grow": 39, "grs_code": [4, 10, 17, 20, 25], "grs_decod": 4, "grs_word_to_bch": 4, "grsberlekampwelchdecod": [17, 25], "grserrorerasuredecod": [17, 25], "grsevaluationpolynomialencod": [20, 25], "grsevaluationvectorencod": [20, 25], "grsgaodecod": [17, 25], "grsguruswamisudandecod": [17, 27], "grskeyequationsyndromedecod": [17, 25], "gs1999": 27, "gs_decod": [17, 27], "gs_interpolation_lee_osullivan": [27, 28], "gs_interpolation_linalg": [27, 28], "gs_satisfactori": 27, "gsd": 27, "gu": 33, "guarante": [5, 7, 16, 24, 31, 33, 34], "guava": [0, 9, 10, 13, 15, 33], "guess": 31, "guruswami": 0, "guruswami_sudan": [17, 27, 28, 29], "guruswami_sudan_decoding_radiu": 27, "guruswamisudan": [4, 21, 27], "gv": 10, "gv_bound_asymp": [6, 9], "gv_info_r": [6, 9], "h": [4, 10, 11, 14, 24, 34, 40], "h1": 40, "h2": 40, "h3": 40, "h_q": [6, 18], "ha": [0, 1, 4, 5, 7, 9, 10, 14, 16, 21, 25, 26, 27, 28, 31, 33, 34, 35, 37, 40, 41], "hadamard": 10, "hadamard_matrix": 10, "half": [16, 27, 33], "ham": [0, 1, 6, 9, 10, 13, 16, 18, 25, 27, 31, 34, 35], "hamming_bound_asymp": [6, 9], "hamming_cod": [30, 33], "hamming_upper_bound": [6, 9], "hamming_weight": [3, 4, 7, 27, 31, 33], "hammingcod": [1, 10, 11, 12, 13, 30, 33, 34], "handl": [1, 9, 33], "hansen": 33, "harald": 33, "hard": [16, 25, 33], "hat": 21, "have": [1, 5, 10, 12, 14, 15, 16, 18, 19, 23, 25, 31, 32, 33, 34, 35, 37, 38, 39], "heavi": 5, "help": [1, 31], "helper": [7, 27], "henc": [9, 12, 40], "here": [4, 9, 10, 12, 25, 26, 31, 33, 34, 39], "hexacod": 33, "hgv": 10, "high": 25, "higher": [27, 29], "highest": 14, "highli": 1, "hit": 10, "hj2004": 25, "hold": [9, 33, 39], "hom": 33, "homogen": 33, "homomorph": [12, 22, 41], "hope": 33, "how": [1, 25, 27, 31, 33, 34, 35, 40], "howev": [1, 5, 7, 33, 35], "hp2003": [9, 10, 21, 23, 30, 33, 39], "html": [18, 33], "http": [7, 9, 15, 18, 33, 39], "huffman": [0, 33, 39], "human": 39, "hyperplan": 12, "hypothes": 33, "hypothesi": [33, 39], "i": [0, 1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], "i_": 39, "i_1": 29, "i_2": 29, "idea": [12, 33], "ident": [5, 26, 34, 39], "identifi": [11, 25], "ie": 33, "iff": [4, 10], "ii": [33, 39], "ij": 38, "illustr": 33, "ilp": 18, "imag": 10, "immedi": 23, "immut": 34, "implement": [0, 1, 2, 3, 7, 8, 9, 11, 12, 14, 16, 18, 19, 24, 25, 27, 28, 29, 31, 32, 33, 34, 35, 38, 39, 40], "implic": 40, "implicitli": [1, 5], "import": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], "imposs": 25, "improv": [18, 33], "in_test": 15, "incid": 12, "includ": [9, 25, 31], "inclus": 33, "incorrect": 1, "incorrectli": [1, 33], "inde": [14, 33], "independ": [1, 7, 22, 33], "index": [0, 10, 31, 34, 38], "indic": [3, 12, 16, 19, 31, 33, 34], "indirect": [3, 34], "indirect_doctest": 22, "indirectli": 9, "individu": [7, 31, 33], "inequiv": 39, "inequival": 39, "infeas": 31, "infin": 9, "infinit": [7, 10], "influenc": 33, "info": [2, 3, 33, 34], "inform": [0, 1, 3, 6, 8, 9, 12, 16, 32, 33, 34, 40], "information_set": [33, 34], "information_set_decod": [1, 17, 31], "informationset": [1, 31], "informationsetalgorithm": 31, "infti": 39, "inherit": [0, 1, 7, 16, 19, 33, 34, 35], "initi": [2, 3, 9, 10, 11, 12, 16, 18, 19, 22, 24, 26, 31, 32, 33, 35, 40], "inner": [7, 12, 33, 34], "innergroup": 12, "input": [1, 2, 3, 4, 5, 7, 9, 10, 12, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41], "input_spac": [1, 7, 16], "instanc": [1, 4, 14, 16, 33, 34, 35, 40], "instanti": [1, 16, 19, 33, 34, 35], "instead": [1, 9, 12, 16, 25, 27, 33, 38, 40], "instruct": [1, 35], "int": 40, "integ": [1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], "intend": 35, "intens": 27, "interest": [11, 12, 23], "interfac": [4, 33], "intern": [16, 27], "internet": 15, "interpol": [0, 27], "interpolation_alg": 27, "interpolation_algorithm": 27, "interpolation_point": 27, "interpret": [11, 12, 24, 33], "intersect": [12, 32], "interv": [9, 31], "introduc": 18, "invalid": [15, 18, 32], "invari": [0, 12, 33], "invers": [1, 5, 9, 19, 24], "investig": [1, 33, 35], "involv": [5, 33], "ioerror": 15, "ion": 24, "is_distance_regular": 33, "is_equival": 33, "is_galois_clos": 33, "is_gener": 25, "is_in_cach": 1, "is_information_set": 34, "is_isomorph": 33, "is_permutation_automorph": 34, "is_permutation_equival": 33, "is_project": 33, "is_self_du": [33, 34], "is_self_orthogon": [10, 33, 34], "is_subcod": [33, 34], "is_zero": 28, "isd": 31, "isinteg": 18, "isirreduc": 33, "isometr": 12, "isometri": 11, "isomorph": 33, "isoverfinitefield": 33, "issu": [7, 33, 38], "item": [1, 18, 40], "iter": [15, 35], "its": [1, 5, 7, 9, 11, 12, 14, 15, 16, 19, 22, 24, 25, 27, 28, 29, 31, 33, 34, 35, 36, 37, 38, 41], "itself": [5, 7, 31, 33, 35], "ivo": 32, "j": [4, 18, 25, 32, 33, 38, 39], "jeffrei": [12, 33], "johan": [7, 27, 28, 29, 31], "johnson": [9, 27, 29, 33], "johnson_radiu": 29, "joy2004": 10, "joyner": [9, 10, 15, 16, 26, 33, 39], "jsrn": 7, "jump": 4, "jump_siz": 4, "just": [1, 11, 16, 19, 27, 33, 35], "juxtapos": 33, "juxtaposit": 33, "k": [1, 2, 3, 5, 6, 9, 10, 11, 12, 14, 15, 18, 19, 22, 24, 25, 26, 27, 30, 31, 33, 34, 35, 36, 38, 41, 42], "k_": 33, "k_1": 33, "k_1k_2": 33, "k_2": 33, "k_a": 33, "kas1966a": 32, "kas1966b": 32, "kas1971": 32, "kasami": [0, 13], "kasami_cod": 32, "kasamicod": [13, 32, 33], "keep": 5, "kei": [1, 4, 25, 39, 40], "kept": [1, 25, 33, 34, 35, 37], "kernel": 34, "keyequationsyndrom": [4, 25], "keyword": [1, 31, 33], "kind": 2, "know": [1, 4, 12, 31, 33, 34], "knowledg": [0, 33, 34, 35], "known": [1, 2, 9, 10, 14, 15, 18, 23, 31, 33], "known_algorithm": 31, "koh2007": 42, "kohnert": 42, "kokkali": 18, "kravchuk": [6, 18], "kravchuk_polynomi": 18, "krawtchouk": [6, 18], "kwankyu": [2, 3, 33], "kwarg": [1, 3, 4, 14, 16, 21, 31, 33, 34, 35, 37, 41], "kwd": [1, 33, 37], "l": [5, 10, 11, 14, 15, 18, 22, 24, 27, 33, 40], "la": 10, "label": [5, 16], "lagrang": 28, "laigl": 31, "lambda": [9, 33], "languag": 12, "larg": [9, 10, 27, 31, 38], "larger": [15, 27, 33], "largest": [9, 14, 31], "last": [1, 7, 9, 10, 15, 19, 25, 27, 31, 32, 33, 34, 35, 38], "latest": 33, "latex": 33, "latter": 33, "lattic": 10, "lb1988": 31, "lbo2014": 3, "lc": 28, "lceil": 9, "lcse": 34, "ldot": [1, 11, 12, 25, 35, 38], "le": [4, 25], "lead": 34, "learn": 33, "least": [0, 5, 18, 28, 29, 31, 33, 40], "lee": [2, 3, 27, 28, 31, 33], "lee2016": 3, "lee_osullivan_modul": 28, "leebrickellisdalgorithm": 31, "leeosullivan": 27, "left": [5, 9, 10, 12, 25, 33, 35, 37], "leftrightarrow": 14, "lemma": 9, "len": [3, 5, 12, 27, 29, 33, 34, 39], "length": [1, 2, 4, 5, 7, 9, 10, 11, 14, 15, 18, 21, 22, 24, 25, 26, 27, 29, 30, 33, 34, 35, 36, 38, 39], "leon": [12, 33], "leq": [9, 11, 12, 22, 25, 31, 32, 33, 38], "less": [14, 22, 25, 27, 28, 33, 34, 38], "let": [4, 9, 10, 11, 12, 14, 21, 22, 25, 28, 31, 33, 35, 37, 38, 39, 40, 41], "letter": [10, 40], "level": [0, 1, 33, 34], "lfloor": 25, "lib": [9, 10, 14, 24, 32, 33], "libgap": [15, 26, 33], "librari": [0, 33], "licens": 10, "lie": [4, 9], "lighter": 7, "ligt": 29, "like": [0, 9, 10, 13, 16, 25, 33, 40], "limit": [5, 9, 33], "lin": 9, "lin1999": [9, 33], "line": [1, 33, 34], "linear": [1, 2, 5, 6, 9, 13, 14, 15, 16, 19, 21, 22, 23, 25, 26, 27, 28, 37, 39, 41], "linear_cod": [1, 10, 17, 20, 31, 32, 33, 34, 35, 37], "linear_code_no_metr": [1, 19, 20, 23, 34, 37], "linear_rank_metr": 35, "linearalgebra": 27, "linearcod": [1, 10, 11, 15, 16, 19, 21, 31, 34, 35, 37], "linearcode_from_vectorspac": 33, "linearcodeautgroupcanlabel": [11, 12], "linearcodefromcheckmatrix": 10, "linearcodefromvectorspac": 33, "linearcodegeneratormatrixencod": [1, 19, 20, 33, 35, 36], "linearcodeinformationsetdecod": [1, 17, 31], "linearcodenearestneighbordecod": [1, 17, 33], "linearcodesyndromedecod": [16, 17, 33], "linearcodesystematicencod": [1, 20, 34], "linearli": [22, 33], "linearrankmetriccodenearestneighbordecod": 35, "link": [1, 33, 34], "list": [0, 1, 2, 3, 4, 5, 7, 10, 11, 12, 14, 15, 16, 18, 21, 22, 23, 24, 25, 27, 28, 29, 31, 33, 34, 37, 38, 39, 41], "list_siz": 27, "load": [14, 33], "loadpackag": 15, "locat": [25, 33], "log": [9, 31], "log_q": 9, "logarithm": 9, "logic": 16, "long": [2, 3, 7, 15, 18, 31, 33], "longest": 14, "look": [15, 33, 35, 40], "lookup": 33, "loop": [7, 31, 39], "lot": [33, 34, 35], "low": [0, 28, 31], "lower": [6, 9, 12, 15, 16, 18, 24, 33, 41], "lowerbound": 15, "lowerboundexplan": 15, "lowest": 38, "lp": [9, 18], "luca": [16, 19, 27, 28, 29, 31], "m": [5, 9, 10, 14, 18, 19, 22, 24, 25, 27, 31, 32, 33, 34, 35, 37, 38, 39, 40], "m0": 10, "m1": 38, "m11": 33, "m2": 38, "m_": 33, "m_1": [14, 25, 31, 36, 39], "m_2": [14, 36, 39], "m_i": [14, 25, 31, 36, 39], "m_k": [14, 25, 36], "m_p": 31, "m_r": 39, "made": [31, 33], "maffei": 32, "magma": 33, "mai": [4, 6, 8, 9, 11, 13, 15, 17, 20, 31], "main": [9, 35, 39], "maintain": 12, "make": [1, 5, 9, 18, 19, 22, 28, 31, 33, 35], "mandatori": [7, 19], "mani": [7, 25, 27, 31, 33, 34, 35], "manner": 7, "manual": 1, "map": [1, 3, 5, 10, 11, 12, 31, 33], "mapsto": 5, "marketa": [22, 24, 35], "marku": 9, "mat": 12, "mat2": 12, "match": 31, "math": [33, 39], "mathemat": [0, 1, 35], "mathieu": 33, "mathieugroup": 33, "mathrm": [4, 10], "matric": [0, 10, 12, 23, 33, 34, 35, 39], "matrix": [0, 1, 2, 5, 6, 9, 10, 12, 14, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41], "matrix_form_of_vector": 35, "matrix_from_row": 34, "matrixautomorph": 33, "matrixspac": [10, 33, 34, 39], "mattson": 33, "maxd": 27, "maxim": [4, 14, 15, 16, 21, 25, 27, 31, 33, 35, 37, 41], "maximum": [9, 22, 25, 33, 38], "maximum_error_weight": 33, "mayb": 10, "mcelies": [6, 9], "md": [9, 22, 25], "mean": [9, 15, 27, 33, 34, 35], "meatax": 33, "mechan": 1, "meet": 9, "member": [1, 11, 33], "memori": [16, 19], "memoryless": 7, "merchant": 22, "messag": [1, 3, 7, 8, 14, 16, 19, 22, 25, 27, 31, 33, 34, 35, 36, 37, 38], "message_spac": [1, 3, 14, 16, 19, 22, 25, 34, 36, 38], "method": [0, 1, 7, 9, 12, 14, 15, 16, 17, 19, 21, 22, 23, 25, 26, 27, 31, 33, 34, 35, 36, 37, 38, 40, 41], "metric": [0, 1, 9, 16, 19, 22], "mid": [25, 32, 36, 38], "might": [1, 7, 14, 16, 19, 30, 33, 34], "mike": 33, "miller": [5, 33], "min": [6, 9, 18, 33], "min_dist": 33, "mine": 33, "minim": [5, 6, 12, 18, 31, 33], "minimalisd": 31, "minimum": [0, 4, 5, 9, 10, 14, 15, 16, 22, 23, 24, 25, 27, 29, 30, 31, 33, 35, 36, 38], "minimum_dist": [2, 10, 22, 23, 24, 25, 30, 32, 33, 35, 36, 38, 39], "minimumweight": 33, "minor": [9, 18], "mip": 9, "misbehav": 33, "miss": 1, "mixedintegerlinearprogram": 18, "mm": 38, "mod": [10, 26], "mode": 33, "model": 11, "modifi": [0, 6, 7, 14, 15, 18, 33], "modul": [1, 3, 9, 18, 22, 24, 26, 28, 32, 33, 34, 35, 37, 39, 40, 42], "module_composition_factor": 33, "module_decod": 33, "modulo": [10, 14], "moment": 33, "monic": [11, 14, 24, 28], "monomi": [11, 38], "more": [1, 5, 7, 9, 10, 11, 12, 16, 19, 25, 27, 31, 32, 33, 35], "morphism": [14, 41], "most": [1, 7, 9, 15, 16, 19, 22, 23, 25, 27, 31, 32, 33, 34, 35, 38, 39, 40], "mostli": [31, 33, 35], "mrrw1_bound_asymp": [6, 9], "mrrw2_bound_asymp": 9, "ms2011": 23, "msg": [3, 7], "much": 33, "muller": [0, 13, 33], "multi": 10, "multipl": [1, 4, 5, 9, 12, 14, 27, 28], "multipli": [4, 25], "multiplicative_ord": 25, "multipliers_product": 25, "multiset": [11, 33], "multivari": 38, "must": [1, 4, 7, 9, 10, 14, 15, 19, 24, 25, 27, 31, 32, 33, 34, 35, 38, 40], "mu\u00f1oz": 35, "mw": 23, "my": 40, "my_int": 27, "my_rootfind": 27, "myabstractcod": 34, "mycod": [1, 34], "mycodefamili": 1, "mydecod": 1, "mydecoderclass": [1, 33, 34], "mydecodernam": [1, 33, 34], "myencod": 1, "myencoderclass": [1, 33, 34], "myencodernam": [1, 33, 34], "mynewcodeclass": [1, 33, 34], "mysteri": 33, "n": [1, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 18, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 38, 39, 40, 41, 42], "n_1": 33, "n_1n_2": 33, "n_2": 33, "n_a": 33, "n_era": [7, 25], "n_err": 7, "n_k": 27, "n_k_param": 27, "naiv": 39, "name": [1, 2, 3, 4, 6, 7, 8, 11, 13, 14, 17, 20, 31, 33, 34, 35, 37], "nameofmydecod": [1, 33, 34], "nameofmyencod": [1, 33, 34], "namespac": [6, 8, 13, 14, 17, 20], "narrow": 24, "nathann": 40, "nativ": [27, 33], "natur": [2, 11, 16], "ncol": [5, 12], "nearest": [31, 33, 35], "nearestneighbor": 1, "necessari": 17, "necessarili": [1, 9, 34, 40], "need": [1, 4, 5, 9, 10, 14, 15, 16, 18, 19, 21, 24, 25, 27, 29, 31, 32, 33, 34, 37, 40], "neg": 29, "neighbor": 31, "neither": 27, "never": [7, 9, 31, 33, 35], "new": [1, 5, 7, 14, 25, 33, 34, 35], "newli": 33, "next": [10, 39], "nice": [5, 34], "nick": [26, 33], "nie": [19, 27, 28, 29], "nie2013": 27, "nielsen": [7, 27, 28, 29], "nile": 33, "nl": 18, "nocheck": [1, 19], "noisi": 3, "nomenclatur": 7, "non": [1, 3, 6, 9, 10, 19, 25, 31, 33, 34, 35, 38, 40], "none": [1, 2, 3, 4, 5, 9, 11, 14, 15, 21, 22, 25, 27, 28, 31, 33, 34, 35, 37, 38, 40, 41], "nonexistingencod": 1, "nonlinear": 9, "nonneg": [18, 33, 40], "nontrivi": 12, "nonzero": [7, 9, 10, 18, 25, 33], "nonzero_posit": 33, "normal": 33, "nosuchth": 31, "notat": [10, 33], "note": [1, 2, 5, 7, 18, 19, 25, 27, 30, 31, 33, 35, 38, 39], "notic": 33, "notimplementederror": [1, 33], "notion": [1, 8, 11, 33, 35], "nov": 5, "now": [1, 3, 14, 33, 37, 38], "nrow": 5, "ntl": 14, "num_of_var": 38, "number": [0, 1, 4, 6, 7, 9, 14, 16, 18, 21, 23, 24, 25, 27, 28, 29, 31, 33, 34, 35, 37, 38, 39, 40, 41], "number_erasur": [7, 25, 37], "number_error": [1, 7, 31], "number_of_vari": 38, "numer": [9, 31, 40], "nword": 5, "o": [2, 3, 27, 28, 40], "object": [0, 1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 31, 33, 37, 41], "obtain": [5, 9, 10, 14, 15, 22, 25, 27, 32, 33, 36, 39, 40], "obvious": 40, "occur": [10, 15, 18, 31], "occurr": 40, "oct": 5, "odd": [10, 13], "oei": 39, "offer": 1, "offset": 4, "often": [9, 14, 25], "old": [4, 33], "omit": 2, "onc": [34, 37, 39, 40], "one": [0, 1, 3, 7, 9, 10, 11, 12, 14, 16, 21, 25, 27, 28, 30, 31, 33, 34, 35, 36, 37, 38, 40], "ones": [1, 5], "onli": [0, 1, 4, 5, 7, 9, 11, 14, 15, 16, 18, 19, 23, 26, 27, 29, 31, 32, 33, 35, 37, 38, 39, 40], "onlin": 0, "onto": 33, "oper": [7, 14, 15, 33, 35], "operatornam": 10, "oppos": [1, 25], "opposit": 36, "optim": [0, 31, 33], "option": [1, 3, 9, 10, 11, 14, 15, 16, 21, 26, 31, 33, 34, 37, 41], "orbit": [5, 11, 33], "orbitpartit": 5, "order": [4, 5, 10, 11, 12, 14, 15, 27, 30, 31, 33, 38, 39, 40], "org": [7, 33, 39], "origin": [5, 21, 25, 27, 28, 29, 31, 33, 37, 40, 41], "original_cod": [21, 37, 41], "original_decod": [21, 37, 41], "original_encod": 37, "orthogon": [4, 15, 26, 33, 34, 39], "other": [0, 1, 2, 5, 7, 15, 18, 31, 33, 34, 39], "otherwis": [5, 14, 18, 23, 27, 28, 33, 34, 37], "our": [1, 12, 40], "out": 33, "output": [1, 2, 4, 5, 7, 9, 10, 14, 15, 16, 19, 22, 23, 25, 26, 27, 31, 33, 34, 35, 36, 37, 38, 40], "output_spac": 7, "outsid": 19, "over": [0, 1, 2, 3, 4, 5, 7, 9, 10, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 34, 36, 37, 38, 39, 40, 41], "overflow": 18, "overlap": 7, "overnight": 10, "overrid": [1, 7, 16, 19, 31, 33], "overridden": [31, 33], "overwritten": 19, "own": [0, 18, 27, 31], "p": [2, 3, 5, 10, 11, 12, 14, 18, 22, 24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 38, 39, 40], "p1": 12, "p2": [11, 12], "p_i": 28, "p_m": 14, "pack": 9, "packag": [0, 9, 15, 33], "page": [0, 27, 30, 33, 39], "pair": [10, 13, 27, 28, 31, 33], "paper": 33, "paradigm": 31, "paragraph": 30, "param": 28, "paramet": [1, 4, 7, 11, 14, 15, 16, 18, 19, 22, 27, 28, 31, 32, 33, 35, 38], "parameters_given_tau": 27, "parent": [1, 4, 15, 28, 33], "parenthes": 9, "pari": 9, "pariti": [0, 10, 13, 14, 21, 22, 23, 24, 25, 30, 32, 33, 34, 41], "parity_check_cod": 36, "parity_check_matrix": [4, 10, 11, 14, 21, 22, 23, 24, 25, 30, 34, 41], "parity_column_multipli": 25, "parity_evaluation_point": 22, "paritycheckcod": [1, 13, 36], "paritycheckcodegeneratormatrixencod": 36, "paritycheckcodestraightforwardencod": 36, "pars": 15, "part": [5, 11, 12, 16, 34], "partial": 19, "particular": [9, 12, 14, 32, 33, 35], "partit": [5, 11, 12, 33, 39], "partitionrefinement_gener": 12, "partitionrefinementlinearcod": 12, "partitionstack": 5, "partn_ref2": 12, "pasechnik": [9, 18, 26], "pass": [1, 7, 11, 14, 18, 27, 31, 33, 37, 38], "passagemath": 33, "pattern": 33, "peopl": 11, "per": [5, 15, 35], "perfect": [9, 23, 33], "perform": [5, 23, 27, 31, 33], "perm": 39, "perm_gp": 12, "permut": [5, 10, 11, 15, 26, 33, 34, 39], "permutation_act": 10, "permutation_automorphism_group": [11, 33, 34], "permute_word_by_wp": 5, "permuted_cod": 34, "perp": [5, 22, 33, 34], "pet2010": 31, "pg": [11, 12], "phi": [4, 11], "phi_": 11, "phi_0": 11, "pi": [11, 12], "pick": [7, 33, 37], "pivot": 5, "pl": [2, 3], "place": [2, 3, 26], "places_at_infin": [2, 3], "player": 9, "pleas": [1, 27], "pless": 39, "plot": [9, 40], "plotkin": [6, 9], "plotkin_bound_asymp": [6, 9], "plotkin_upper_bound": [6, 9], "pmatrix": 4, "pmod": 26, "po": 34, "point": [4, 9, 10, 11, 12, 22, 25, 28, 33, 38], "polynomi": [3, 4, 6, 10, 14, 15, 18, 22, 24, 25, 27, 28, 29, 33, 38], "polynomial_r": [25, 38], "polynomial_to_list": 29, "polynomialevalu": 22, "polynomialr": [25, 33, 38, 39], "polytop": 10, "port": [26, 27, 28, 29], "posit": [1, 4, 7, 15, 16, 25, 31, 33, 34, 35, 37], "possess": 40, "possibl": [1, 9, 11, 14, 15, 18, 25, 27, 31, 37, 40], "possibli": [1, 6, 9, 19, 39, 40], "power": [12, 18, 25, 32, 38], "pp": [21, 23, 25], "ppl": 18, "pre": 33, "preced": 37, "precis": [9, 18, 27], "predefin": 38, "preprint": 33, "preserv": 0, "press": 39, "previou": [25, 33], "prime": [2, 5, 10, 14, 24, 26, 33, 35], "primit": [4, 9, 10, 14, 25], "primitive_root": [4, 14, 25], "princip": [31, 35], "print": [3, 4, 5, 15, 31, 33, 39, 40], "print_basi": 5, "print_data": 5, "prior": 33, "priori": 0, "privat": [31, 34], "prng": 33, "prob": 1, "probabilist": [10, 16, 31], "probability_of_at_most_t_error": 7, "probability_of_exactly_t_error": 7, "probabl": [7, 19, 40], "problem": [9, 18], "process": [3, 21], "prod": 39, "prod_": [28, 39], "produc": [0, 33], "product": [1, 7, 10, 25, 33, 34], "product_cod": 33, "program": [0, 9, 14, 16], "project": [11, 12, 30, 33], "projectivespac": [2, 3], "promis": 16, "prone": 7, "proper": [25, 38], "properli": [9, 33], "properti": [0, 10, 23, 33, 35], "propos": 14, "proposit": [26, 27], "provid": [0, 1, 2, 4, 7, 9, 11, 12, 14, 18, 19, 22, 27, 33, 35, 38, 41], "punctur": [0, 15, 17, 20, 25, 33, 34], "punctured_cod": [17, 20, 33, 37], "punctured_posit": 37, "puncturedcod": [13, 37], "puncturedcodeoriginalcodedecod": [17, 37], "puncturedcodepuncturedmatrixencod": [20, 37], "pure": 5, "purpos": [4, 39, 40], "put": [5, 10], "put_in_canonical_form": 5, "put_in_std_form": 5, "py": [1, 26, 33, 34], "python": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], "q": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 18, 21, 22, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 38, 41, 42], "q_base": 18, "q_matrix": 18, "qaryreedmullercod": 38, "qarysymmetricchannel": [7, 8], "qq": [25, 33, 38], "qqr": 26, "qr": [10, 26], "quad": 4, "quadrat": [10, 13, 26, 31], "quadraticresiduecod": [10, 13, 31], "quadraticresiduecodeevenpair": [10, 13, 33], "quadraticresiduecodeoddpair": [10, 13], "quantiti": 9, "quasi": [13, 26], "quasiquadraticresiduecod": [13, 26, 34], "queri": 33, "question": [9, 40], "quit": 33, "qy": [25, 38], "r": [2, 4, 6, 9, 12, 14, 16, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 34, 35, 38, 39, 40], "r_": 31, "radii": 23, "radiu": [0, 3, 9, 15, 16, 22, 23, 25, 27, 29, 31, 33], "radix": 5, "rais": [1, 2, 3, 15, 19, 25, 27, 31, 33, 34, 38], "randint": 25, "random": [1, 5, 7, 10, 13, 16, 21, 25, 26, 31, 33, 37, 40], "random_el": [1, 3, 4, 7, 10, 21, 25, 31, 33, 34, 37, 41], "random_error_vector": 7, "random_linear_cod": [10, 13, 21, 33, 34, 37, 41], "random_vector": 19, "randomli": 26, "randomlinearcod": 26, "randomlinearcodeguava": [13, 26], "rang": [5, 10, 11, 18, 22, 25, 29, 33, 34, 39], "rank": [0, 1, 10, 12, 22, 33, 34], "rank_dist": 35, "rank_distance_between_vector": 35, "rank_support_of_vector": 35, "rank_weight": 35, "rank_weight_of_vector": 35, "rate": [6, 7, 9, 10, 34], "rather": [17, 18, 31, 38, 39], "ratio": [33, 34], "ration": [2, 3], "rceil": 9, "rdf": 9, "re": 33, "reach": 9, "read": [31, 35], "readabl": [33, 39], "readi": 3, "real": [9, 28, 29, 40], "realli": 30, "realnumb": [1, 7, 9, 29, 31], "reason": 3, "rec": [15, 33], "recal": 25, "receiv": [3, 7, 22, 25, 27, 31, 33, 38], "received_vector": 3, "recent": [1, 7, 9, 15, 19, 25, 27, 31, 32, 33, 34, 35, 38], "recommend": [1, 33, 34, 35], "recomput": 33, "record": [15, 33], "recov": [25, 33], "recurs": 15, "reduc": 34, "reduct": [5, 27, 28], "redundancy_matrix": [33, 34], "reed": [0, 4, 13, 17, 20, 21, 22, 33, 35, 37, 41], "reed_muller_cod": 38, "reedmullercod": [1, 13, 33, 38], "reedmullerpolynomialencod": 38, "reedmullervectorencod": 38, "reedsolomon": 26, "reedsolomoncod": [10, 13, 25], "refer": [1, 2, 10, 12, 15, 16, 19, 23, 27, 30, 32, 34, 36, 38, 39, 42], "referenc": 39, "refin": [5, 12, 31, 33], "refinement_gener": 12, "regard": [2, 30], "regardless": [0, 1], "regist": 1, "regular": [25, 32], "reimplement": [7, 19], "rel": 9, "relat": [1, 9, 18, 25, 33, 40], "relationship": [1, 35], "relative_dist": 33, "relev": 11, "reli": [16, 19, 33, 34, 35], "reliabl": 16, "remain": 34, "remark": 10, "rememb": 27, "remov": [2, 3, 4, 9, 12, 26, 33, 37], "renam": [26, 33], "reorgan": 33, "repeat": 33, "repetit": 34, "repetitioncod": 15, "report": [10, 33], "repres": [0, 1, 5, 7, 11, 15, 22, 24, 33, 34, 35, 39, 40], "represent": [0, 1, 4, 7, 14, 16, 19, 21, 23, 25, 30, 32, 33, 34, 35, 36, 37, 38, 41], "request": 34, "requir": [1, 2, 5, 10, 13, 15, 27, 31, 33], "residu": [2, 3, 10, 13, 26, 31], "resp": [5, 33], "respect": [11, 22, 27, 31, 33, 35], "restrict": [11, 12, 22, 27, 33, 39], "result": [5, 9, 14, 16, 19, 24, 25, 27, 32, 33, 34, 38, 40], "retriev": 33, "retro": 4, "return": [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], "return_data": 18, "return_permut": 34, "revers": 14, "revis": 33, "rewritten": 33, "rf": 27, "rfloor": 25, "rho": 31, "rich": 10, "riemann": [33, 39], "right": [5, 12, 25, 34, 35], "rightarrow": [9, 10, 14], "ring": [1, 10, 14, 22, 25, 27, 33, 38, 41], "rise": 5, "risk": 18, "robert": [5, 33], "rodemich": [6, 9], "root": [4, 10, 14, 24, 25, 27, 28, 39], "root_find": 27, "rootfind": 27, "rootfinding_algorithm": 27, "rosenkild": 31, "rot2006": [14, 25, 30], "roth": 27, "roth_ruckenstein_root_find": 27, "rothruckenstein": 27, "roughli": 31, "round": 18, "row": [5, 9, 10, 12, 22, 24, 26, 27, 28, 34, 35], "row_partit": 12, "rowspac": 5, "rtime": [11, 12], "rub\u00e9n": 35, "ruckenstein": 27, "rule": 25, "rumsei": [6, 9], "run": [16, 28, 31, 33, 34, 39], "rv": 3, "s1": 10, "s2": 10, "s5": 10, "s8": 34, "s_and_l": 27, "s_n": [5, 11, 12, 26, 33, 34], "sage": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], "sagemath": [25, 35], "sageobject": [7, 16, 19, 31, 40], "said": 11, "same": [1, 4, 5, 7, 9, 11, 14, 16, 19, 25, 27, 33, 34, 35, 37, 39, 40], "sampl": 40, "saniti": 31, "satisfi": [4, 27, 31, 32, 33], "save": [1, 19], "scalar": 5, "schilli": 33, "scipi": 9, "sd": 39, "sd_zeta_polynomi": 39, "search": [0, 5, 31], "search_siz": 31, "second": [5, 9, 11, 25, 27, 28, 29, 33], "secretli": 9, "section": [10, 14, 27, 30, 33], "see": [1, 5, 9, 10, 11, 12, 14, 15, 18, 21, 25, 27, 28, 29, 31, 32, 33, 34, 35, 38, 39], "seed": 33, "seek": [9, 28, 31], "seem": [33, 39], "seen": [4, 5, 11, 14, 25, 28, 37], "select": [26, 31], "self": [0, 1, 4, 5, 7, 12, 14, 15, 16, 19, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41], "self_dual_binary_cod": 39, "self_dual_cod": 39, "self_orthogonal_binary_cod": [5, 15], "semilinear": [11, 33], "semilinearli": 12, "semimonomi": [11, 33], "semimonomialtransformationgroup": [11, 12], "send": [5, 7, 33], "sens": [9, 18, 19, 24], "sensibl": 31, "sensic": 19, "sent_codeword": 3, "separ": [9, 19, 22, 25, 31], "sequenc": [4, 10, 12, 14, 33, 34], "seri": [9, 39], "serv": 34, "set": [0, 1, 4, 5, 7, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 27, 32, 33, 34, 35, 36, 37, 38, 39, 41], "set_data_structur": 5, "set_random_se": [7, 37], "set_se": 33, "setallinfolevel": 33, "sever": [7, 11, 33, 37], "shall": [9, 31], "shape": 34, "share": [11, 33, 35, 42], "shift": [14, 28], "shortcut": [1, 19, 25], "shorten": [9, 15, 33, 34], "shortenedcod": 15, "shortli": 2, "should": [1, 7, 10, 12, 14, 16, 19, 27, 28, 31, 33, 34, 35, 39, 40], "show": [1, 15, 33, 40], "sigma": [7, 22, 38], "sigma_": [14, 25, 36], "signatur": [4, 27], "signific": 40, "similar": 31, "similarli": [1, 33], "simoni": 42, "simpl": [25, 31, 33, 36], "simplex": 12, "simpli": [0, 1, 31, 33, 35, 38], "simul": 7, "sinc": [1, 7, 10, 12, 15, 22, 25, 33, 35, 39], "singl": [7, 14, 16, 31, 33], "singleton": [6, 9], "singleton_bound_asymp": [6, 9], "singleton_upper_bound": [6, 9], "situat": 9, "sivek": 15, "size": [4, 5, 7, 9, 11, 14, 16, 18, 19, 22, 25, 27, 28, 29, 31, 33, 34, 35, 36, 38, 41], "skew": 22, "slightli": 33, "slow": [5, 18, 33, 35], "slower": 33, "slowli": 39, "slukova": [22, 24, 35], "small": [9, 10, 31, 33, 39], "smaller": [11, 29, 33], "smallest": [4, 9, 23, 25, 27], "smash": 33, "so": [5, 9, 31, 33, 35], "soc_it": 5, "soft": 16, "solomon": [0, 4, 13, 17, 20, 21, 22, 35, 37, 41], "solut": [9, 18, 29], "solv": [9, 25, 28], "solve_degree2_to_integer_rang": 29, "solver": [18, 27], "some": [0, 1, 3, 4, 5, 7, 9, 10, 11, 12, 14, 16, 22, 23, 25, 26, 31, 33, 34, 35, 38, 39, 40], "somehow": 33, "someth": [16, 19], "sometim": [31, 33], "somewher": 15, "soon": 4, "sort": [1, 31, 40], "sought": 28, "sourc": [0, 1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], "source_cod": 40, "space": [1, 3, 4, 5, 6, 7, 9, 10, 14, 16, 18, 19, 22, 23, 25, 28, 31, 33, 34, 35, 36, 37, 38], "span": [5, 10, 28], "special": [0, 9, 10, 11, 16, 19, 31, 33], "specialis": 33, "specif": [0, 1, 7, 14, 16, 23, 31, 33, 34, 35, 37], "specifi": [1, 12, 14, 25, 27, 31, 33, 34, 35], "spectrum": [10, 33, 39], "speed": 5, "sphere": 9, "sphinx": 26, "split": [4, 10, 14], "sqrt": [27, 29, 33], "squar": [9, 34, 39], "st": 33, "stabil": 12, "stack": [5, 33], "stage": 33, "standard": [5, 9, 34], "standard_form": [33, 34], "start": [11, 12, 33], "state": [1, 9, 33], "static": [7, 27, 31], "staticerrorratechannel": [3, 7, 8, 21, 25, 31, 33, 37, 41], "stdout": 33, "stein": [9, 33], "steiner": 33, "step": [25, 27, 31], "steven": 15, "still": [4, 31, 33, 37], "stop": 40, "store": [1, 9, 12, 33, 42], "str": 40, "straight": 28, "strange_paramet": 1, "strategi": [31, 37], "stricter": 18, "string": [1, 2, 4, 7, 22, 27, 31, 33, 39, 40], "strongli": [1, 33, 34, 35], "struct": 5, "structur": [0, 5, 7, 37], "structured_represent": 37, "structureless": 37, "structures_in_coding_theori": 33, "studi": [33, 39], "style": [14, 22, 25, 38], "sub": [27, 31, 33, 35], "sub_field": [22, 35], "subclass": [1, 2, 7, 16, 19, 33, 34], "subcod": [0, 2, 13, 17, 32, 33, 34], "subfamili": 33, "subfield": [0, 2, 13, 17, 32, 33, 35], "subfield_subcod": [17, 41], "subfieldsubcod": [13, 41], "subfieldsubcodeoriginalcodedecod": [17, 41], "subgraph": 12, "subgroup": [11, 33], "subsequ": 40, "subset": [1, 9, 14, 25, 31, 33, 34], "subseteq": 14, "subspac": [5, 9, 11, 12, 33], "subtl": 33, "subtract": 33, "succe": [16, 31, 33, 37], "success": 31, "sudan": 0, "suggest": 33, "suit": 34, "suitabl": [1, 12], "sullivan": [27, 28], "sum": [3, 10, 33, 34, 36], "sum_": [4, 9, 18, 31, 32, 33], "super": [1, 7, 16, 19, 31, 33, 34], "supergroup": 33, "supp": 33, "suppli": [1, 25, 27, 31, 34], "support": [0, 1, 2, 3, 12, 33, 34, 35, 38], "suppos": 12, "suppress": 33, "sure": 33, "surpris": 33, "surround": 14, "surrounding_bch_cod": 14, "swap": 35, "switch": [10, 37], "symbol": [4, 7, 9, 18, 21, 25, 29, 34, 36, 37, 40], "symmetr": [6, 7, 9, 10, 11, 26, 33], "symmetricgroup": [10, 11, 34], "syndrom": [1, 25, 31, 33, 34], "syndrome_t": 33, "syntax": 33, "system": [25, 27, 28, 33, 40], "systemat": [1, 34], "systematic_generator_matrix": [10, 34], "systematic_permut": 34, "systematic_posit": [1, 34], "t": [7, 10, 12, 14, 18, 23, 24, 25, 31, 32, 33, 39, 40, 41], "t_1": 10, "t_limit": 5, "t_n": 10, "tab": [33, 35], "tabl": [9, 15, 33, 39, 40], "take": [1, 3, 5, 7, 9, 16, 19, 22, 25, 31, 33, 34, 35, 37], "taken": [7, 19, 31], "tau": [3, 4, 12, 21, 27, 28, 31], "tell": 11, "temp": 3, "tensor": 33, "term": [29, 35], "termin": [25, 31], "ternari": [9, 23, 33], "test": [1, 5, 31, 33, 34, 39], "test_expand_to_ortho_basi": 5, "test_word_perm": 5, "testsuit": 34, "text": [5, 15, 21, 22], "textbf": 22, "tfewrnwrtrsc": 40, "th": [10, 23, 24, 25, 28, 33, 34, 37, 41], "than": [9, 14, 22, 24, 25, 27, 28, 29, 33, 38], "thei": [9, 10, 16, 19, 25, 31, 33, 35, 38, 39], "them": [0, 2, 10, 18, 24, 26, 35], "thematic_tutori": 33, "theorem": [10, 33, 42], "theoret": [8, 33], "theori": [7, 9, 35], "therefor": [10, 11, 27, 33], "therein": 33, "thereof": 16, "thi": [1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42], "thing": 7, "third": 33, "thoma": [11, 12, 33], "those": [12, 27, 31, 32, 34, 38], "though": 7, "three": [14, 32, 38], "through": [1, 4, 7, 10, 13, 14, 21, 28, 31, 33, 37, 41], "thrown": [25, 34, 38], "thu": [9, 18, 23, 33, 34, 35], "tild": 18, "time": [1, 2, 3, 4, 9, 10, 11, 12, 14, 15, 16, 18, 24, 26, 27, 28, 31, 33, 34, 35, 37, 39, 40], "time_estim": 31, "tjhai": 15, "tjhal": 33, "to_matrix": 35, "to_matrix_represent": 35, "togeth": 5, "tol": 9, "too": [11, 12, 25, 27, 37, 39], "top": [7, 16, 19, 26], "toric": [10, 13, 26], "toriccod": [10, 13, 33], "trace": 39, "traceback": [1, 7, 9, 15, 19, 25, 27, 31, 32, 33, 34, 35, 38], "track": 5, "train": 40, "transform": [1, 7, 14, 19, 22, 25, 33, 36, 37, 38], "translat": [11, 33], "transmiss": [7, 8, 31], "transmit": [3, 7, 36], "transmit_unsaf": 7, "transp": 33, "transport": [12, 33], "transpos": 4, "travers": 5, "tree": [5, 40], "tri": [31, 33, 37], "trial": 31, "trick": 18, "trigger": 37, "tripl": [12, 18], "trivial": [4, 5, 9, 15, 26], "trivialcod": 33, "true": [1, 2, 3, 4, 10, 11, 12, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 27, 28, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41], "truncat": 32, "try": [1, 14, 25, 37, 40], "tue": 18, "tupl": [3, 7, 10, 25, 27, 28, 33, 34], "twice": [16, 19], "twist": 22, "twisting_homomorph": 22, "two": [0, 1, 2, 4, 5, 7, 15, 25, 27, 29, 31, 33, 34, 35, 38, 40], "type": [1, 3, 10, 14, 16, 22, 29, 33, 39], "typeerror": [7, 35], "typic": 9, "u": [4, 18, 33, 40], "u_1": 35, "u_2": 35, "u_i": 35, "u_m": 35, "u_u_plus_v_cod": 33, "undefin": [25, 38], "under": [1, 5, 10, 12, 33, 34], "underli": [2, 4, 14, 33], "unencod": [1, 3, 19, 25, 38], "unencode_nocheck": [2, 3, 14, 19, 22, 25, 36, 38], "unexpect": 33, "uniformli": 7, "uninstanti": 16, "union": 5, "uniqu": [3, 11, 12, 14, 40], "unit": [11, 12], "uniti": [10, 25], "univ": 39, "univari": [14, 25, 27, 33], "univers": 34, "unknown": 31, "unlik": 25, "unpars": 15, "unspecifi": [1, 19, 22, 25, 33, 38], "unstructur": [33, 34, 35], "until": [10, 31, 37], "up": [1, 12, 15, 16, 27, 31, 33, 36, 39], "updat": 39, "upon": 16, "upper": [6, 9, 12, 15, 18, 33, 41], "upperbound": [9, 15], "upperboundelia": 9, "upperboundexplan": 15, "upperboundgriesm": 9, "upperboundplotkin": 9, "upstream": [7, 33, 38], "us": [0, 1, 2, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], "usag": 34, "user": [1, 14, 33], "usual": [7, 10, 16, 17, 18, 31, 34, 35], "util": 0, "uuvcod": 15, "v": [7, 9, 10, 18, 22, 32, 33, 34, 35, 39, 40], "v2": 10, "v_1": [9, 38], "v_2": [9, 38], "v_a": 32, "v_i": [9, 38], "v_k": 38, "v_n": 9, "val": 18, "valid": 32, "valu": [1, 9, 15, 19, 22, 25, 27, 31, 33, 34, 35, 37, 38, 40], "valueerror": [1, 2, 9, 15, 19, 25, 27, 31, 32, 34, 35, 38], "vandermond": 25, "var1": 33, "var2": 33, "variabl": [18, 33, 38], "variant": 31, "varieti": 10, "variou": [4, 31], "varphi": 12, "varphi_i": 12, "varshamov": [6, 9], "varshamov_bound": 9, "vector": [1, 3, 4, 5, 7, 9, 10, 11, 14, 16, 18, 19, 22, 24, 25, 27, 28, 31, 33, 34, 35, 36, 37, 38], "vector_form_of_matrix": 35, "vectorevalu": 22, "vectori": [25, 38], "vectorspac": [7, 10, 33], "vega": 10, "verac": 33, "verbos": [3, 15, 33], "veri": [1, 10, 18, 23, 25, 31, 38], "verifi": [1, 28], "versa": 27, "version": [2, 3, 10, 11, 12, 16, 19, 22, 23, 24, 26, 31, 32, 33, 35, 40], "vert": [9, 21, 34], "vertic": [5, 33, 40], "via": [3, 12, 32, 34], "vice": 27, "view": 11, "voloch": 10, "volume_ham": [6, 9], "w": [2, 3, 6, 9, 12, 18, 25, 31, 35, 39, 40], "w_": 5, "w_1": [9, 42], "w_2": [9, 42], "w_err": [1, 16, 33], "w_i": [5, 9], "w_n": 9, "wa": [4, 7, 14, 21, 33, 37, 40], "wai": [1, 5, 7, 9, 10, 14, 22, 27, 28, 31, 33, 35, 36, 40], "wait": 10, "walsh": [10, 13], "walsh_cod": 10, "walsh_matrix": 10, "walshcod": [10, 13], "want": [1, 14, 27, 28, 33, 34, 40], "warn": 33, "wassermann": 42, "wd_count": 5, "wd_deg": 5, "wd_ent": 5, "wd_lvl": 5, "wd_output": 5, "we": [1, 4, 7, 9, 11, 12, 14, 16, 22, 24, 25, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "weaker": 11, "web": 15, "websit": 9, "weight": [0, 1, 5, 6, 7, 9, 12, 15, 18, 23, 25, 28, 31, 33, 35, 40], "weight_dist": 5, "weight_distribut": [23, 25, 33], "weight_enumer": 33, "wel1988": 36, "welch": 25, "well": [1, 2, 11, 27, 30], "welsh": [6, 9], "were": [27, 37, 39, 40], "what": [4, 9, 34], "when": [1, 4, 7, 9, 11, 15, 19, 25, 26, 28, 31, 33, 34, 35, 38, 39], "whenev": 33, "where": [2, 4, 5, 7, 9, 10, 12, 14, 18, 19, 22, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39], "whether": [5, 14, 25, 27, 33, 34], "which": [1, 2, 4, 5, 7, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 27, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40], "while": [1, 4, 7, 14, 23, 27, 31, 33, 39], "whole": 9, "whose": [2, 4, 10, 12, 14, 23, 25, 26, 27, 28, 31, 33, 34, 38], "wikipedia": [5, 9, 10, 18, 23, 33], "william": [9, 33], "win": 18, "wise": 25, "wish": [25, 31, 35], "within": [1, 9, 16, 27, 31], "without": [18, 23, 31, 33, 35, 38], "won": 18, "word": [1, 4, 5, 7, 12, 15, 16, 19, 21, 22, 23, 24, 25, 27, 31, 32, 33, 35, 36, 37, 38, 41], "word_and_erasure_vector": 25, "wordpermut": 5, "work": [4, 10, 11, 16, 25, 27, 29, 31, 33, 34], "would": [9, 31, 33, 34], "wrap": [9, 10], "wrapper": [26, 27, 33], "write": [1, 31, 33, 34, 35], "written": [5, 7, 33, 35], "wrong": 38, "wt": 33, "www": [9, 15, 18], "wy": [27, 28], "x": [2, 3, 4, 6, 9, 10, 11, 12, 14, 15, 18, 22, 24, 25, 27, 28, 29, 33, 35, 38, 39], "x0": 38, "x1": 38, "x2": 38, "x3": 38, "x_": [21, 26], "x_1": [10, 26, 29, 38], "x_2": [29, 38], "x_d": 10, "x_i": [26, 28, 38], "x_m": 38, "xi": 28, "xqr": [10, 26], "xy": 33, "y": [2, 3, 4, 14, 21, 25, 27, 28, 33, 37, 38, 40, 41], "y1": 38, "y2": 38, "y_": 26, "y_1": 26, "y_i": [26, 28], "yann": 31, "ye": 9, "yi": 28, "yield": [33, 35], "you": [1, 9, 10, 11, 14, 16, 17, 18, 19, 25, 27, 31, 33, 34, 35, 39], "young": [11, 33], "your": [1, 16, 18, 19, 27, 31, 33, 34], "z": [2, 10, 18, 33, 34, 39], "z2": 35, "z20": 22, "z3": [14, 22], "z4": [4, 14], "z5": 4, "z6": 35, "z9": 22, "zero": [2, 12, 25, 28, 29, 33, 34], "zeta": [14, 33], "zeta_funct": 33, "zeta_function2": 33, "zeta_function3": 33, "zeta_polynomi": 33, "zmod": 10, "zx": [4, 14], "zz": [10, 33]}, "titles": ["Coding Theory", "Codes", "AG codes", "Decoders for AG codes", "BCH code", "Optimized low-level binary code representation", "Index of bounds on the parameters of codes", "Channels", "Index of channels", "Bounds for parameters of codes", "Linear code constructors that do not preserve the structural information", "Canonical forms and automorphisms for linear codes over finite fields", "Canonical forms and automorphism group computation for linear codes over finite fields", "Index of code constructions", "Cyclic code", "Access functions to online databases for coding theory", "Decoders", "Index of decoders", "Delsarte (or linear programming) bounds", "Encoders", "Index of encoders", "Extended code", "Gabidulin Code", "Golay code", "Goppa code", "Reed-Solomon codes and Generalized Reed-Solomon codes", "Constructions of generator matrices using the GUAVA package for GAP", "Guruswami-Sudan decoder for (Generalized) Reed-Solomon codes", "Interpolation algorithms for the Guruswami-Sudan decoder", "Guruswami-Sudan utility methods", "Hamming codes", "Information-set decoding for linear codes", "Kasami code", "Generic structures for linear codes over the Hamming metric", "Generic structures for linear codes of any metric", "Generic structures for linear codes over the rank metric", "Parity-check code", "Punctured code", "Reed-Muller code", "Enumerating binary self-dual codes", "Huffman encoding", "Subfield subcode", "Database of two-weight codes"], "titleterms": {"abstractlinearcod": 33, "abstractlinearrankmetriccod": 35, "access": 15, "ag": [2, 3], "algorithm": 28, "ani": 34, "automorph": [0, 11, 12], "bch": 4, "binari": [5, 39], "bound": [0, 6, 9, 18], "canon": [11, 12], "channel": [7, 8], "check": 36, "class": 40, "code": [0, 1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 21, 22, 23, 24, 25, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42], "comput": 12, "construct": [0, 13, 26], "constructor": 10, "cyclic": 14, "databas": [0, 15, 42], "decod": [0, 3, 16, 17, 27, 28, 31], "delsart": 18, "deriv": [0, 13], "do": 10, "dual": 39, "encod": [19, 20, 40], "enumer": 39, "extend": 21, "famili": [0, 13, 33], "field": [11, 12], "finit": [11, 12], "form": [11, 12], "function": [15, 40], "further": [33, 35], "gabidulin": [22, 35], "gap": 26, "gener": [13, 25, 26, 27, 33, 34, 35], "golai": 23, "goppa": 24, "group": [0, 12], "guava": 26, "guruswami": [27, 28, 29], "ham": [30, 33], "huffman": 40, "index": [6, 8, 13, 17, 20], "indic": 0, "inform": [10, 31], "interpol": 28, "kasami": 32, "level": 5, "linear": [0, 10, 11, 12, 18, 31, 33, 34, 35], "linearcod": 33, "linearrankmetriccod": 35, "low": 5, "matric": 26, "matrix": 13, "method": 29, "metric": [33, 34, 35], "miscellan": 0, "modul": 0, "muller": 38, "onlin": 15, "optim": 5, "over": [11, 12, 33, 35], "packag": 26, "paramet": [0, 6, 9], "pariti": 36, "preserv": 10, "program": 18, "punctur": 37, "rank": 35, "reed": [25, 27, 38], "refer": [33, 35], "represent": [5, 13], "rich": 13, "self": 39, "set": 31, "solomon": [25, 27], "structur": [10, 33, 34, 35], "subcod": 41, "subfield": 41, "sudan": [27, 28, 29], "tabl": 0, "theori": [0, 15], "todo": 9, "two": 42, "us": 26, "util": 29, "weight": 42}})