Search.setIndex({"alltitles": {"Boolean Formulas": [[2, null]], "Evaluation of Boolean Formulas": [[1, null]], "Indices and Tables": [[0, "indices-and-tables"]], "Logic Tables": [[5, null]], "Module that creates and modifies parse trees of well formed boolean formulas.": [[4, null]], "Propositional Calculus": [[6, null]], "Symbolic Logic": [[0, null]], "Symbolic Logic Expressions": [[3, null]], "Todo": [[3, "id1"], [3, "id2"]]}, "docnames": ["index", "sage/logic/booleval", "sage/logic/boolformula", "sage/logic/logic", "sage/logic/logicparser", "sage/logic/logictable", "sage/logic/propcalc"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2}, "filenames": ["index.rst", "sage/logic/booleval.rst", "sage/logic/boolformula.rst", "sage/logic/logic.rst", "sage/logic/logicparser.rst", "sage/logic/logictable.rst", "sage/logic/propcalc.rst"], "indexentries": {"add_statement() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.add_statement", false]], "apply_func() (in module sage.logic.logicparser)": [[4, "sage.logic.logicparser.apply_func", false]], "booleanformula (class in sage.logic.boolformula)": [[2, "sage.logic.boolformula.BooleanFormula", false]], "combine() (sage.logic.logic.symboliclogic method)": [[3, "sage.logic.logic.SymbolicLogic.combine", false]], "consistent() (in module sage.logic.propcalc)": [[6, "sage.logic.propcalc.consistent", false]], "convert_cnf() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.convert_cnf", false]], "convert_cnf_recur() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.convert_cnf_recur", false]], "convert_cnf_table() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.convert_cnf_table", false]], "convert_expression() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.convert_expression", false]], "convert_opt() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.convert_opt", false]], "dist_not() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.dist_not", false]], "dist_ors() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.dist_ors", false]], "equivalent() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.equivalent", false]], "eval() (in module sage.logic.logic)": [[3, "sage.logic.logic.eval", false]], "eval_and_op() (in module sage.logic.logic)": [[3, "sage.logic.logic.eval_and_op", false]], "eval_bin_op() (in module sage.logic.logic)": [[3, "sage.logic.logic.eval_bin_op", false]], "eval_f() (in module sage.logic.booleval)": [[1, "sage.logic.booleval.eval_f", false]], "eval_formula() (in module sage.logic.booleval)": [[1, "sage.logic.booleval.eval_formula", false]], "eval_iff_op() (in module sage.logic.logic)": [[3, "sage.logic.logic.eval_iff_op", false]], "eval_ifthen_op() (in module sage.logic.logic)": [[3, "sage.logic.logic.eval_ifthen_op", false]], "eval_ltor_toks() (in module sage.logic.logic)": [[3, "sage.logic.logic.eval_ltor_toks", false]], "eval_mon_op() (in module sage.logic.logic)": [[3, "sage.logic.logic.eval_mon_op", false]], "eval_op() (in module sage.logic.booleval)": [[1, "sage.logic.booleval.eval_op", false]], "eval_or_op() (in module sage.logic.logic)": [[3, "sage.logic.logic.eval_or_op", false]], "evaluate() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.evaluate", false]], "formula() (in module sage.logic.propcalc)": [[6, "sage.logic.propcalc.formula", false]], "full_tree() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.full_tree", false]], "get_bit() (in module sage.logic.logic)": [[3, "sage.logic.logic.get_bit", false]], "get_bit() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.get_bit", false]], "get_formulas() (in module sage.logic.propcalc)": [[6, "sage.logic.propcalc.get_formulas", false]], "get_next_op() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.get_next_op", false]], "get_table_list() (sage.logic.logictable.truthtable method)": [[5, "sage.logic.logictable.Truthtable.get_table_list", false]], "get_trees() (in module sage.logic.logicparser)": [[4, "sage.logic.logicparser.get_trees", false]], "iff() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.iff", false]], "ifthen() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.ifthen", false]], "implies() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.implies", false]], "is_consequence() (in module sage.logic.boolformula)": [[2, "sage.logic.boolformula.is_consequence", false]], "is_consequence() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.is_consequence", false]], "is_contradiction() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.is_contradiction", false]], "is_satisfiable() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.is_satisfiable", false]], "is_tautology() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.is_tautology", false]], "length() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.length", false]], "module": [[1, "module-sage.logic.booleval", false], [2, "module-sage.logic.boolformula", false], [3, "module-sage.logic.logic", false], [4, "module-sage.logic.logicparser", false], [5, "module-sage.logic.logictable", false], [6, "module-sage.logic.propcalc", false]], "parse() (in module sage.logic.logicparser)": [[4, "sage.logic.logicparser.parse", false]], "parse_ltor() (in module sage.logic.logicparser)": [[4, "sage.logic.logicparser.parse_ltor", false]], "polish_notation() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.polish_notation", false]], "polish_parse() (in module sage.logic.logicparser)": [[4, "sage.logic.logicparser.polish_parse", false]], "prefix_to_infix() (in module sage.logic.logicparser)": [[4, "sage.logic.logicparser.prefix_to_infix", false]], "print_table() (sage.logic.logic.symboliclogic method)": [[3, "sage.logic.logic.SymbolicLogic.print_table", false]], "prove() (sage.logic.logic.symboliclogic method)": [[3, "sage.logic.logic.SymbolicLogic.prove", false]], "recover_formula() (in module sage.logic.logicparser)": [[4, "sage.logic.logicparser.recover_formula", false]], "recover_formula_internal() (in module sage.logic.logicparser)": [[4, "sage.logic.logicparser.recover_formula_internal", false]], "reduce_bins() (in module sage.logic.logic)": [[3, "sage.logic.logic.reduce_bins", false]], "reduce_monos() (in module sage.logic.logic)": [[3, "sage.logic.logic.reduce_monos", false]], "reduce_op() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.reduce_op", false]], "sage.logic.booleval": [[1, "module-sage.logic.booleval", false]], "sage.logic.boolformula": [[2, "module-sage.logic.boolformula", false]], "sage.logic.logic": [[3, "module-sage.logic.logic", false]], "sage.logic.logicparser": [[4, "module-sage.logic.logicparser", false]], "sage.logic.logictable": [[5, "module-sage.logic.logictable", false]], "sage.logic.propcalc": [[6, "module-sage.logic.propcalc", false]], "satformat() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.satformat", false]], "simplify() (sage.logic.logic.symboliclogic method)": [[3, "sage.logic.logic.SymbolicLogic.simplify", false]], "statement() (sage.logic.logic.symboliclogic method)": [[3, "sage.logic.logic.SymbolicLogic.statement", false]], "symboliclogic (class in sage.logic.logic)": [[3, "sage.logic.logic.SymbolicLogic", false]], "to_infix() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.to_infix", false]], "to_infix_internal() (in module sage.logic.logicparser)": [[4, "sage.logic.logicparser.to_infix_internal", false]], "tokenize() (in module sage.logic.logic)": [[3, "sage.logic.logic.tokenize", false]], "tokenize() (in module sage.logic.logicparser)": [[4, "sage.logic.logicparser.tokenize", false]], "tree() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.tree", false]], "tree_parse() (in module sage.logic.logicparser)": [[4, "sage.logic.logicparser.tree_parse", false]], "truthtable (class in sage.logic.logictable)": [[5, "sage.logic.logictable.Truthtable", false]], "truthtable() (sage.logic.boolformula.booleanformula method)": [[2, "sage.logic.boolformula.BooleanFormula.truthtable", false]], "truthtable() (sage.logic.logic.symboliclogic method)": [[3, "sage.logic.logic.SymbolicLogic.truthtable", false]]}, "objects": {"sage.logic": [[1, 0, 0, "-", "booleval"], [2, 0, 0, "-", "boolformula"], [3, 0, 0, "-", "logic"], [4, 0, 0, "-", "logicparser"], [5, 0, 0, "-", "logictable"], [6, 0, 0, "-", "propcalc"]], "sage.logic.booleval": [[1, 1, 1, "", "eval_f"], [1, 1, 1, "", "eval_formula"], [1, 1, 1, "", "eval_op"]], "sage.logic.boolformula": [[2, 2, 1, "", "BooleanFormula"], [2, 1, 1, "", "is_consequence"]], "sage.logic.boolformula.BooleanFormula": [[2, 3, 1, "", "add_statement"], [2, 3, 1, "", "convert_cnf"], [2, 3, 1, "", "convert_cnf_recur"], [2, 3, 1, "", "convert_cnf_table"], [2, 3, 1, "", "convert_expression"], [2, 3, 1, "", "convert_opt"], [2, 3, 1, "", "dist_not"], [2, 3, 1, "", "dist_ors"], [2, 3, 1, "", "equivalent"], [2, 3, 1, "", "evaluate"], [2, 3, 1, "", "full_tree"], [2, 3, 1, "", "get_bit"], [2, 3, 1, "", "get_next_op"], [2, 3, 1, "", "iff"], [2, 3, 1, "", "ifthen"], [2, 3, 1, "", "implies"], [2, 3, 1, "", "is_consequence"], [2, 3, 1, "", "is_contradiction"], [2, 3, 1, "", "is_satisfiable"], [2, 3, 1, "", "is_tautology"], [2, 3, 1, "", "length"], [2, 3, 1, "", "polish_notation"], [2, 3, 1, "", "reduce_op"], [2, 3, 1, "", "satformat"], [2, 3, 1, "", "to_infix"], [2, 3, 1, "", "tree"], [2, 3, 1, "", "truthtable"]], "sage.logic.logic": [[3, 2, 1, "", "SymbolicLogic"], [3, 1, 1, "", "eval"], [3, 1, 1, "", "eval_and_op"], [3, 1, 1, "", "eval_bin_op"], [3, 1, 1, "", "eval_iff_op"], [3, 1, 1, "", "eval_ifthen_op"], [3, 1, 1, "", "eval_ltor_toks"], [3, 1, 1, "", "eval_mon_op"], [3, 1, 1, "", "eval_or_op"], [3, 1, 1, "", "get_bit"], [3, 1, 1, "", "reduce_bins"], [3, 1, 1, "", "reduce_monos"], [3, 1, 1, "", "tokenize"]], "sage.logic.logic.SymbolicLogic": [[3, 3, 1, "", "combine"], [3, 3, 1, "", "print_table"], [3, 3, 1, "", "prove"], [3, 3, 1, "", "simplify"], [3, 3, 1, "", "statement"], [3, 3, 1, "", "truthtable"]], "sage.logic.logicparser": [[4, 1, 1, "", "apply_func"], [4, 1, 1, "", "get_trees"], [4, 1, 1, "", "parse"], [4, 1, 1, "", "parse_ltor"], [4, 1, 1, "", "polish_parse"], [4, 1, 1, "", "prefix_to_infix"], [4, 1, 1, "", "recover_formula"], [4, 1, 1, "", "recover_formula_internal"], [4, 1, 1, "", "to_infix_internal"], [4, 1, 1, "", "tokenize"], [4, 1, 1, "", "tree_parse"]], "sage.logic.logictable": [[5, 2, 1, "", "Truthtable"]], "sage.logic.logictable.Truthtable": [[5, 3, 1, "", "get_table_list"]], "sage.logic.propcalc": [[6, 1, 1, "", "consistent"], [6, 1, 1, "", "formula"], [6, 1, 1, "", "get_formulas"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method"}, "terms": {"": [2, 3, 4, 5, 6], "0": [2, 3, 4, 5, 6], "01": 4, "03": [2, 3, 4, 5], "05": [1, 6], "06": 4, "08": [1, 2, 3, 4, 5, 6], "1": [2, 3, 4, 5, 6], "10": 2, "11": 5, "12": [2, 6], "2": [2, 3, 4, 5, 6], "2006": [1, 2, 5, 6], "2007": [3, 4], "2013": [1, 2, 3, 4, 5, 6], "2d": 3, "3": [2, 3, 5, 6], "31": 3, "3fe": 3, "4": [2, 3, 5, 6], "5": [2, 3, 5], "6": 5, "64": 2, "7": [2, 5], "8": [2, 3], "9": 5, "9b": [2, 6], "A": [2, 3, 4, 5, 6], "AND": 3, "And": [2, 6], "For": 5, "If": [2, 4, 5], "It": [2, 3, 4, 5, 6], "NOT": 3, "OR": 3, "Or": [2, 6], "That": 4, "The": [2, 3, 4, 5, 6], "To": 2, "_a": 6, "abid": [2, 6], "abra": 2, "accept": 5, "accord": 1, "ad": [2, 4, 6], "add_stat": 2, "algebra": [2, 6], "algorithm": 3, "alias": 2, "all": [1, 2, 3, 4, 5, 6], "along": [2, 5], "alpha": [2, 3], "alphanumer": [2, 6], "alreadi": 2, "also": [2, 3, 6], "alwai": 2, "amount": [2, 5], "an": [1, 2, 3, 4, 5, 6], "ani": [2, 5], "anoth": 2, "appear": [2, 3, 4, 5], "appli": [2, 3, 4, 6], "apply_func": [2, 4], "ar": [2, 3, 4, 6], "arbitrari": 5, "arg": 3, "argument": [2, 4, 5], "arrai": [2, 3, 5], "assign": [1, 2], "associ": 2, "atom": 4, "author": [1, 2, 3, 4, 5, 6], "b": [1, 2, 3, 4, 5, 6], "bad": [2, 6], "base": [2, 3, 5], "bc": 2, "been": 2, "begin": [2, 5, 6], "being": [2, 4], "benchmark": 2, "beta": 2, "binari": [2, 3, 4, 5], "bit": [2, 3], "blow": 2, "bool_opt": 2, "boolean": [0, 3, 5, 6], "booleanformula": [2, 4, 6], "boolev": [1, 6], "boolformula": [2, 6], "boolopt": 6, "branch": [1, 2, 4], "c": [1, 2, 3, 4, 5, 6], "ca": 2, "cadabra": 2, "calculu": 0, "call": [2, 3, 5, 6], "can": [1, 2, 3, 4, 5, 6], "cancel": 4, "cannot": 2, "case": 2, "cb": 2, "chang": 1, "charact": [1, 3], "check": 2, "chri": [1, 2, 3, 4, 5, 6], "class": [2, 3, 5], "clean": 4, "close": 2, "cnf": 2, "code": [4, 5], "column": [2, 5], "combin": [2, 3], "come": 4, "compar": [2, 6], "compos": 4, "conclus": 2, "conjunct": [2, 6], "consequ": 2, "consist": [2, 3, 6], "contain": [1, 2, 3, 4, 5, 6], "contradict": [2, 3, 6], "convent": [2, 6], "convers": 2, "convert": [2, 4, 6], "convert_cnf": 2, "convert_cnf_recur": [2, 6], "convert_cnf_t": [2, 6], "convert_express": 2, "convert_opt": 2, "correspond": [1, 2, 3, 5], "count": [2, 5], "cparen": 3, "creat": [0, 2, 3, 5, 6], "creation": [2, 3], "current": 3, "d": [1, 2, 3, 4, 5, 6], "default": [2, 3, 4, 5], "demonstr": [4, 6], "depend": 4, "descript": 2, "desir": 2, "detail": 2, "determin": [2, 3, 6], "dictionari": [1, 2, 3], "differ": 6, "dist_not": 2, "dist_or": 2, "distinct": 4, "distribut": 2, "docstr": [1, 2, 3, 4, 5, 6], "doe": 2, "doubl": 4, "e": 2, "each": [2, 4, 5], "easi": 5, "effici": 4, "either": [1, 4], "element": [1, 2], "elsewher": 4, "empti": 2, "end": [2, 3, 5, 6], "entir": 2, "entri": 4, "equal": [2, 6], "equival": [2, 5, 6], "error": [2, 3, 4, 5, 6], "espresso": 3, "essenti": 5, "eval": 3, "eval_and_op": 3, "eval_bin_op": 3, "eval_f": 1, "eval_formula": 1, "eval_iff_op": 3, "eval_ifthen_op": 3, "eval_ltor_tok": 3, "eval_mon_op": 3, "eval_op": 1, "eval_or_op": 3, "evalu": [0, 2, 3, 4, 6], "everi": 2, "examin": 2, "exampl": [1, 2, 3, 4, 5, 6], "exclus": 2, "exp": 2, "explicitli": [2, 6], "exponenti": [2, 3], "express": [0, 2, 4, 5, 6], "f": [2, 4, 6], "fals": [1, 2, 3, 4, 5, 6], "find": [2, 4, 5], "first": [2, 3], "follow": [2, 3, 4, 6], "form": [0, 2, 6], "format": [1, 2, 3, 4, 5, 6], "formula": [0, 3, 5, 6], "found": 3, "from": [1, 2, 3, 4, 5, 6], "front": 3, "full": [2, 4, 6], "full_tre": [2, 4], "func": 4, "function": [2, 3, 4], "g": [2, 4, 6], "get": 5, "get_bit": [2, 3], "get_formula": [2, 6], "get_next_op": 2, "get_table_list": 5, "get_tre": 4, "given": [1, 2, 3, 5, 6], "global": [3, 5], "gorecki": [1, 2, 3, 4, 5, 6], "gracefulli": 2, "greenberg": 6, "guarante": 2, "h": [2, 4, 6], "ha": 2, "handl": [2, 4], "have": 2, "high": 2, "hline": 5, "hoo": 2, "how": [1, 2, 3, 4, 5], "human": [2, 5], "hypothes": 2, "i": [2, 3, 4, 5, 6], "identifi": [2, 6], "iff": 2, "ifthen": [2, 6], "ignor": 2, "illustr": [1, 2, 3, 4, 5, 6], "implement": 3, "impli": 2, "import": [1, 2, 3, 4, 5, 6], "includ": 2, "inclus": 2, "increas": 2, "index": [0, 2], "infer": 4, "infix": [2, 4], "initi": [1, 2, 3, 4, 5, 6], "inner": 3, "input": [1, 2, 3, 4, 5, 6], "instanc": [2, 4, 5, 6], "int": 3, "integ": [2, 3, 4, 5, 6], "integr": 3, "intern": [3, 4], "invalid": [2, 3, 6], "involv": 2, "is_consequ": 2, "is_contradict": [2, 6], "is_satisfi": [2, 6], "is_tautologi": [2, 6], "issu": 2, "its": [2, 3, 5], "j": [4, 6], "k": [4, 6], "kei": [1, 3], "l": 6, "lambda": 4, "larg": 2, "last": [2, 3, 6], "latex": 5, "lead": [2, 6], "left": 3, "length": [2, 3, 4], "letter": [2, 3, 6], "librari": 3, "like": 5, "list": [1, 2, 3, 4, 5, 6], "llll": 5, "log": 3, "logic": [1, 2, 4, 6], "logicpars": [2, 4, 6], "logict": [2, 5, 6], "long": 2, "longer": 5, "look": 5, "low": 2, "lrtok": 3, "lv": 1, "lval": 3, "m": 6, "made": 2, "mai": [2, 4, 6], "make": 2, "malform": [2, 3, 6], "man": [2, 5], "manipul": [2, 3], "meant": 4, "method": [2, 3], "michael": 6, "modifi": [0, 1], "modul": [0, 2], "monkei": [2, 5], "monoton": 3, "more": 4, "most": [2, 3, 4, 6], "multipl": [2, 4], "must": [2, 3, 6], "n": [2, 3, 4], "n0": 2, "n1": 2, "name": [2, 3, 5, 6], "nameerror": [2, 6], "necessarili": 2, "neg": [2, 5], "negat": 4, "nest": [2, 4], "new": [2, 3, 4], "next": 2, "node": 4, "none": [2, 3, 4], "nonsens": 5, "nor": 2, "normal": [2, 6], "notat": 2, "note": 2, "notimplementederror": 3, "now": [2, 3, 4, 6], "number": [2, 3], "numer": [3, 5], "o": [2, 3], "object": [2, 3, 5], "occur": [2, 4, 5], "off": 5, "onc": [2, 5], "one": [2, 4, 5], "onli": [2, 3, 5, 6], "op": [1, 2], "oparen": 3, "oper": [1, 2, 3, 4, 6], "order": [2, 3, 4, 5, 6], "origin": 2, "other": [2, 3], "our": 1, "out": 2, "output": [1, 2, 3, 4, 5, 6], "over": 2, "p": [2, 4], "page": [0, 5], "pair": [2, 3, 4], "paramet": [2, 3, 4], "parenthes": [2, 3, 6], "pars": [0, 1, 2, 6], "parse_ltor": 4, "part": 3, "pass": [2, 4], "paul": [1, 2, 3, 4, 5, 6], "perform": [2, 4], "place": 3, "pleas": 2, "plu": 2, "pointer": 3, "polish": [2, 4], "polish_not": 2, "polish_pars": 4, "popul": 3, "possibl": 6, "prefer": 2, "prefix": [2, 4], "prefix_to_infix": 4, "prefix_tre": 4, "previou": 4, "print": [3, 5], "print_tabl": 3, "privat": 5, "produc": 4, "proof": 4, "prop": 2, "propcalc": [2, 4, 5, 6], "proposit": 0, "prove": 3, "provid": 5, "purpos": 4, "python": [1, 2, 3, 4, 5, 6], "q": [2, 3, 4], "r": [2, 4], "rang": [2, 5], "recent": [2, 3, 6], "recov": 4, "recover_formula": 4, "recover_formula_intern": 4, "recoveri": 4, "reduce_bin": 3, "reduce_mono": 3, "reduce_op": 2, "relat": 4, "reli": 3, "repeat": 4, "replac": 3, "repres": [1, 2, 3, 4], "represent": [2, 4, 5, 6], "requir": [2, 3], "respect": 3, "result": [1, 2, 3], "return": [1, 2, 3, 4, 5, 6], "right": [2, 3], "row": [2, 3], "rule": 2, "run": 5, "rv": 1, "rval": 3, "s1": 3, "s2": 3, "sage": [1, 2, 3, 4, 5, 6], "sat": 2, "satformat": 2, "satisfi": [2, 6], "satlib": 2, "screen": 5, "scurek": [1, 2, 3, 4, 5, 6], "search": 0, "second": [3, 5], "see": [2, 3], "self": 2, "semant": [2, 4, 6], "sent": [2, 3], "set": [2, 3, 4, 6], "shorten": 3, "should": 2, "show": [2, 5, 6], "side": [1, 2], "simpl": 4, "simplifi": [3, 4], "singl": [2, 3, 4], "size": 2, "so": 2, "some": [2, 6], "sourc": [1, 2, 3, 4, 5, 6], "space": 2, "start": [2, 3, 6], "statement": [2, 3, 4, 5, 6], "statement1": 3, "statement2": 3, "stein": [3, 5], "store": 5, "str": 2, "string": [1, 2, 3, 4, 6], "switch": 4, "symboliclog": 3, "synonym": 2, "syntact": [2, 4], "syntax": [2, 3, 4, 6], "syntaxerror": [2, 6], "t": [1, 2, 3, 4, 5, 6], "tabl": [2, 3, 6], "tabular": 5, "tack": 3, "take": [2, 3], "taken": [2, 3], "tautologi": [2, 3, 6], "test": 3, "than": 5, "thei": [2, 3, 4], "them": 2, "thi": [1, 2, 3, 4, 5, 6], "three": [1, 3], "thu": 5, "time": [2, 3], "to_infix": 2, "to_infix_intern": 4, "togeth": 3, "tok": [3, 4], "token": [3, 4], "traceback": [2, 3, 6], "trail": [2, 6], "tree": [0, 1, 2, 6], "tree_pars": 4, "true": [1, 2, 3, 4, 5, 6], "truth": [2, 3, 4, 5, 6], "truthtabl": [2, 3, 5, 6], "tupl": 2, "turn": [2, 4], "two": [2, 3, 4], "typic": 2, "u": 6, "ubc": 2, "unari": 4, "underscor": [2, 3, 6], "unless": [2, 4], "up": [2, 4], "updat": [1, 2, 3, 4, 5, 6], "us": [2, 3, 4, 5, 6], "v": 6, "valid_consequ": 6, "valu": [1, 2, 3, 4, 5, 6], "var": 3, "var_valu": 2, "vari": 2, "variabl": [1, 2, 3, 4, 5, 6], "vars_ord": 3, "vdict": 1, "version": [1, 2, 3, 4, 5, 6], "vo": [2, 5], "wai": 6, "we": [1, 2, 3, 4, 6], "well": [0, 2], "were": 3, "when": [2, 3, 4, 5], "where": [2, 3, 4, 5], "which": [2, 3, 4, 5], "while": 2, "whole": 3, "william": [3, 5], "work": 2, "worst": 2, "would": 5, "www": 2, "x": [2, 3], "xor": [2, 6]}, "titles": ["Symbolic Logic", "Evaluation of Boolean Formulas", "Boolean Formulas", "Symbolic Logic Expressions", "Module that creates and modifies parse trees of well formed boolean formulas.", "Logic Tables", "Propositional Calculus"], "titleterms": {"boolean": [1, 2, 4], "calculu": 6, "creat": 4, "evalu": 1, "express": 3, "form": 4, "formula": [1, 2, 4], "indic": 0, "logic": [0, 3, 5], "modifi": 4, "modul": 4, "pars": 4, "proposit": 6, "symbol": [0, 3], "tabl": [0, 5], "todo": 3, "tree": 4, "well": 4}})